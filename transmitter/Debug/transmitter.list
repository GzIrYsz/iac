
transmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008140  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  08008310  08008310  00018310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008780  08008780  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008780  08008780  00018780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008788  08008788  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008788  08008788  00018788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800878c  0800878c  0001878c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008790  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  200001d4  08008964  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  08008964  0002038c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000842b  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001739  00000000  00000000  00028672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000768  00000000  00000000  00029db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000059d  00000000  00000000  0002a518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021bbe  00000000  00000000  0002aab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000096de  00000000  00000000  0004c673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca06f  00000000  00000000  00055d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000034f0  00000000  00000000  0011fdc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  001232b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080082f8 	.word	0x080082f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	080082f8 	.word	0x080082f8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b09a      	sub	sp, #104	; 0x68
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001036:	f000 faef 	bl	8001618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103a:	f000 f80d 	bl	8001058 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103e:	f000 f8a3 	bl	8001188 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001042:	f000 f877 	bl	8001134 <MX_USART2_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char buf[100];
  scanf("%s", buf);
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	4619      	mov	r1, r3
 800104a:	4802      	ldr	r0, [pc, #8]	; (8001054 <main+0x24>)
 800104c:	f003 fe64 	bl	8004d18 <iscanf>
  while (1)
 8001050:	e7fe      	b.n	8001050 <main+0x20>
 8001052:	bf00      	nop
 8001054:	08008310 	.word	0x08008310

08001058 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b094      	sub	sp, #80	; 0x50
 800105c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105e:	f107 031c 	add.w	r3, r7, #28
 8001062:	2234      	movs	r2, #52	; 0x34
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f003 fe7a 	bl	8004d60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800106c:	f107 0308 	add.w	r3, r7, #8
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800107c:	2300      	movs	r3, #0
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	4b2a      	ldr	r3, [pc, #168]	; (800112c <SystemClock_Config+0xd4>)
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	4a29      	ldr	r2, [pc, #164]	; (800112c <SystemClock_Config+0xd4>)
 8001086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108a:	6413      	str	r3, [r2, #64]	; 0x40
 800108c:	4b27      	ldr	r3, [pc, #156]	; (800112c <SystemClock_Config+0xd4>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001098:	2300      	movs	r3, #0
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	4b24      	ldr	r3, [pc, #144]	; (8001130 <SystemClock_Config+0xd8>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010a4:	4a22      	ldr	r2, [pc, #136]	; (8001130 <SystemClock_Config+0xd8>)
 80010a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010aa:	6013      	str	r3, [r2, #0]
 80010ac:	4b20      	ldr	r3, [pc, #128]	; (8001130 <SystemClock_Config+0xd8>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010b4:	603b      	str	r3, [r7, #0]
 80010b6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010b8:	2302      	movs	r3, #2
 80010ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010bc:	2301      	movs	r3, #1
 80010be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010c0:	2310      	movs	r3, #16
 80010c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c4:	2302      	movs	r3, #2
 80010c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010c8:	2300      	movs	r3, #0
 80010ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010cc:	2310      	movs	r3, #16
 80010ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010d0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010d6:	2304      	movs	r3, #4
 80010d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010da:	2302      	movs	r3, #2
 80010dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010de:	2302      	movs	r3, #2
 80010e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e2:	f107 031c 	add.w	r3, r7, #28
 80010e6:	4618      	mov	r0, r3
 80010e8:	f001 f8e6 	bl	80022b8 <HAL_RCC_OscConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80010f2:	f000 f8ef 	bl	80012d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f6:	230f      	movs	r3, #15
 80010f8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010fa:	2302      	movs	r3, #2
 80010fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001102:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001106:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001108:	2300      	movs	r3, #0
 800110a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800110c:	f107 0308 	add.w	r3, r7, #8
 8001110:	2102      	movs	r1, #2
 8001112:	4618      	mov	r0, r3
 8001114:	f000 fd86 	bl	8001c24 <HAL_RCC_ClockConfig>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800111e:	f000 f8d9 	bl	80012d4 <Error_Handler>
  }
}
 8001122:	bf00      	nop
 8001124:	3750      	adds	r7, #80	; 0x50
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800
 8001130:	40007000 	.word	0x40007000

08001134 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <MX_USART2_UART_Init+0x4c>)
 800113a:	4a12      	ldr	r2, [pc, #72]	; (8001184 <MX_USART2_UART_Init+0x50>)
 800113c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800113e:	4b10      	ldr	r3, [pc, #64]	; (8001180 <MX_USART2_UART_Init+0x4c>)
 8001140:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001144:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <MX_USART2_UART_Init+0x4c>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <MX_USART2_UART_Init+0x4c>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <MX_USART2_UART_Init+0x4c>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001158:	4b09      	ldr	r3, [pc, #36]	; (8001180 <MX_USART2_UART_Init+0x4c>)
 800115a:	220c      	movs	r2, #12
 800115c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800115e:	4b08      	ldr	r3, [pc, #32]	; (8001180 <MX_USART2_UART_Init+0x4c>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <MX_USART2_UART_Init+0x4c>)
 8001166:	2200      	movs	r2, #0
 8001168:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800116a:	4805      	ldr	r0, [pc, #20]	; (8001180 <MX_USART2_UART_Init+0x4c>)
 800116c:	f001 fb42 	bl	80027f4 <HAL_UART_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001176:	f000 f8ad 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200001f0 	.word	0x200001f0
 8001184:	40004400 	.word	0x40004400

08001188 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	4b2d      	ldr	r3, [pc, #180]	; (8001258 <MX_GPIO_Init+0xd0>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a2c      	ldr	r2, [pc, #176]	; (8001258 <MX_GPIO_Init+0xd0>)
 80011a8:	f043 0304 	orr.w	r3, r3, #4
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b2a      	ldr	r3, [pc, #168]	; (8001258 <MX_GPIO_Init+0xd0>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0304 	and.w	r3, r3, #4
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	4b26      	ldr	r3, [pc, #152]	; (8001258 <MX_GPIO_Init+0xd0>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a25      	ldr	r2, [pc, #148]	; (8001258 <MX_GPIO_Init+0xd0>)
 80011c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b23      	ldr	r3, [pc, #140]	; (8001258 <MX_GPIO_Init+0xd0>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <MX_GPIO_Init+0xd0>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a1e      	ldr	r2, [pc, #120]	; (8001258 <MX_GPIO_Init+0xd0>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <MX_GPIO_Init+0xd0>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	4b18      	ldr	r3, [pc, #96]	; (8001258 <MX_GPIO_Init+0xd0>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a17      	ldr	r2, [pc, #92]	; (8001258 <MX_GPIO_Init+0xd0>)
 80011fc:	f043 0302 	orr.w	r3, r3, #2
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <MX_GPIO_Init+0xd0>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|BUZ_Pin, GPIO_PIN_RESET);
 800120e:	2200      	movs	r2, #0
 8001210:	2160      	movs	r1, #96	; 0x60
 8001212:	4812      	ldr	r0, [pc, #72]	; (800125c <MX_GPIO_Init+0xd4>)
 8001214:	f000 fcec 	bl	8001bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001218:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800121c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800121e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001222:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4619      	mov	r1, r3
 800122e:	480c      	ldr	r0, [pc, #48]	; (8001260 <MX_GPIO_Init+0xd8>)
 8001230:	f000 fb4a 	bl	80018c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin BUZ_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|BUZ_Pin;
 8001234:	2360      	movs	r3, #96	; 0x60
 8001236:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001238:	2301      	movs	r3, #1
 800123a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001240:	2300      	movs	r3, #0
 8001242:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	4619      	mov	r1, r3
 800124a:	4804      	ldr	r0, [pc, #16]	; (800125c <MX_GPIO_Init+0xd4>)
 800124c:	f000 fb3c 	bl	80018c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001250:	bf00      	nop
 8001252:	3728      	adds	r7, #40	; 0x28
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40023800 	.word	0x40023800
 800125c:	40020000 	.word	0x40020000
 8001260:	40020800 	.word	0x40020800

08001264 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800126c:	1d39      	adds	r1, r7, #4
 800126e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001272:	2201      	movs	r2, #1
 8001274:	4803      	ldr	r0, [pc, #12]	; (8001284 <__io_putchar+0x20>)
 8001276:	f001 fb0d 	bl	8002894 <HAL_UART_Transmit>

  return ch;
 800127a:	687b      	ldr	r3, [r7, #4]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	200001f0 	.word	0x200001f0

08001288 <__io_getchar>:

GETCHAR_PROTOTYPE {
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart2);
 8001292:	2300      	movs	r3, #0
 8001294:	603b      	str	r3, [r7, #0]
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <__io_getchar+0x48>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	603b      	str	r3, [r7, #0]
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <__io_getchar+0x48>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	603b      	str	r3, [r7, #0]
 80012a6:	683b      	ldr	r3, [r7, #0]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80012a8:	1df9      	adds	r1, r7, #7
 80012aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012ae:	2201      	movs	r2, #1
 80012b0:	4807      	ldr	r0, [pc, #28]	; (80012d0 <__io_getchar+0x48>)
 80012b2:	f001 fb7a 	bl	80029aa <HAL_UART_Receive>
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80012b6:	1df9      	adds	r1, r7, #7
 80012b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012bc:	2201      	movs	r2, #1
 80012be:	4804      	ldr	r0, [pc, #16]	; (80012d0 <__io_getchar+0x48>)
 80012c0:	f001 fae8 	bl	8002894 <HAL_UART_Transmit>
  return ch;
 80012c4:	79fb      	ldrb	r3, [r7, #7]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200001f0 	.word	0x200001f0

080012d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d8:	b672      	cpsid	i
}
 80012da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012dc:	e7fe      	b.n	80012dc <Error_Handler+0x8>
	...

080012e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	607b      	str	r3, [r7, #4]
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <HAL_MspInit+0x4c>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	4a0f      	ldr	r2, [pc, #60]	; (800132c <HAL_MspInit+0x4c>)
 80012f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f4:	6453      	str	r3, [r2, #68]	; 0x44
 80012f6:	4b0d      	ldr	r3, [pc, #52]	; (800132c <HAL_MspInit+0x4c>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	603b      	str	r3, [r7, #0]
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <HAL_MspInit+0x4c>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	4a08      	ldr	r2, [pc, #32]	; (800132c <HAL_MspInit+0x4c>)
 800130c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001310:	6413      	str	r3, [r2, #64]	; 0x40
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_MspInit+0x4c>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800131e:	2007      	movs	r0, #7
 8001320:	f000 fa9e 	bl	8001860 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40023800 	.word	0x40023800

08001330 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	; 0x28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a19      	ldr	r2, [pc, #100]	; (80013b4 <HAL_UART_MspInit+0x84>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d12b      	bne.n	80013aa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <HAL_UART_MspInit+0x88>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	4a17      	ldr	r2, [pc, #92]	; (80013b8 <HAL_UART_MspInit+0x88>)
 800135c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001360:	6413      	str	r3, [r2, #64]	; 0x40
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <HAL_UART_MspInit+0x88>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <HAL_UART_MspInit+0x88>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a10      	ldr	r2, [pc, #64]	; (80013b8 <HAL_UART_MspInit+0x88>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <HAL_UART_MspInit+0x88>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800138a:	230c      	movs	r3, #12
 800138c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138e:	2302      	movs	r3, #2
 8001390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001396:	2303      	movs	r3, #3
 8001398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800139a:	2307      	movs	r3, #7
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	4619      	mov	r1, r3
 80013a4:	4805      	ldr	r0, [pc, #20]	; (80013bc <HAL_UART_MspInit+0x8c>)
 80013a6:	f000 fa8f 	bl	80018c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013aa:	bf00      	nop
 80013ac:	3728      	adds	r7, #40	; 0x28
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40004400 	.word	0x40004400
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40020000 	.word	0x40020000

080013c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013c4:	e7fe      	b.n	80013c4 <NMI_Handler+0x4>

080013c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ca:	e7fe      	b.n	80013ca <HardFault_Handler+0x4>

080013cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <MemManage_Handler+0x4>

080013d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d2:	b480      	push	{r7}
 80013d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d6:	e7fe      	b.n	80013d6 <BusFault_Handler+0x4>

080013d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <UsageFault_Handler+0x4>

080013de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800140c:	f000 f956 	bl	80016bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}

08001414 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return 1;
 8001418:	2301      	movs	r3, #1
}
 800141a:	4618      	mov	r0, r3
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <_kill>:

int _kill(int pid, int sig)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800142e:	f003 fca3 	bl	8004d78 <__errno>
 8001432:	4603      	mov	r3, r0
 8001434:	2216      	movs	r2, #22
 8001436:	601a      	str	r2, [r3, #0]
  return -1;
 8001438:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800143c:	4618      	mov	r0, r3
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <_exit>:

void _exit (int status)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800144c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff ffe7 	bl	8001424 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001456:	e7fe      	b.n	8001456 <_exit+0x12>

08001458 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
 8001468:	e00a      	b.n	8001480 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800146a:	f7ff ff0d 	bl	8001288 <__io_getchar>
 800146e:	4601      	mov	r1, r0
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	1c5a      	adds	r2, r3, #1
 8001474:	60ba      	str	r2, [r7, #8]
 8001476:	b2ca      	uxtb	r2, r1
 8001478:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	3301      	adds	r3, #1
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	697a      	ldr	r2, [r7, #20]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	429a      	cmp	r2, r3
 8001486:	dbf0      	blt.n	800146a <_read+0x12>
  }

  return len;
 8001488:	687b      	ldr	r3, [r7, #4]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af00      	add	r7, sp, #0
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	e009      	b.n	80014b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	1c5a      	adds	r2, r3, #1
 80014a8:	60ba      	str	r2, [r7, #8]
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fed9 	bl	8001264 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	3301      	adds	r3, #1
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	429a      	cmp	r2, r3
 80014be:	dbf1      	blt.n	80014a4 <_write+0x12>
  }
  return len;
 80014c0:	687b      	ldr	r3, [r7, #4]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <_close>:

int _close(int file)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b083      	sub	sp, #12
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
 80014ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014f2:	605a      	str	r2, [r3, #4]
  return 0;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <_isatty>:

int _isatty(int file)
{
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800150a:	2301      	movs	r3, #1
}
 800150c:	4618      	mov	r0, r3
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
	...

08001534 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800153c:	4a14      	ldr	r2, [pc, #80]	; (8001590 <_sbrk+0x5c>)
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <_sbrk+0x60>)
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001548:	4b13      	ldr	r3, [pc, #76]	; (8001598 <_sbrk+0x64>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d102      	bne.n	8001556 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <_sbrk+0x64>)
 8001552:	4a12      	ldr	r2, [pc, #72]	; (800159c <_sbrk+0x68>)
 8001554:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001556:	4b10      	ldr	r3, [pc, #64]	; (8001598 <_sbrk+0x64>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	429a      	cmp	r2, r3
 8001562:	d207      	bcs.n	8001574 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001564:	f003 fc08 	bl	8004d78 <__errno>
 8001568:	4603      	mov	r3, r0
 800156a:	220c      	movs	r2, #12
 800156c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800156e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001572:	e009      	b.n	8001588 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001574:	4b08      	ldr	r3, [pc, #32]	; (8001598 <_sbrk+0x64>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800157a:	4b07      	ldr	r3, [pc, #28]	; (8001598 <_sbrk+0x64>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	4a05      	ldr	r2, [pc, #20]	; (8001598 <_sbrk+0x64>)
 8001584:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001586:	68fb      	ldr	r3, [r7, #12]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20020000 	.word	0x20020000
 8001594:	00000400 	.word	0x00000400
 8001598:	20000238 	.word	0x20000238
 800159c:	20000390 	.word	0x20000390

080015a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <SystemInit+0x20>)
 80015a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015aa:	4a05      	ldr	r2, [pc, #20]	; (80015c0 <SystemInit+0x20>)
 80015ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015fc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80015c8:	f7ff ffea 	bl	80015a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015cc:	480c      	ldr	r0, [pc, #48]	; (8001600 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015ce:	490d      	ldr	r1, [pc, #52]	; (8001604 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015d0:	4a0d      	ldr	r2, [pc, #52]	; (8001608 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d4:	e002      	b.n	80015dc <LoopCopyDataInit>

080015d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015da:	3304      	adds	r3, #4

080015dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e0:	d3f9      	bcc.n	80015d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015e2:	4a0a      	ldr	r2, [pc, #40]	; (800160c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015e4:	4c0a      	ldr	r4, [pc, #40]	; (8001610 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e8:	e001      	b.n	80015ee <LoopFillZerobss>

080015ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ec:	3204      	adds	r2, #4

080015ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f0:	d3fb      	bcc.n	80015ea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80015f2:	f003 fbc7 	bl	8004d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015f6:	f7ff fd1b 	bl	8001030 <main>
  bx  lr    
 80015fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001604:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001608:	08008790 	.word	0x08008790
  ldr r2, =_sbss
 800160c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001610:	2000038c 	.word	0x2000038c

08001614 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001614:	e7fe      	b.n	8001614 <ADC_IRQHandler>
	...

08001618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800161c:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <HAL_Init+0x40>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0d      	ldr	r2, [pc, #52]	; (8001658 <HAL_Init+0x40>)
 8001622:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001626:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001628:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <HAL_Init+0x40>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a0a      	ldr	r2, [pc, #40]	; (8001658 <HAL_Init+0x40>)
 800162e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001632:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <HAL_Init+0x40>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a07      	ldr	r2, [pc, #28]	; (8001658 <HAL_Init+0x40>)
 800163a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800163e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001640:	2003      	movs	r0, #3
 8001642:	f000 f90d 	bl	8001860 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001646:	2000      	movs	r0, #0
 8001648:	f000 f808 	bl	800165c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800164c:	f7ff fe48 	bl	80012e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40023c00 	.word	0x40023c00

0800165c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_InitTick+0x54>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_InitTick+0x58>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	4619      	mov	r1, r3
 800166e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001672:	fbb3 f3f1 	udiv	r3, r3, r1
 8001676:	fbb2 f3f3 	udiv	r3, r2, r3
 800167a:	4618      	mov	r0, r3
 800167c:	f000 f917 	bl	80018ae <HAL_SYSTICK_Config>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e00e      	b.n	80016a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b0f      	cmp	r3, #15
 800168e:	d80a      	bhi.n	80016a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001690:	2200      	movs	r2, #0
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001698:	f000 f8ed 	bl	8001876 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800169c:	4a06      	ldr	r2, [pc, #24]	; (80016b8 <HAL_InitTick+0x5c>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
 80016a4:	e000      	b.n	80016a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000000 	.word	0x20000000
 80016b4:	20000008 	.word	0x20000008
 80016b8:	20000004 	.word	0x20000004

080016bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <HAL_IncTick+0x20>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	461a      	mov	r2, r3
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <HAL_IncTick+0x24>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4413      	add	r3, r2
 80016cc:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <HAL_IncTick+0x24>)
 80016ce:	6013      	str	r3, [r2, #0]
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	20000008 	.word	0x20000008
 80016e0:	2000023c 	.word	0x2000023c

080016e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return uwTick;
 80016e8:	4b03      	ldr	r3, [pc, #12]	; (80016f8 <HAL_GetTick+0x14>)
 80016ea:	681b      	ldr	r3, [r3, #0]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	2000023c 	.word	0x2000023c

080016fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800170c:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <__NVIC_SetPriorityGrouping+0x44>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001718:	4013      	ands	r3, r2
 800171a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001724:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800172c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800172e:	4a04      	ldr	r2, [pc, #16]	; (8001740 <__NVIC_SetPriorityGrouping+0x44>)
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	60d3      	str	r3, [r2, #12]
}
 8001734:	bf00      	nop
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001748:	4b04      	ldr	r3, [pc, #16]	; (800175c <__NVIC_GetPriorityGrouping+0x18>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	0a1b      	lsrs	r3, r3, #8
 800174e:	f003 0307 	and.w	r3, r3, #7
}
 8001752:	4618      	mov	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	6039      	str	r1, [r7, #0]
 800176a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800176c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001770:	2b00      	cmp	r3, #0
 8001772:	db0a      	blt.n	800178a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	b2da      	uxtb	r2, r3
 8001778:	490c      	ldr	r1, [pc, #48]	; (80017ac <__NVIC_SetPriority+0x4c>)
 800177a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177e:	0112      	lsls	r2, r2, #4
 8001780:	b2d2      	uxtb	r2, r2
 8001782:	440b      	add	r3, r1
 8001784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001788:	e00a      	b.n	80017a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	b2da      	uxtb	r2, r3
 800178e:	4908      	ldr	r1, [pc, #32]	; (80017b0 <__NVIC_SetPriority+0x50>)
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	3b04      	subs	r3, #4
 8001798:	0112      	lsls	r2, r2, #4
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	440b      	add	r3, r1
 800179e:	761a      	strb	r2, [r3, #24]
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000e100 	.word	0xe000e100
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b089      	sub	sp, #36	; 0x24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	f1c3 0307 	rsb	r3, r3, #7
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	bf28      	it	cs
 80017d2:	2304      	movcs	r3, #4
 80017d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3304      	adds	r3, #4
 80017da:	2b06      	cmp	r3, #6
 80017dc:	d902      	bls.n	80017e4 <NVIC_EncodePriority+0x30>
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3b03      	subs	r3, #3
 80017e2:	e000      	b.n	80017e6 <NVIC_EncodePriority+0x32>
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43da      	mvns	r2, r3
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	401a      	ands	r2, r3
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	fa01 f303 	lsl.w	r3, r1, r3
 8001806:	43d9      	mvns	r1, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180c:	4313      	orrs	r3, r2
         );
}
 800180e:	4618      	mov	r0, r3
 8001810:	3724      	adds	r7, #36	; 0x24
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
	...

0800181c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3b01      	subs	r3, #1
 8001828:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800182c:	d301      	bcc.n	8001832 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800182e:	2301      	movs	r3, #1
 8001830:	e00f      	b.n	8001852 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001832:	4a0a      	ldr	r2, [pc, #40]	; (800185c <SysTick_Config+0x40>)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3b01      	subs	r3, #1
 8001838:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800183a:	210f      	movs	r1, #15
 800183c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001840:	f7ff ff8e 	bl	8001760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001844:	4b05      	ldr	r3, [pc, #20]	; (800185c <SysTick_Config+0x40>)
 8001846:	2200      	movs	r2, #0
 8001848:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800184a:	4b04      	ldr	r3, [pc, #16]	; (800185c <SysTick_Config+0x40>)
 800184c:	2207      	movs	r2, #7
 800184e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	e000e010 	.word	0xe000e010

08001860 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff ff47 	bl	80016fc <__NVIC_SetPriorityGrouping>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001876:	b580      	push	{r7, lr}
 8001878:	b086      	sub	sp, #24
 800187a:	af00      	add	r7, sp, #0
 800187c:	4603      	mov	r3, r0
 800187e:	60b9      	str	r1, [r7, #8]
 8001880:	607a      	str	r2, [r7, #4]
 8001882:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001888:	f7ff ff5c 	bl	8001744 <__NVIC_GetPriorityGrouping>
 800188c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	68b9      	ldr	r1, [r7, #8]
 8001892:	6978      	ldr	r0, [r7, #20]
 8001894:	f7ff ff8e 	bl	80017b4 <NVIC_EncodePriority>
 8001898:	4602      	mov	r2, r0
 800189a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800189e:	4611      	mov	r1, r2
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff ff5d 	bl	8001760 <__NVIC_SetPriority>
}
 80018a6:	bf00      	nop
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff ffb0 	bl	800181c <SysTick_Config>
 80018bc:	4603      	mov	r3, r0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	; 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018d2:	2300      	movs	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018da:	2300      	movs	r3, #0
 80018dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
 80018e2:	e165      	b.n	8001bb0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018e4:	2201      	movs	r2, #1
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	4013      	ands	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	f040 8154 	bne.w	8001baa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f003 0303 	and.w	r3, r3, #3
 800190a:	2b01      	cmp	r3, #1
 800190c:	d005      	beq.n	800191a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001916:	2b02      	cmp	r3, #2
 8001918:	d130      	bne.n	800197c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	2203      	movs	r2, #3
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43db      	mvns	r3, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4013      	ands	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	68da      	ldr	r2, [r3, #12]
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4313      	orrs	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001950:	2201      	movs	r2, #1
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	091b      	lsrs	r3, r3, #4
 8001966:	f003 0201 	and.w	r2, r3, #1
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	2b03      	cmp	r3, #3
 8001986:	d017      	beq.n	80019b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	2203      	movs	r2, #3
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d123      	bne.n	8001a0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	08da      	lsrs	r2, r3, #3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3208      	adds	r2, #8
 80019cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	f003 0307 	and.w	r3, r3, #7
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	220f      	movs	r2, #15
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	691a      	ldr	r2, [r3, #16]
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	08da      	lsrs	r2, r3, #3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3208      	adds	r2, #8
 8001a06:	69b9      	ldr	r1, [r7, #24]
 8001a08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	2203      	movs	r2, #3
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 0203 	and.w	r2, r3, #3
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 80ae 	beq.w	8001baa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	4b5d      	ldr	r3, [pc, #372]	; (8001bc8 <HAL_GPIO_Init+0x300>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	4a5c      	ldr	r2, [pc, #368]	; (8001bc8 <HAL_GPIO_Init+0x300>)
 8001a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5e:	4b5a      	ldr	r3, [pc, #360]	; (8001bc8 <HAL_GPIO_Init+0x300>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a6a:	4a58      	ldr	r2, [pc, #352]	; (8001bcc <HAL_GPIO_Init+0x304>)
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	089b      	lsrs	r3, r3, #2
 8001a70:	3302      	adds	r3, #2
 8001a72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	220f      	movs	r2, #15
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a4f      	ldr	r2, [pc, #316]	; (8001bd0 <HAL_GPIO_Init+0x308>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d025      	beq.n	8001ae2 <HAL_GPIO_Init+0x21a>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a4e      	ldr	r2, [pc, #312]	; (8001bd4 <HAL_GPIO_Init+0x30c>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d01f      	beq.n	8001ade <HAL_GPIO_Init+0x216>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a4d      	ldr	r2, [pc, #308]	; (8001bd8 <HAL_GPIO_Init+0x310>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d019      	beq.n	8001ada <HAL_GPIO_Init+0x212>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a4c      	ldr	r2, [pc, #304]	; (8001bdc <HAL_GPIO_Init+0x314>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d013      	beq.n	8001ad6 <HAL_GPIO_Init+0x20e>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a4b      	ldr	r2, [pc, #300]	; (8001be0 <HAL_GPIO_Init+0x318>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d00d      	beq.n	8001ad2 <HAL_GPIO_Init+0x20a>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a4a      	ldr	r2, [pc, #296]	; (8001be4 <HAL_GPIO_Init+0x31c>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d007      	beq.n	8001ace <HAL_GPIO_Init+0x206>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a49      	ldr	r2, [pc, #292]	; (8001be8 <HAL_GPIO_Init+0x320>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d101      	bne.n	8001aca <HAL_GPIO_Init+0x202>
 8001ac6:	2306      	movs	r3, #6
 8001ac8:	e00c      	b.n	8001ae4 <HAL_GPIO_Init+0x21c>
 8001aca:	2307      	movs	r3, #7
 8001acc:	e00a      	b.n	8001ae4 <HAL_GPIO_Init+0x21c>
 8001ace:	2305      	movs	r3, #5
 8001ad0:	e008      	b.n	8001ae4 <HAL_GPIO_Init+0x21c>
 8001ad2:	2304      	movs	r3, #4
 8001ad4:	e006      	b.n	8001ae4 <HAL_GPIO_Init+0x21c>
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e004      	b.n	8001ae4 <HAL_GPIO_Init+0x21c>
 8001ada:	2302      	movs	r3, #2
 8001adc:	e002      	b.n	8001ae4 <HAL_GPIO_Init+0x21c>
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e000      	b.n	8001ae4 <HAL_GPIO_Init+0x21c>
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	69fa      	ldr	r2, [r7, #28]
 8001ae6:	f002 0203 	and.w	r2, r2, #3
 8001aea:	0092      	lsls	r2, r2, #2
 8001aec:	4093      	lsls	r3, r2
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001af4:	4935      	ldr	r1, [pc, #212]	; (8001bcc <HAL_GPIO_Init+0x304>)
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	089b      	lsrs	r3, r3, #2
 8001afa:	3302      	adds	r3, #2
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b02:	4b3a      	ldr	r3, [pc, #232]	; (8001bec <HAL_GPIO_Init+0x324>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b26:	4a31      	ldr	r2, [pc, #196]	; (8001bec <HAL_GPIO_Init+0x324>)
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b2c:	4b2f      	ldr	r3, [pc, #188]	; (8001bec <HAL_GPIO_Init+0x324>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b50:	4a26      	ldr	r2, [pc, #152]	; (8001bec <HAL_GPIO_Init+0x324>)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b56:	4b25      	ldr	r3, [pc, #148]	; (8001bec <HAL_GPIO_Init+0x324>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4013      	ands	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b7a:	4a1c      	ldr	r2, [pc, #112]	; (8001bec <HAL_GPIO_Init+0x324>)
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b80:	4b1a      	ldr	r3, [pc, #104]	; (8001bec <HAL_GPIO_Init+0x324>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ba4:	4a11      	ldr	r2, [pc, #68]	; (8001bec <HAL_GPIO_Init+0x324>)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	3301      	adds	r3, #1
 8001bae:	61fb      	str	r3, [r7, #28]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	2b0f      	cmp	r3, #15
 8001bb4:	f67f ae96 	bls.w	80018e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bb8:	bf00      	nop
 8001bba:	bf00      	nop
 8001bbc:	3724      	adds	r7, #36	; 0x24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40013800 	.word	0x40013800
 8001bd0:	40020000 	.word	0x40020000
 8001bd4:	40020400 	.word	0x40020400
 8001bd8:	40020800 	.word	0x40020800
 8001bdc:	40020c00 	.word	0x40020c00
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40021400 	.word	0x40021400
 8001be8:	40021800 	.word	0x40021800
 8001bec:	40013c00 	.word	0x40013c00

08001bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	807b      	strh	r3, [r7, #2]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c00:	787b      	ldrb	r3, [r7, #1]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c06:	887a      	ldrh	r2, [r7, #2]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c0c:	e003      	b.n	8001c16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c0e:	887b      	ldrh	r3, [r7, #2]
 8001c10:	041a      	lsls	r2, r3, #16
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	619a      	str	r2, [r3, #24]
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
	...

08001c24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e0cc      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c38:	4b68      	ldr	r3, [pc, #416]	; (8001ddc <HAL_RCC_ClockConfig+0x1b8>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 030f 	and.w	r3, r3, #15
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d90c      	bls.n	8001c60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c46:	4b65      	ldr	r3, [pc, #404]	; (8001ddc <HAL_RCC_ClockConfig+0x1b8>)
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4e:	4b63      	ldr	r3, [pc, #396]	; (8001ddc <HAL_RCC_ClockConfig+0x1b8>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d001      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e0b8      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d020      	beq.n	8001cae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c78:	4b59      	ldr	r3, [pc, #356]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	4a58      	ldr	r2, [pc, #352]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0308 	and.w	r3, r3, #8
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d005      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c90:	4b53      	ldr	r3, [pc, #332]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	4a52      	ldr	r2, [pc, #328]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c9c:	4b50      	ldr	r3, [pc, #320]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	494d      	ldr	r1, [pc, #308]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d044      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d107      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc2:	4b47      	ldr	r3, [pc, #284]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d119      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e07f      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d003      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cde:	2b03      	cmp	r3, #3
 8001ce0:	d107      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce2:	4b3f      	ldr	r3, [pc, #252]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d109      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e06f      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf2:	4b3b      	ldr	r3, [pc, #236]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e067      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d02:	4b37      	ldr	r3, [pc, #220]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f023 0203 	bic.w	r2, r3, #3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	4934      	ldr	r1, [pc, #208]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d14:	f7ff fce6 	bl	80016e4 <HAL_GetTick>
 8001d18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1a:	e00a      	b.n	8001d32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d1c:	f7ff fce2 	bl	80016e4 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e04f      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d32:	4b2b      	ldr	r3, [pc, #172]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 020c 	and.w	r2, r3, #12
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d1eb      	bne.n	8001d1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d44:	4b25      	ldr	r3, [pc, #148]	; (8001ddc <HAL_RCC_ClockConfig+0x1b8>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 030f 	and.w	r3, r3, #15
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d20c      	bcs.n	8001d6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d52:	4b22      	ldr	r3, [pc, #136]	; (8001ddc <HAL_RCC_ClockConfig+0x1b8>)
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5a:	4b20      	ldr	r3, [pc, #128]	; (8001ddc <HAL_RCC_ClockConfig+0x1b8>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d001      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e032      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d008      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d78:	4b19      	ldr	r3, [pc, #100]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	4916      	ldr	r1, [pc, #88]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d009      	beq.n	8001daa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d96:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	490e      	ldr	r1, [pc, #56]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001daa:	f000 f855 	bl	8001e58 <HAL_RCC_GetSysClockFreq>
 8001dae:	4602      	mov	r2, r0
 8001db0:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <HAL_RCC_ClockConfig+0x1bc>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	091b      	lsrs	r3, r3, #4
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	490a      	ldr	r1, [pc, #40]	; (8001de4 <HAL_RCC_ClockConfig+0x1c0>)
 8001dbc:	5ccb      	ldrb	r3, [r1, r3]
 8001dbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc2:	4a09      	ldr	r2, [pc, #36]	; (8001de8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001dc6:	4b09      	ldr	r3, [pc, #36]	; (8001dec <HAL_RCC_ClockConfig+0x1c8>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff fc46 	bl	800165c <HAL_InitTick>

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40023c00 	.word	0x40023c00
 8001de0:	40023800 	.word	0x40023800
 8001de4:	08008320 	.word	0x08008320
 8001de8:	20000000 	.word	0x20000000
 8001dec:	20000004 	.word	0x20000004

08001df0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001df4:	4b03      	ldr	r3, [pc, #12]	; (8001e04 <HAL_RCC_GetHCLKFreq+0x14>)
 8001df6:	681b      	ldr	r3, [r3, #0]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	20000000 	.word	0x20000000

08001e08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e0c:	f7ff fff0 	bl	8001df0 <HAL_RCC_GetHCLKFreq>
 8001e10:	4602      	mov	r2, r0
 8001e12:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	0a9b      	lsrs	r3, r3, #10
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	4903      	ldr	r1, [pc, #12]	; (8001e2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e1e:	5ccb      	ldrb	r3, [r1, r3]
 8001e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40023800 	.word	0x40023800
 8001e2c:	08008330 	.word	0x08008330

08001e30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e34:	f7ff ffdc 	bl	8001df0 <HAL_RCC_GetHCLKFreq>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	0b5b      	lsrs	r3, r3, #13
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	4903      	ldr	r1, [pc, #12]	; (8001e54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e46:	5ccb      	ldrb	r3, [r1, r3]
 8001e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40023800 	.word	0x40023800
 8001e54:	08008330 	.word	0x08008330

08001e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e5c:	b0ae      	sub	sp, #184	; 0xb8
 8001e5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e7e:	4bcb      	ldr	r3, [pc, #812]	; (80021ac <HAL_RCC_GetSysClockFreq+0x354>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 030c 	and.w	r3, r3, #12
 8001e86:	2b0c      	cmp	r3, #12
 8001e88:	f200 8206 	bhi.w	8002298 <HAL_RCC_GetSysClockFreq+0x440>
 8001e8c:	a201      	add	r2, pc, #4	; (adr r2, 8001e94 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e92:	bf00      	nop
 8001e94:	08001ec9 	.word	0x08001ec9
 8001e98:	08002299 	.word	0x08002299
 8001e9c:	08002299 	.word	0x08002299
 8001ea0:	08002299 	.word	0x08002299
 8001ea4:	08001ed1 	.word	0x08001ed1
 8001ea8:	08002299 	.word	0x08002299
 8001eac:	08002299 	.word	0x08002299
 8001eb0:	08002299 	.word	0x08002299
 8001eb4:	08001ed9 	.word	0x08001ed9
 8001eb8:	08002299 	.word	0x08002299
 8001ebc:	08002299 	.word	0x08002299
 8001ec0:	08002299 	.word	0x08002299
 8001ec4:	080020c9 	.word	0x080020c9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ec8:	4bb9      	ldr	r3, [pc, #740]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001eca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001ece:	e1e7      	b.n	80022a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ed0:	4bb8      	ldr	r3, [pc, #736]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001ed2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001ed6:	e1e3      	b.n	80022a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ed8:	4bb4      	ldr	r3, [pc, #720]	; (80021ac <HAL_RCC_GetSysClockFreq+0x354>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ee0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ee4:	4bb1      	ldr	r3, [pc, #708]	; (80021ac <HAL_RCC_GetSysClockFreq+0x354>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d071      	beq.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ef0:	4bae      	ldr	r3, [pc, #696]	; (80021ac <HAL_RCC_GetSysClockFreq+0x354>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	099b      	lsrs	r3, r3, #6
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001efc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001f00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001f12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001f16:	4622      	mov	r2, r4
 8001f18:	462b      	mov	r3, r5
 8001f1a:	f04f 0000 	mov.w	r0, #0
 8001f1e:	f04f 0100 	mov.w	r1, #0
 8001f22:	0159      	lsls	r1, r3, #5
 8001f24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f28:	0150      	lsls	r0, r2, #5
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	4621      	mov	r1, r4
 8001f30:	1a51      	subs	r1, r2, r1
 8001f32:	6439      	str	r1, [r7, #64]	; 0x40
 8001f34:	4629      	mov	r1, r5
 8001f36:	eb63 0301 	sbc.w	r3, r3, r1
 8001f3a:	647b      	str	r3, [r7, #68]	; 0x44
 8001f3c:	f04f 0200 	mov.w	r2, #0
 8001f40:	f04f 0300 	mov.w	r3, #0
 8001f44:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001f48:	4649      	mov	r1, r9
 8001f4a:	018b      	lsls	r3, r1, #6
 8001f4c:	4641      	mov	r1, r8
 8001f4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f52:	4641      	mov	r1, r8
 8001f54:	018a      	lsls	r2, r1, #6
 8001f56:	4641      	mov	r1, r8
 8001f58:	1a51      	subs	r1, r2, r1
 8001f5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8001f5c:	4649      	mov	r1, r9
 8001f5e:	eb63 0301 	sbc.w	r3, r3, r1
 8001f62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001f70:	4649      	mov	r1, r9
 8001f72:	00cb      	lsls	r3, r1, #3
 8001f74:	4641      	mov	r1, r8
 8001f76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f7a:	4641      	mov	r1, r8
 8001f7c:	00ca      	lsls	r2, r1, #3
 8001f7e:	4610      	mov	r0, r2
 8001f80:	4619      	mov	r1, r3
 8001f82:	4603      	mov	r3, r0
 8001f84:	4622      	mov	r2, r4
 8001f86:	189b      	adds	r3, r3, r2
 8001f88:	633b      	str	r3, [r7, #48]	; 0x30
 8001f8a:	462b      	mov	r3, r5
 8001f8c:	460a      	mov	r2, r1
 8001f8e:	eb42 0303 	adc.w	r3, r2, r3
 8001f92:	637b      	str	r3, [r7, #52]	; 0x34
 8001f94:	f04f 0200 	mov.w	r2, #0
 8001f98:	f04f 0300 	mov.w	r3, #0
 8001f9c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001fa0:	4629      	mov	r1, r5
 8001fa2:	024b      	lsls	r3, r1, #9
 8001fa4:	4621      	mov	r1, r4
 8001fa6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001faa:	4621      	mov	r1, r4
 8001fac:	024a      	lsls	r2, r1, #9
 8001fae:	4610      	mov	r0, r2
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001fbc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001fc0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001fc4:	f7fe fe80 	bl	8000cc8 <__aeabi_uldivmod>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4613      	mov	r3, r2
 8001fce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001fd2:	e067      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fd4:	4b75      	ldr	r3, [pc, #468]	; (80021ac <HAL_RCC_GetSysClockFreq+0x354>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	099b      	lsrs	r3, r3, #6
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001fe0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001fe4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fec:	67bb      	str	r3, [r7, #120]	; 0x78
 8001fee:	2300      	movs	r3, #0
 8001ff0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001ff2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001ff6:	4622      	mov	r2, r4
 8001ff8:	462b      	mov	r3, r5
 8001ffa:	f04f 0000 	mov.w	r0, #0
 8001ffe:	f04f 0100 	mov.w	r1, #0
 8002002:	0159      	lsls	r1, r3, #5
 8002004:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002008:	0150      	lsls	r0, r2, #5
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4621      	mov	r1, r4
 8002010:	1a51      	subs	r1, r2, r1
 8002012:	62b9      	str	r1, [r7, #40]	; 0x28
 8002014:	4629      	mov	r1, r5
 8002016:	eb63 0301 	sbc.w	r3, r3, r1
 800201a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800201c:	f04f 0200 	mov.w	r2, #0
 8002020:	f04f 0300 	mov.w	r3, #0
 8002024:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002028:	4649      	mov	r1, r9
 800202a:	018b      	lsls	r3, r1, #6
 800202c:	4641      	mov	r1, r8
 800202e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002032:	4641      	mov	r1, r8
 8002034:	018a      	lsls	r2, r1, #6
 8002036:	4641      	mov	r1, r8
 8002038:	ebb2 0a01 	subs.w	sl, r2, r1
 800203c:	4649      	mov	r1, r9
 800203e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002042:	f04f 0200 	mov.w	r2, #0
 8002046:	f04f 0300 	mov.w	r3, #0
 800204a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800204e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002052:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002056:	4692      	mov	sl, r2
 8002058:	469b      	mov	fp, r3
 800205a:	4623      	mov	r3, r4
 800205c:	eb1a 0303 	adds.w	r3, sl, r3
 8002060:	623b      	str	r3, [r7, #32]
 8002062:	462b      	mov	r3, r5
 8002064:	eb4b 0303 	adc.w	r3, fp, r3
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
 800206a:	f04f 0200 	mov.w	r2, #0
 800206e:	f04f 0300 	mov.w	r3, #0
 8002072:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002076:	4629      	mov	r1, r5
 8002078:	028b      	lsls	r3, r1, #10
 800207a:	4621      	mov	r1, r4
 800207c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002080:	4621      	mov	r1, r4
 8002082:	028a      	lsls	r2, r1, #10
 8002084:	4610      	mov	r0, r2
 8002086:	4619      	mov	r1, r3
 8002088:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800208c:	2200      	movs	r2, #0
 800208e:	673b      	str	r3, [r7, #112]	; 0x70
 8002090:	677a      	str	r2, [r7, #116]	; 0x74
 8002092:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002096:	f7fe fe17 	bl	8000cc8 <__aeabi_uldivmod>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	4613      	mov	r3, r2
 80020a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020a4:	4b41      	ldr	r3, [pc, #260]	; (80021ac <HAL_RCC_GetSysClockFreq+0x354>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	0c1b      	lsrs	r3, r3, #16
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	3301      	adds	r3, #1
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80020b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80020ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020be:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80020c6:	e0eb      	b.n	80022a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020c8:	4b38      	ldr	r3, [pc, #224]	; (80021ac <HAL_RCC_GetSysClockFreq+0x354>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020d4:	4b35      	ldr	r3, [pc, #212]	; (80021ac <HAL_RCC_GetSysClockFreq+0x354>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d06b      	beq.n	80021b8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020e0:	4b32      	ldr	r3, [pc, #200]	; (80021ac <HAL_RCC_GetSysClockFreq+0x354>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	099b      	lsrs	r3, r3, #6
 80020e6:	2200      	movs	r2, #0
 80020e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80020ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80020ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020f2:	663b      	str	r3, [r7, #96]	; 0x60
 80020f4:	2300      	movs	r3, #0
 80020f6:	667b      	str	r3, [r7, #100]	; 0x64
 80020f8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80020fc:	4622      	mov	r2, r4
 80020fe:	462b      	mov	r3, r5
 8002100:	f04f 0000 	mov.w	r0, #0
 8002104:	f04f 0100 	mov.w	r1, #0
 8002108:	0159      	lsls	r1, r3, #5
 800210a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800210e:	0150      	lsls	r0, r2, #5
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	4621      	mov	r1, r4
 8002116:	1a51      	subs	r1, r2, r1
 8002118:	61b9      	str	r1, [r7, #24]
 800211a:	4629      	mov	r1, r5
 800211c:	eb63 0301 	sbc.w	r3, r3, r1
 8002120:	61fb      	str	r3, [r7, #28]
 8002122:	f04f 0200 	mov.w	r2, #0
 8002126:	f04f 0300 	mov.w	r3, #0
 800212a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800212e:	4659      	mov	r1, fp
 8002130:	018b      	lsls	r3, r1, #6
 8002132:	4651      	mov	r1, sl
 8002134:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002138:	4651      	mov	r1, sl
 800213a:	018a      	lsls	r2, r1, #6
 800213c:	4651      	mov	r1, sl
 800213e:	ebb2 0801 	subs.w	r8, r2, r1
 8002142:	4659      	mov	r1, fp
 8002144:	eb63 0901 	sbc.w	r9, r3, r1
 8002148:	f04f 0200 	mov.w	r2, #0
 800214c:	f04f 0300 	mov.w	r3, #0
 8002150:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002154:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002158:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800215c:	4690      	mov	r8, r2
 800215e:	4699      	mov	r9, r3
 8002160:	4623      	mov	r3, r4
 8002162:	eb18 0303 	adds.w	r3, r8, r3
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	462b      	mov	r3, r5
 800216a:	eb49 0303 	adc.w	r3, r9, r3
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	f04f 0200 	mov.w	r2, #0
 8002174:	f04f 0300 	mov.w	r3, #0
 8002178:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800217c:	4629      	mov	r1, r5
 800217e:	024b      	lsls	r3, r1, #9
 8002180:	4621      	mov	r1, r4
 8002182:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002186:	4621      	mov	r1, r4
 8002188:	024a      	lsls	r2, r1, #9
 800218a:	4610      	mov	r0, r2
 800218c:	4619      	mov	r1, r3
 800218e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002192:	2200      	movs	r2, #0
 8002194:	65bb      	str	r3, [r7, #88]	; 0x58
 8002196:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002198:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800219c:	f7fe fd94 	bl	8000cc8 <__aeabi_uldivmod>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	4613      	mov	r3, r2
 80021a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80021aa:	e065      	b.n	8002278 <HAL_RCC_GetSysClockFreq+0x420>
 80021ac:	40023800 	.word	0x40023800
 80021b0:	00f42400 	.word	0x00f42400
 80021b4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021b8:	4b3d      	ldr	r3, [pc, #244]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x458>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	099b      	lsrs	r3, r3, #6
 80021be:	2200      	movs	r2, #0
 80021c0:	4618      	mov	r0, r3
 80021c2:	4611      	mov	r1, r2
 80021c4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80021c8:	653b      	str	r3, [r7, #80]	; 0x50
 80021ca:	2300      	movs	r3, #0
 80021cc:	657b      	str	r3, [r7, #84]	; 0x54
 80021ce:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80021d2:	4642      	mov	r2, r8
 80021d4:	464b      	mov	r3, r9
 80021d6:	f04f 0000 	mov.w	r0, #0
 80021da:	f04f 0100 	mov.w	r1, #0
 80021de:	0159      	lsls	r1, r3, #5
 80021e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021e4:	0150      	lsls	r0, r2, #5
 80021e6:	4602      	mov	r2, r0
 80021e8:	460b      	mov	r3, r1
 80021ea:	4641      	mov	r1, r8
 80021ec:	1a51      	subs	r1, r2, r1
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	4649      	mov	r1, r9
 80021f2:	eb63 0301 	sbc.w	r3, r3, r1
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	f04f 0200 	mov.w	r2, #0
 80021fc:	f04f 0300 	mov.w	r3, #0
 8002200:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002204:	4659      	mov	r1, fp
 8002206:	018b      	lsls	r3, r1, #6
 8002208:	4651      	mov	r1, sl
 800220a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800220e:	4651      	mov	r1, sl
 8002210:	018a      	lsls	r2, r1, #6
 8002212:	4651      	mov	r1, sl
 8002214:	1a54      	subs	r4, r2, r1
 8002216:	4659      	mov	r1, fp
 8002218:	eb63 0501 	sbc.w	r5, r3, r1
 800221c:	f04f 0200 	mov.w	r2, #0
 8002220:	f04f 0300 	mov.w	r3, #0
 8002224:	00eb      	lsls	r3, r5, #3
 8002226:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800222a:	00e2      	lsls	r2, r4, #3
 800222c:	4614      	mov	r4, r2
 800222e:	461d      	mov	r5, r3
 8002230:	4643      	mov	r3, r8
 8002232:	18e3      	adds	r3, r4, r3
 8002234:	603b      	str	r3, [r7, #0]
 8002236:	464b      	mov	r3, r9
 8002238:	eb45 0303 	adc.w	r3, r5, r3
 800223c:	607b      	str	r3, [r7, #4]
 800223e:	f04f 0200 	mov.w	r2, #0
 8002242:	f04f 0300 	mov.w	r3, #0
 8002246:	e9d7 4500 	ldrd	r4, r5, [r7]
 800224a:	4629      	mov	r1, r5
 800224c:	028b      	lsls	r3, r1, #10
 800224e:	4621      	mov	r1, r4
 8002250:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002254:	4621      	mov	r1, r4
 8002256:	028a      	lsls	r2, r1, #10
 8002258:	4610      	mov	r0, r2
 800225a:	4619      	mov	r1, r3
 800225c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002260:	2200      	movs	r2, #0
 8002262:	64bb      	str	r3, [r7, #72]	; 0x48
 8002264:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002266:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800226a:	f7fe fd2d 	bl	8000cc8 <__aeabi_uldivmod>
 800226e:	4602      	mov	r2, r0
 8002270:	460b      	mov	r3, r1
 8002272:	4613      	mov	r3, r2
 8002274:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002278:	4b0d      	ldr	r3, [pc, #52]	; (80022b0 <HAL_RCC_GetSysClockFreq+0x458>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	0f1b      	lsrs	r3, r3, #28
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002286:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800228a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800228e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002292:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002296:	e003      	b.n	80022a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002298:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800229a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800229e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	37b8      	adds	r7, #184	; 0xb8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022ae:	bf00      	nop
 80022b0:	40023800 	.word	0x40023800
 80022b4:	00f42400 	.word	0x00f42400

080022b8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e28d      	b.n	80027e6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f000 8083 	beq.w	80023de <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022d8:	4b94      	ldr	r3, [pc, #592]	; (800252c <HAL_RCC_OscConfig+0x274>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 030c 	and.w	r3, r3, #12
 80022e0:	2b04      	cmp	r3, #4
 80022e2:	d019      	beq.n	8002318 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022e4:	4b91      	ldr	r3, [pc, #580]	; (800252c <HAL_RCC_OscConfig+0x274>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022ec:	2b08      	cmp	r3, #8
 80022ee:	d106      	bne.n	80022fe <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022f0:	4b8e      	ldr	r3, [pc, #568]	; (800252c <HAL_RCC_OscConfig+0x274>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022fc:	d00c      	beq.n	8002318 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022fe:	4b8b      	ldr	r3, [pc, #556]	; (800252c <HAL_RCC_OscConfig+0x274>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002306:	2b0c      	cmp	r3, #12
 8002308:	d112      	bne.n	8002330 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800230a:	4b88      	ldr	r3, [pc, #544]	; (800252c <HAL_RCC_OscConfig+0x274>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002312:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002316:	d10b      	bne.n	8002330 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002318:	4b84      	ldr	r3, [pc, #528]	; (800252c <HAL_RCC_OscConfig+0x274>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d05b      	beq.n	80023dc <HAL_RCC_OscConfig+0x124>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d157      	bne.n	80023dc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e25a      	b.n	80027e6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002338:	d106      	bne.n	8002348 <HAL_RCC_OscConfig+0x90>
 800233a:	4b7c      	ldr	r3, [pc, #496]	; (800252c <HAL_RCC_OscConfig+0x274>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a7b      	ldr	r2, [pc, #492]	; (800252c <HAL_RCC_OscConfig+0x274>)
 8002340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	e01d      	b.n	8002384 <HAL_RCC_OscConfig+0xcc>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002350:	d10c      	bne.n	800236c <HAL_RCC_OscConfig+0xb4>
 8002352:	4b76      	ldr	r3, [pc, #472]	; (800252c <HAL_RCC_OscConfig+0x274>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a75      	ldr	r2, [pc, #468]	; (800252c <HAL_RCC_OscConfig+0x274>)
 8002358:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	4b73      	ldr	r3, [pc, #460]	; (800252c <HAL_RCC_OscConfig+0x274>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a72      	ldr	r2, [pc, #456]	; (800252c <HAL_RCC_OscConfig+0x274>)
 8002364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	e00b      	b.n	8002384 <HAL_RCC_OscConfig+0xcc>
 800236c:	4b6f      	ldr	r3, [pc, #444]	; (800252c <HAL_RCC_OscConfig+0x274>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a6e      	ldr	r2, [pc, #440]	; (800252c <HAL_RCC_OscConfig+0x274>)
 8002372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002376:	6013      	str	r3, [r2, #0]
 8002378:	4b6c      	ldr	r3, [pc, #432]	; (800252c <HAL_RCC_OscConfig+0x274>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a6b      	ldr	r2, [pc, #428]	; (800252c <HAL_RCC_OscConfig+0x274>)
 800237e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002382:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d013      	beq.n	80023b4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238c:	f7ff f9aa 	bl	80016e4 <HAL_GetTick>
 8002390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002392:	e008      	b.n	80023a6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002394:	f7ff f9a6 	bl	80016e4 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b64      	cmp	r3, #100	; 0x64
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e21f      	b.n	80027e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a6:	4b61      	ldr	r3, [pc, #388]	; (800252c <HAL_RCC_OscConfig+0x274>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0xdc>
 80023b2:	e014      	b.n	80023de <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b4:	f7ff f996 	bl	80016e4 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023bc:	f7ff f992 	bl	80016e4 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b64      	cmp	r3, #100	; 0x64
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e20b      	b.n	80027e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ce:	4b57      	ldr	r3, [pc, #348]	; (800252c <HAL_RCC_OscConfig+0x274>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f0      	bne.n	80023bc <HAL_RCC_OscConfig+0x104>
 80023da:	e000      	b.n	80023de <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d06f      	beq.n	80024ca <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023ea:	4b50      	ldr	r3, [pc, #320]	; (800252c <HAL_RCC_OscConfig+0x274>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 030c 	and.w	r3, r3, #12
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d017      	beq.n	8002426 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023f6:	4b4d      	ldr	r3, [pc, #308]	; (800252c <HAL_RCC_OscConfig+0x274>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023fe:	2b08      	cmp	r3, #8
 8002400:	d105      	bne.n	800240e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002402:	4b4a      	ldr	r3, [pc, #296]	; (800252c <HAL_RCC_OscConfig+0x274>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00b      	beq.n	8002426 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800240e:	4b47      	ldr	r3, [pc, #284]	; (800252c <HAL_RCC_OscConfig+0x274>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002416:	2b0c      	cmp	r3, #12
 8002418:	d11c      	bne.n	8002454 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800241a:	4b44      	ldr	r3, [pc, #272]	; (800252c <HAL_RCC_OscConfig+0x274>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d116      	bne.n	8002454 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002426:	4b41      	ldr	r3, [pc, #260]	; (800252c <HAL_RCC_OscConfig+0x274>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d005      	beq.n	800243e <HAL_RCC_OscConfig+0x186>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d001      	beq.n	800243e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e1d3      	b.n	80027e6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243e:	4b3b      	ldr	r3, [pc, #236]	; (800252c <HAL_RCC_OscConfig+0x274>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	4937      	ldr	r1, [pc, #220]	; (800252c <HAL_RCC_OscConfig+0x274>)
 800244e:	4313      	orrs	r3, r2
 8002450:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002452:	e03a      	b.n	80024ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d020      	beq.n	800249e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800245c:	4b34      	ldr	r3, [pc, #208]	; (8002530 <HAL_RCC_OscConfig+0x278>)
 800245e:	2201      	movs	r2, #1
 8002460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002462:	f7ff f93f 	bl	80016e4 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800246a:	f7ff f93b 	bl	80016e4 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e1b4      	b.n	80027e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800247c:	4b2b      	ldr	r3, [pc, #172]	; (800252c <HAL_RCC_OscConfig+0x274>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0f0      	beq.n	800246a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002488:	4b28      	ldr	r3, [pc, #160]	; (800252c <HAL_RCC_OscConfig+0x274>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4925      	ldr	r1, [pc, #148]	; (800252c <HAL_RCC_OscConfig+0x274>)
 8002498:	4313      	orrs	r3, r2
 800249a:	600b      	str	r3, [r1, #0]
 800249c:	e015      	b.n	80024ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800249e:	4b24      	ldr	r3, [pc, #144]	; (8002530 <HAL_RCC_OscConfig+0x278>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7ff f91e 	bl	80016e4 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ac:	f7ff f91a 	bl	80016e4 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e193      	b.n	80027e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024be:	4b1b      	ldr	r3, [pc, #108]	; (800252c <HAL_RCC_OscConfig+0x274>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d036      	beq.n	8002544 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d016      	beq.n	800250c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024de:	4b15      	ldr	r3, [pc, #84]	; (8002534 <HAL_RCC_OscConfig+0x27c>)
 80024e0:	2201      	movs	r2, #1
 80024e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e4:	f7ff f8fe 	bl	80016e4 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ec:	f7ff f8fa 	bl	80016e4 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e173      	b.n	80027e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fe:	4b0b      	ldr	r3, [pc, #44]	; (800252c <HAL_RCC_OscConfig+0x274>)
 8002500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0f0      	beq.n	80024ec <HAL_RCC_OscConfig+0x234>
 800250a:	e01b      	b.n	8002544 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800250c:	4b09      	ldr	r3, [pc, #36]	; (8002534 <HAL_RCC_OscConfig+0x27c>)
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002512:	f7ff f8e7 	bl	80016e4 <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002518:	e00e      	b.n	8002538 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800251a:	f7ff f8e3 	bl	80016e4 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d907      	bls.n	8002538 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e15c      	b.n	80027e6 <HAL_RCC_OscConfig+0x52e>
 800252c:	40023800 	.word	0x40023800
 8002530:	42470000 	.word	0x42470000
 8002534:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002538:	4b8a      	ldr	r3, [pc, #552]	; (8002764 <HAL_RCC_OscConfig+0x4ac>)
 800253a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1ea      	bne.n	800251a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 8097 	beq.w	8002680 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002552:	2300      	movs	r3, #0
 8002554:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002556:	4b83      	ldr	r3, [pc, #524]	; (8002764 <HAL_RCC_OscConfig+0x4ac>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10f      	bne.n	8002582 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	4b7f      	ldr	r3, [pc, #508]	; (8002764 <HAL_RCC_OscConfig+0x4ac>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	4a7e      	ldr	r2, [pc, #504]	; (8002764 <HAL_RCC_OscConfig+0x4ac>)
 800256c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002570:	6413      	str	r3, [r2, #64]	; 0x40
 8002572:	4b7c      	ldr	r3, [pc, #496]	; (8002764 <HAL_RCC_OscConfig+0x4ac>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257a:	60bb      	str	r3, [r7, #8]
 800257c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800257e:	2301      	movs	r3, #1
 8002580:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002582:	4b79      	ldr	r3, [pc, #484]	; (8002768 <HAL_RCC_OscConfig+0x4b0>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258a:	2b00      	cmp	r3, #0
 800258c:	d118      	bne.n	80025c0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800258e:	4b76      	ldr	r3, [pc, #472]	; (8002768 <HAL_RCC_OscConfig+0x4b0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a75      	ldr	r2, [pc, #468]	; (8002768 <HAL_RCC_OscConfig+0x4b0>)
 8002594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002598:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800259a:	f7ff f8a3 	bl	80016e4 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a2:	f7ff f89f 	bl	80016e4 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e118      	b.n	80027e6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b4:	4b6c      	ldr	r3, [pc, #432]	; (8002768 <HAL_RCC_OscConfig+0x4b0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0f0      	beq.n	80025a2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d106      	bne.n	80025d6 <HAL_RCC_OscConfig+0x31e>
 80025c8:	4b66      	ldr	r3, [pc, #408]	; (8002764 <HAL_RCC_OscConfig+0x4ac>)
 80025ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025cc:	4a65      	ldr	r2, [pc, #404]	; (8002764 <HAL_RCC_OscConfig+0x4ac>)
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	6713      	str	r3, [r2, #112]	; 0x70
 80025d4:	e01c      	b.n	8002610 <HAL_RCC_OscConfig+0x358>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b05      	cmp	r3, #5
 80025dc:	d10c      	bne.n	80025f8 <HAL_RCC_OscConfig+0x340>
 80025de:	4b61      	ldr	r3, [pc, #388]	; (8002764 <HAL_RCC_OscConfig+0x4ac>)
 80025e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e2:	4a60      	ldr	r2, [pc, #384]	; (8002764 <HAL_RCC_OscConfig+0x4ac>)
 80025e4:	f043 0304 	orr.w	r3, r3, #4
 80025e8:	6713      	str	r3, [r2, #112]	; 0x70
 80025ea:	4b5e      	ldr	r3, [pc, #376]	; (8002764 <HAL_RCC_OscConfig+0x4ac>)
 80025ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ee:	4a5d      	ldr	r2, [pc, #372]	; (8002764 <HAL_RCC_OscConfig+0x4ac>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	6713      	str	r3, [r2, #112]	; 0x70
 80025f6:	e00b      	b.n	8002610 <HAL_RCC_OscConfig+0x358>
 80025f8:	4b5a      	ldr	r3, [pc, #360]	; (8002764 <HAL_RCC_OscConfig+0x4ac>)
 80025fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fc:	4a59      	ldr	r2, [pc, #356]	; (8002764 <HAL_RCC_OscConfig+0x4ac>)
 80025fe:	f023 0301 	bic.w	r3, r3, #1
 8002602:	6713      	str	r3, [r2, #112]	; 0x70
 8002604:	4b57      	ldr	r3, [pc, #348]	; (8002764 <HAL_RCC_OscConfig+0x4ac>)
 8002606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002608:	4a56      	ldr	r2, [pc, #344]	; (8002764 <HAL_RCC_OscConfig+0x4ac>)
 800260a:	f023 0304 	bic.w	r3, r3, #4
 800260e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d015      	beq.n	8002644 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002618:	f7ff f864 	bl	80016e4 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261e:	e00a      	b.n	8002636 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002620:	f7ff f860 	bl	80016e4 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	f241 3288 	movw	r2, #5000	; 0x1388
 800262e:	4293      	cmp	r3, r2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e0d7      	b.n	80027e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002636:	4b4b      	ldr	r3, [pc, #300]	; (8002764 <HAL_RCC_OscConfig+0x4ac>)
 8002638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0ee      	beq.n	8002620 <HAL_RCC_OscConfig+0x368>
 8002642:	e014      	b.n	800266e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002644:	f7ff f84e 	bl	80016e4 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800264a:	e00a      	b.n	8002662 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800264c:	f7ff f84a 	bl	80016e4 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	f241 3288 	movw	r2, #5000	; 0x1388
 800265a:	4293      	cmp	r3, r2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e0c1      	b.n	80027e6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002662:	4b40      	ldr	r3, [pc, #256]	; (8002764 <HAL_RCC_OscConfig+0x4ac>)
 8002664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1ee      	bne.n	800264c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800266e:	7dfb      	ldrb	r3, [r7, #23]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d105      	bne.n	8002680 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002674:	4b3b      	ldr	r3, [pc, #236]	; (8002764 <HAL_RCC_OscConfig+0x4ac>)
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	4a3a      	ldr	r2, [pc, #232]	; (8002764 <HAL_RCC_OscConfig+0x4ac>)
 800267a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800267e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 80ad 	beq.w	80027e4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800268a:	4b36      	ldr	r3, [pc, #216]	; (8002764 <HAL_RCC_OscConfig+0x4ac>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 030c 	and.w	r3, r3, #12
 8002692:	2b08      	cmp	r3, #8
 8002694:	d060      	beq.n	8002758 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d145      	bne.n	800272a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269e:	4b33      	ldr	r3, [pc, #204]	; (800276c <HAL_RCC_OscConfig+0x4b4>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a4:	f7ff f81e 	bl	80016e4 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ac:	f7ff f81a 	bl	80016e4 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e093      	b.n	80027e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026be:	4b29      	ldr	r3, [pc, #164]	; (8002764 <HAL_RCC_OscConfig+0x4ac>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69da      	ldr	r2, [r3, #28]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	019b      	lsls	r3, r3, #6
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e0:	085b      	lsrs	r3, r3, #1
 80026e2:	3b01      	subs	r3, #1
 80026e4:	041b      	lsls	r3, r3, #16
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ec:	061b      	lsls	r3, r3, #24
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f4:	071b      	lsls	r3, r3, #28
 80026f6:	491b      	ldr	r1, [pc, #108]	; (8002764 <HAL_RCC_OscConfig+0x4ac>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026fc:	4b1b      	ldr	r3, [pc, #108]	; (800276c <HAL_RCC_OscConfig+0x4b4>)
 80026fe:	2201      	movs	r2, #1
 8002700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002702:	f7fe ffef 	bl	80016e4 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800270a:	f7fe ffeb 	bl	80016e4 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e064      	b.n	80027e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800271c:	4b11      	ldr	r3, [pc, #68]	; (8002764 <HAL_RCC_OscConfig+0x4ac>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0f0      	beq.n	800270a <HAL_RCC_OscConfig+0x452>
 8002728:	e05c      	b.n	80027e4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800272a:	4b10      	ldr	r3, [pc, #64]	; (800276c <HAL_RCC_OscConfig+0x4b4>)
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002730:	f7fe ffd8 	bl	80016e4 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002738:	f7fe ffd4 	bl	80016e4 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e04d      	b.n	80027e6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800274a:	4b06      	ldr	r3, [pc, #24]	; (8002764 <HAL_RCC_OscConfig+0x4ac>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f0      	bne.n	8002738 <HAL_RCC_OscConfig+0x480>
 8002756:	e045      	b.n	80027e4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d107      	bne.n	8002770 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e040      	b.n	80027e6 <HAL_RCC_OscConfig+0x52e>
 8002764:	40023800 	.word	0x40023800
 8002768:	40007000 	.word	0x40007000
 800276c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002770:	4b1f      	ldr	r3, [pc, #124]	; (80027f0 <HAL_RCC_OscConfig+0x538>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d030      	beq.n	80027e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002788:	429a      	cmp	r2, r3
 800278a:	d129      	bne.n	80027e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002796:	429a      	cmp	r2, r3
 8002798:	d122      	bne.n	80027e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027a0:	4013      	ands	r3, r2
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d119      	bne.n	80027e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b6:	085b      	lsrs	r3, r3, #1
 80027b8:	3b01      	subs	r3, #1
 80027ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027bc:	429a      	cmp	r2, r3
 80027be:	d10f      	bne.n	80027e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d107      	bne.n	80027e0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027dc:	429a      	cmp	r2, r3
 80027de:	d001      	beq.n	80027e4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40023800 	.word	0x40023800

080027f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e042      	b.n	800288c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d106      	bne.n	8002820 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7fe fd88 	bl	8001330 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2224      	movs	r2, #36	; 0x24
 8002824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002836:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 fa09 	bl	8002c50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	691a      	ldr	r2, [r3, #16]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800284c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	695a      	ldr	r2, [r3, #20]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800285c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68da      	ldr	r2, [r3, #12]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800286c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2220      	movs	r2, #32
 8002878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2220      	movs	r2, #32
 8002880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08a      	sub	sp, #40	; 0x28
 8002898:	af02      	add	r7, sp, #8
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	4613      	mov	r3, r2
 80028a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b20      	cmp	r3, #32
 80028b2:	d175      	bne.n	80029a0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d002      	beq.n	80028c0 <HAL_UART_Transmit+0x2c>
 80028ba:	88fb      	ldrh	r3, [r7, #6]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e06e      	b.n	80029a2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2221      	movs	r2, #33	; 0x21
 80028ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028d2:	f7fe ff07 	bl	80016e4 <HAL_GetTick>
 80028d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	88fa      	ldrh	r2, [r7, #6]
 80028dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	88fa      	ldrh	r2, [r7, #6]
 80028e2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ec:	d108      	bne.n	8002900 <HAL_UART_Transmit+0x6c>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d104      	bne.n	8002900 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80028f6:	2300      	movs	r3, #0
 80028f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	61bb      	str	r3, [r7, #24]
 80028fe:	e003      	b.n	8002908 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002904:	2300      	movs	r3, #0
 8002906:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002908:	e02e      	b.n	8002968 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	2200      	movs	r2, #0
 8002912:	2180      	movs	r1, #128	; 0x80
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 f8df 	bl	8002ad8 <UART_WaitOnFlagUntilTimeout>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d005      	beq.n	800292c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2220      	movs	r2, #32
 8002924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e03a      	b.n	80029a2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10b      	bne.n	800294a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	461a      	mov	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002940:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	3302      	adds	r3, #2
 8002946:	61bb      	str	r3, [r7, #24]
 8002948:	e007      	b.n	800295a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	781a      	ldrb	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	3301      	adds	r3, #1
 8002958:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800295e:	b29b      	uxth	r3, r3
 8002960:	3b01      	subs	r3, #1
 8002962:	b29a      	uxth	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800296c:	b29b      	uxth	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1cb      	bne.n	800290a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2200      	movs	r2, #0
 800297a:	2140      	movs	r1, #64	; 0x40
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 f8ab 	bl	8002ad8 <UART_WaitOnFlagUntilTimeout>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d005      	beq.n	8002994 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e006      	b.n	80029a2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2220      	movs	r2, #32
 8002998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800299c:	2300      	movs	r3, #0
 800299e:	e000      	b.n	80029a2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80029a0:	2302      	movs	r3, #2
  }
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3720      	adds	r7, #32
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b08a      	sub	sp, #40	; 0x28
 80029ae:	af02      	add	r7, sp, #8
 80029b0:	60f8      	str	r0, [r7, #12]
 80029b2:	60b9      	str	r1, [r7, #8]
 80029b4:	603b      	str	r3, [r7, #0]
 80029b6:	4613      	mov	r3, r2
 80029b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b20      	cmp	r3, #32
 80029c8:	f040 8081 	bne.w	8002ace <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d002      	beq.n	80029d8 <HAL_UART_Receive+0x2e>
 80029d2:	88fb      	ldrh	r3, [r7, #6]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e079      	b.n	8002ad0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2222      	movs	r2, #34	; 0x22
 80029e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029f0:	f7fe fe78 	bl	80016e4 <HAL_GetTick>
 80029f4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	88fa      	ldrh	r2, [r7, #6]
 80029fa:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	88fa      	ldrh	r2, [r7, #6]
 8002a00:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a0a:	d108      	bne.n	8002a1e <HAL_UART_Receive+0x74>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d104      	bne.n	8002a1e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	61bb      	str	r3, [r7, #24]
 8002a1c:	e003      	b.n	8002a26 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a22:	2300      	movs	r3, #0
 8002a24:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002a26:	e047      	b.n	8002ab8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	2120      	movs	r1, #32
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 f850 	bl	8002ad8 <UART_WaitOnFlagUntilTimeout>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d005      	beq.n	8002a4a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2220      	movs	r2, #32
 8002a42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e042      	b.n	8002ad0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10c      	bne.n	8002a6a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	3302      	adds	r3, #2
 8002a66:	61bb      	str	r3, [r7, #24]
 8002a68:	e01f      	b.n	8002aaa <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a72:	d007      	beq.n	8002a84 <HAL_UART_Receive+0xda>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10a      	bne.n	8002a92 <HAL_UART_Receive+0xe8>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d106      	bne.n	8002a92 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	701a      	strb	r2, [r3, #0]
 8002a90:	e008      	b.n	8002aa4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1b2      	bne.n	8002a28 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	e000      	b.n	8002ad0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002ace:	2302      	movs	r3, #2
  }
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3720      	adds	r7, #32
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	603b      	str	r3, [r7, #0]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ae8:	e03b      	b.n	8002b62 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002af0:	d037      	beq.n	8002b62 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002af2:	f7fe fdf7 	bl	80016e4 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	6a3a      	ldr	r2, [r7, #32]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d302      	bcc.n	8002b08 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d101      	bne.n	8002b0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e03a      	b.n	8002b82 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f003 0304 	and.w	r3, r3, #4
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d023      	beq.n	8002b62 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	2b80      	cmp	r3, #128	; 0x80
 8002b1e:	d020      	beq.n	8002b62 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	2b40      	cmp	r3, #64	; 0x40
 8002b24:	d01d      	beq.n	8002b62 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	d116      	bne.n	8002b62 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002b34:	2300      	movs	r3, #0
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	617b      	str	r3, [r7, #20]
 8002b48:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 f81d 	bl	8002b8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2208      	movs	r2, #8
 8002b54:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e00f      	b.n	8002b82 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	bf0c      	ite	eq
 8002b72:	2301      	moveq	r3, #1
 8002b74:	2300      	movne	r3, #0
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	461a      	mov	r2, r3
 8002b7a:	79fb      	ldrb	r3, [r7, #7]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d0b4      	beq.n	8002aea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b095      	sub	sp, #84	; 0x54
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	330c      	adds	r3, #12
 8002b98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b9c:	e853 3f00 	ldrex	r3, [r3]
 8002ba0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	330c      	adds	r3, #12
 8002bb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bb2:	643a      	str	r2, [r7, #64]	; 0x40
 8002bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002bb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002bba:	e841 2300 	strex	r3, r2, [r1]
 8002bbe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1e5      	bne.n	8002b92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	3314      	adds	r3, #20
 8002bcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bce:	6a3b      	ldr	r3, [r7, #32]
 8002bd0:	e853 3f00 	ldrex	r3, [r3]
 8002bd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	f023 0301 	bic.w	r3, r3, #1
 8002bdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	3314      	adds	r3, #20
 8002be4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002be6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002be8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bee:	e841 2300 	strex	r3, r2, [r1]
 8002bf2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1e5      	bne.n	8002bc6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d119      	bne.n	8002c36 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	330c      	adds	r3, #12
 8002c08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	e853 3f00 	ldrex	r3, [r3]
 8002c10:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	f023 0310 	bic.w	r3, r3, #16
 8002c18:	647b      	str	r3, [r7, #68]	; 0x44
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	330c      	adds	r3, #12
 8002c20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c22:	61ba      	str	r2, [r7, #24]
 8002c24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c26:	6979      	ldr	r1, [r7, #20]
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	e841 2300 	strex	r3, r2, [r1]
 8002c2e:	613b      	str	r3, [r7, #16]
   return(result);
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1e5      	bne.n	8002c02 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2220      	movs	r2, #32
 8002c3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c44:	bf00      	nop
 8002c46:	3754      	adds	r7, #84	; 0x54
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c54:	b0c0      	sub	sp, #256	; 0x100
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c6c:	68d9      	ldr	r1, [r3, #12]
 8002c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	ea40 0301 	orr.w	r3, r0, r1
 8002c78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	431a      	orrs	r2, r3
 8002c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ca8:	f021 010c 	bic.w	r1, r1, #12
 8002cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002cb6:	430b      	orrs	r3, r1
 8002cb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cca:	6999      	ldr	r1, [r3, #24]
 8002ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	ea40 0301 	orr.w	r3, r0, r1
 8002cd6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	4b8f      	ldr	r3, [pc, #572]	; (8002f1c <UART_SetConfig+0x2cc>)
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d005      	beq.n	8002cf0 <UART_SetConfig+0xa0>
 8002ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	4b8d      	ldr	r3, [pc, #564]	; (8002f20 <UART_SetConfig+0x2d0>)
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d104      	bne.n	8002cfa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cf0:	f7ff f89e 	bl	8001e30 <HAL_RCC_GetPCLK2Freq>
 8002cf4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002cf8:	e003      	b.n	8002d02 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cfa:	f7ff f885 	bl	8001e08 <HAL_RCC_GetPCLK1Freq>
 8002cfe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d06:	69db      	ldr	r3, [r3, #28]
 8002d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d0c:	f040 810c 	bne.w	8002f28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d14:	2200      	movs	r2, #0
 8002d16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002d1a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002d1e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002d22:	4622      	mov	r2, r4
 8002d24:	462b      	mov	r3, r5
 8002d26:	1891      	adds	r1, r2, r2
 8002d28:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d2a:	415b      	adcs	r3, r3
 8002d2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d32:	4621      	mov	r1, r4
 8002d34:	eb12 0801 	adds.w	r8, r2, r1
 8002d38:	4629      	mov	r1, r5
 8002d3a:	eb43 0901 	adc.w	r9, r3, r1
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	f04f 0300 	mov.w	r3, #0
 8002d46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d52:	4690      	mov	r8, r2
 8002d54:	4699      	mov	r9, r3
 8002d56:	4623      	mov	r3, r4
 8002d58:	eb18 0303 	adds.w	r3, r8, r3
 8002d5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002d60:	462b      	mov	r3, r5
 8002d62:	eb49 0303 	adc.w	r3, r9, r3
 8002d66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d76:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002d7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d7e:	460b      	mov	r3, r1
 8002d80:	18db      	adds	r3, r3, r3
 8002d82:	653b      	str	r3, [r7, #80]	; 0x50
 8002d84:	4613      	mov	r3, r2
 8002d86:	eb42 0303 	adc.w	r3, r2, r3
 8002d8a:	657b      	str	r3, [r7, #84]	; 0x54
 8002d8c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d90:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002d94:	f7fd ff98 	bl	8000cc8 <__aeabi_uldivmod>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4b61      	ldr	r3, [pc, #388]	; (8002f24 <UART_SetConfig+0x2d4>)
 8002d9e:	fba3 2302 	umull	r2, r3, r3, r2
 8002da2:	095b      	lsrs	r3, r3, #5
 8002da4:	011c      	lsls	r4, r3, #4
 8002da6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002daa:	2200      	movs	r2, #0
 8002dac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002db0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002db4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002db8:	4642      	mov	r2, r8
 8002dba:	464b      	mov	r3, r9
 8002dbc:	1891      	adds	r1, r2, r2
 8002dbe:	64b9      	str	r1, [r7, #72]	; 0x48
 8002dc0:	415b      	adcs	r3, r3
 8002dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dc4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002dc8:	4641      	mov	r1, r8
 8002dca:	eb12 0a01 	adds.w	sl, r2, r1
 8002dce:	4649      	mov	r1, r9
 8002dd0:	eb43 0b01 	adc.w	fp, r3, r1
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	f04f 0300 	mov.w	r3, #0
 8002ddc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002de0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002de4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002de8:	4692      	mov	sl, r2
 8002dea:	469b      	mov	fp, r3
 8002dec:	4643      	mov	r3, r8
 8002dee:	eb1a 0303 	adds.w	r3, sl, r3
 8002df2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002df6:	464b      	mov	r3, r9
 8002df8:	eb4b 0303 	adc.w	r3, fp, r3
 8002dfc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e0c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002e10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002e14:	460b      	mov	r3, r1
 8002e16:	18db      	adds	r3, r3, r3
 8002e18:	643b      	str	r3, [r7, #64]	; 0x40
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	eb42 0303 	adc.w	r3, r2, r3
 8002e20:	647b      	str	r3, [r7, #68]	; 0x44
 8002e22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002e2a:	f7fd ff4d 	bl	8000cc8 <__aeabi_uldivmod>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	460b      	mov	r3, r1
 8002e32:	4611      	mov	r1, r2
 8002e34:	4b3b      	ldr	r3, [pc, #236]	; (8002f24 <UART_SetConfig+0x2d4>)
 8002e36:	fba3 2301 	umull	r2, r3, r3, r1
 8002e3a:	095b      	lsrs	r3, r3, #5
 8002e3c:	2264      	movs	r2, #100	; 0x64
 8002e3e:	fb02 f303 	mul.w	r3, r2, r3
 8002e42:	1acb      	subs	r3, r1, r3
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002e4a:	4b36      	ldr	r3, [pc, #216]	; (8002f24 <UART_SetConfig+0x2d4>)
 8002e4c:	fba3 2302 	umull	r2, r3, r3, r2
 8002e50:	095b      	lsrs	r3, r3, #5
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e58:	441c      	add	r4, r3
 8002e5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e64:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002e68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002e6c:	4642      	mov	r2, r8
 8002e6e:	464b      	mov	r3, r9
 8002e70:	1891      	adds	r1, r2, r2
 8002e72:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e74:	415b      	adcs	r3, r3
 8002e76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e7c:	4641      	mov	r1, r8
 8002e7e:	1851      	adds	r1, r2, r1
 8002e80:	6339      	str	r1, [r7, #48]	; 0x30
 8002e82:	4649      	mov	r1, r9
 8002e84:	414b      	adcs	r3, r1
 8002e86:	637b      	str	r3, [r7, #52]	; 0x34
 8002e88:	f04f 0200 	mov.w	r2, #0
 8002e8c:	f04f 0300 	mov.w	r3, #0
 8002e90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002e94:	4659      	mov	r1, fp
 8002e96:	00cb      	lsls	r3, r1, #3
 8002e98:	4651      	mov	r1, sl
 8002e9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e9e:	4651      	mov	r1, sl
 8002ea0:	00ca      	lsls	r2, r1, #3
 8002ea2:	4610      	mov	r0, r2
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	4642      	mov	r2, r8
 8002eaa:	189b      	adds	r3, r3, r2
 8002eac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002eb0:	464b      	mov	r3, r9
 8002eb2:	460a      	mov	r2, r1
 8002eb4:	eb42 0303 	adc.w	r3, r2, r3
 8002eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ec8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002ecc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	18db      	adds	r3, r3, r3
 8002ed4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	eb42 0303 	adc.w	r3, r2, r3
 8002edc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ede:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ee2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002ee6:	f7fd feef 	bl	8000cc8 <__aeabi_uldivmod>
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	4b0d      	ldr	r3, [pc, #52]	; (8002f24 <UART_SetConfig+0x2d4>)
 8002ef0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ef4:	095b      	lsrs	r3, r3, #5
 8002ef6:	2164      	movs	r1, #100	; 0x64
 8002ef8:	fb01 f303 	mul.w	r3, r1, r3
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	3332      	adds	r3, #50	; 0x32
 8002f02:	4a08      	ldr	r2, [pc, #32]	; (8002f24 <UART_SetConfig+0x2d4>)
 8002f04:	fba2 2303 	umull	r2, r3, r2, r3
 8002f08:	095b      	lsrs	r3, r3, #5
 8002f0a:	f003 0207 	and.w	r2, r3, #7
 8002f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4422      	add	r2, r4
 8002f16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f18:	e106      	b.n	8003128 <UART_SetConfig+0x4d8>
 8002f1a:	bf00      	nop
 8002f1c:	40011000 	.word	0x40011000
 8002f20:	40011400 	.word	0x40011400
 8002f24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f32:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002f36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002f3a:	4642      	mov	r2, r8
 8002f3c:	464b      	mov	r3, r9
 8002f3e:	1891      	adds	r1, r2, r2
 8002f40:	6239      	str	r1, [r7, #32]
 8002f42:	415b      	adcs	r3, r3
 8002f44:	627b      	str	r3, [r7, #36]	; 0x24
 8002f46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f4a:	4641      	mov	r1, r8
 8002f4c:	1854      	adds	r4, r2, r1
 8002f4e:	4649      	mov	r1, r9
 8002f50:	eb43 0501 	adc.w	r5, r3, r1
 8002f54:	f04f 0200 	mov.w	r2, #0
 8002f58:	f04f 0300 	mov.w	r3, #0
 8002f5c:	00eb      	lsls	r3, r5, #3
 8002f5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f62:	00e2      	lsls	r2, r4, #3
 8002f64:	4614      	mov	r4, r2
 8002f66:	461d      	mov	r5, r3
 8002f68:	4643      	mov	r3, r8
 8002f6a:	18e3      	adds	r3, r4, r3
 8002f6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f70:	464b      	mov	r3, r9
 8002f72:	eb45 0303 	adc.w	r3, r5, r3
 8002f76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	f04f 0300 	mov.w	r3, #0
 8002f92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f96:	4629      	mov	r1, r5
 8002f98:	008b      	lsls	r3, r1, #2
 8002f9a:	4621      	mov	r1, r4
 8002f9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fa0:	4621      	mov	r1, r4
 8002fa2:	008a      	lsls	r2, r1, #2
 8002fa4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002fa8:	f7fd fe8e 	bl	8000cc8 <__aeabi_uldivmod>
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	4b60      	ldr	r3, [pc, #384]	; (8003134 <UART_SetConfig+0x4e4>)
 8002fb2:	fba3 2302 	umull	r2, r3, r3, r2
 8002fb6:	095b      	lsrs	r3, r3, #5
 8002fb8:	011c      	lsls	r4, r3, #4
 8002fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002fc4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002fc8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002fcc:	4642      	mov	r2, r8
 8002fce:	464b      	mov	r3, r9
 8002fd0:	1891      	adds	r1, r2, r2
 8002fd2:	61b9      	str	r1, [r7, #24]
 8002fd4:	415b      	adcs	r3, r3
 8002fd6:	61fb      	str	r3, [r7, #28]
 8002fd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fdc:	4641      	mov	r1, r8
 8002fde:	1851      	adds	r1, r2, r1
 8002fe0:	6139      	str	r1, [r7, #16]
 8002fe2:	4649      	mov	r1, r9
 8002fe4:	414b      	adcs	r3, r1
 8002fe6:	617b      	str	r3, [r7, #20]
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ff4:	4659      	mov	r1, fp
 8002ff6:	00cb      	lsls	r3, r1, #3
 8002ff8:	4651      	mov	r1, sl
 8002ffa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ffe:	4651      	mov	r1, sl
 8003000:	00ca      	lsls	r2, r1, #3
 8003002:	4610      	mov	r0, r2
 8003004:	4619      	mov	r1, r3
 8003006:	4603      	mov	r3, r0
 8003008:	4642      	mov	r2, r8
 800300a:	189b      	adds	r3, r3, r2
 800300c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003010:	464b      	mov	r3, r9
 8003012:	460a      	mov	r2, r1
 8003014:	eb42 0303 	adc.w	r3, r2, r3
 8003018:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800301c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	67bb      	str	r3, [r7, #120]	; 0x78
 8003026:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	f04f 0300 	mov.w	r3, #0
 8003030:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003034:	4649      	mov	r1, r9
 8003036:	008b      	lsls	r3, r1, #2
 8003038:	4641      	mov	r1, r8
 800303a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800303e:	4641      	mov	r1, r8
 8003040:	008a      	lsls	r2, r1, #2
 8003042:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003046:	f7fd fe3f 	bl	8000cc8 <__aeabi_uldivmod>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4611      	mov	r1, r2
 8003050:	4b38      	ldr	r3, [pc, #224]	; (8003134 <UART_SetConfig+0x4e4>)
 8003052:	fba3 2301 	umull	r2, r3, r3, r1
 8003056:	095b      	lsrs	r3, r3, #5
 8003058:	2264      	movs	r2, #100	; 0x64
 800305a:	fb02 f303 	mul.w	r3, r2, r3
 800305e:	1acb      	subs	r3, r1, r3
 8003060:	011b      	lsls	r3, r3, #4
 8003062:	3332      	adds	r3, #50	; 0x32
 8003064:	4a33      	ldr	r2, [pc, #204]	; (8003134 <UART_SetConfig+0x4e4>)
 8003066:	fba2 2303 	umull	r2, r3, r2, r3
 800306a:	095b      	lsrs	r3, r3, #5
 800306c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003070:	441c      	add	r4, r3
 8003072:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003076:	2200      	movs	r2, #0
 8003078:	673b      	str	r3, [r7, #112]	; 0x70
 800307a:	677a      	str	r2, [r7, #116]	; 0x74
 800307c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003080:	4642      	mov	r2, r8
 8003082:	464b      	mov	r3, r9
 8003084:	1891      	adds	r1, r2, r2
 8003086:	60b9      	str	r1, [r7, #8]
 8003088:	415b      	adcs	r3, r3
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003090:	4641      	mov	r1, r8
 8003092:	1851      	adds	r1, r2, r1
 8003094:	6039      	str	r1, [r7, #0]
 8003096:	4649      	mov	r1, r9
 8003098:	414b      	adcs	r3, r1
 800309a:	607b      	str	r3, [r7, #4]
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	f04f 0300 	mov.w	r3, #0
 80030a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80030a8:	4659      	mov	r1, fp
 80030aa:	00cb      	lsls	r3, r1, #3
 80030ac:	4651      	mov	r1, sl
 80030ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030b2:	4651      	mov	r1, sl
 80030b4:	00ca      	lsls	r2, r1, #3
 80030b6:	4610      	mov	r0, r2
 80030b8:	4619      	mov	r1, r3
 80030ba:	4603      	mov	r3, r0
 80030bc:	4642      	mov	r2, r8
 80030be:	189b      	adds	r3, r3, r2
 80030c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80030c2:	464b      	mov	r3, r9
 80030c4:	460a      	mov	r2, r1
 80030c6:	eb42 0303 	adc.w	r3, r2, r3
 80030ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	663b      	str	r3, [r7, #96]	; 0x60
 80030d6:	667a      	str	r2, [r7, #100]	; 0x64
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	f04f 0300 	mov.w	r3, #0
 80030e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80030e4:	4649      	mov	r1, r9
 80030e6:	008b      	lsls	r3, r1, #2
 80030e8:	4641      	mov	r1, r8
 80030ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030ee:	4641      	mov	r1, r8
 80030f0:	008a      	lsls	r2, r1, #2
 80030f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80030f6:	f7fd fde7 	bl	8000cc8 <__aeabi_uldivmod>
 80030fa:	4602      	mov	r2, r0
 80030fc:	460b      	mov	r3, r1
 80030fe:	4b0d      	ldr	r3, [pc, #52]	; (8003134 <UART_SetConfig+0x4e4>)
 8003100:	fba3 1302 	umull	r1, r3, r3, r2
 8003104:	095b      	lsrs	r3, r3, #5
 8003106:	2164      	movs	r1, #100	; 0x64
 8003108:	fb01 f303 	mul.w	r3, r1, r3
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	011b      	lsls	r3, r3, #4
 8003110:	3332      	adds	r3, #50	; 0x32
 8003112:	4a08      	ldr	r2, [pc, #32]	; (8003134 <UART_SetConfig+0x4e4>)
 8003114:	fba2 2303 	umull	r2, r3, r2, r3
 8003118:	095b      	lsrs	r3, r3, #5
 800311a:	f003 020f 	and.w	r2, r3, #15
 800311e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4422      	add	r2, r4
 8003126:	609a      	str	r2, [r3, #8]
}
 8003128:	bf00      	nop
 800312a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800312e:	46bd      	mov	sp, r7
 8003130:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003134:	51eb851f 	.word	0x51eb851f

08003138 <__cvt>:
 8003138:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800313c:	ec55 4b10 	vmov	r4, r5, d0
 8003140:	2d00      	cmp	r5, #0
 8003142:	460e      	mov	r6, r1
 8003144:	4619      	mov	r1, r3
 8003146:	462b      	mov	r3, r5
 8003148:	bfbb      	ittet	lt
 800314a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800314e:	461d      	movlt	r5, r3
 8003150:	2300      	movge	r3, #0
 8003152:	232d      	movlt	r3, #45	; 0x2d
 8003154:	700b      	strb	r3, [r1, #0]
 8003156:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003158:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800315c:	4691      	mov	r9, r2
 800315e:	f023 0820 	bic.w	r8, r3, #32
 8003162:	bfbc      	itt	lt
 8003164:	4622      	movlt	r2, r4
 8003166:	4614      	movlt	r4, r2
 8003168:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800316c:	d005      	beq.n	800317a <__cvt+0x42>
 800316e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003172:	d100      	bne.n	8003176 <__cvt+0x3e>
 8003174:	3601      	adds	r6, #1
 8003176:	2102      	movs	r1, #2
 8003178:	e000      	b.n	800317c <__cvt+0x44>
 800317a:	2103      	movs	r1, #3
 800317c:	ab03      	add	r3, sp, #12
 800317e:	9301      	str	r3, [sp, #4]
 8003180:	ab02      	add	r3, sp, #8
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	ec45 4b10 	vmov	d0, r4, r5
 8003188:	4653      	mov	r3, sl
 800318a:	4632      	mov	r2, r6
 800318c:	f001 fec8 	bl	8004f20 <_dtoa_r>
 8003190:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003194:	4607      	mov	r7, r0
 8003196:	d102      	bne.n	800319e <__cvt+0x66>
 8003198:	f019 0f01 	tst.w	r9, #1
 800319c:	d022      	beq.n	80031e4 <__cvt+0xac>
 800319e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80031a2:	eb07 0906 	add.w	r9, r7, r6
 80031a6:	d110      	bne.n	80031ca <__cvt+0x92>
 80031a8:	783b      	ldrb	r3, [r7, #0]
 80031aa:	2b30      	cmp	r3, #48	; 0x30
 80031ac:	d10a      	bne.n	80031c4 <__cvt+0x8c>
 80031ae:	2200      	movs	r2, #0
 80031b0:	2300      	movs	r3, #0
 80031b2:	4620      	mov	r0, r4
 80031b4:	4629      	mov	r1, r5
 80031b6:	f7fd fca7 	bl	8000b08 <__aeabi_dcmpeq>
 80031ba:	b918      	cbnz	r0, 80031c4 <__cvt+0x8c>
 80031bc:	f1c6 0601 	rsb	r6, r6, #1
 80031c0:	f8ca 6000 	str.w	r6, [sl]
 80031c4:	f8da 3000 	ldr.w	r3, [sl]
 80031c8:	4499      	add	r9, r3
 80031ca:	2200      	movs	r2, #0
 80031cc:	2300      	movs	r3, #0
 80031ce:	4620      	mov	r0, r4
 80031d0:	4629      	mov	r1, r5
 80031d2:	f7fd fc99 	bl	8000b08 <__aeabi_dcmpeq>
 80031d6:	b108      	cbz	r0, 80031dc <__cvt+0xa4>
 80031d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80031dc:	2230      	movs	r2, #48	; 0x30
 80031de:	9b03      	ldr	r3, [sp, #12]
 80031e0:	454b      	cmp	r3, r9
 80031e2:	d307      	bcc.n	80031f4 <__cvt+0xbc>
 80031e4:	9b03      	ldr	r3, [sp, #12]
 80031e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80031e8:	1bdb      	subs	r3, r3, r7
 80031ea:	4638      	mov	r0, r7
 80031ec:	6013      	str	r3, [r2, #0]
 80031ee:	b004      	add	sp, #16
 80031f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031f4:	1c59      	adds	r1, r3, #1
 80031f6:	9103      	str	r1, [sp, #12]
 80031f8:	701a      	strb	r2, [r3, #0]
 80031fa:	e7f0      	b.n	80031de <__cvt+0xa6>

080031fc <__exponent>:
 80031fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031fe:	4603      	mov	r3, r0
 8003200:	2900      	cmp	r1, #0
 8003202:	bfb8      	it	lt
 8003204:	4249      	neglt	r1, r1
 8003206:	f803 2b02 	strb.w	r2, [r3], #2
 800320a:	bfb4      	ite	lt
 800320c:	222d      	movlt	r2, #45	; 0x2d
 800320e:	222b      	movge	r2, #43	; 0x2b
 8003210:	2909      	cmp	r1, #9
 8003212:	7042      	strb	r2, [r0, #1]
 8003214:	dd2a      	ble.n	800326c <__exponent+0x70>
 8003216:	f10d 0207 	add.w	r2, sp, #7
 800321a:	4617      	mov	r7, r2
 800321c:	260a      	movs	r6, #10
 800321e:	4694      	mov	ip, r2
 8003220:	fb91 f5f6 	sdiv	r5, r1, r6
 8003224:	fb06 1415 	mls	r4, r6, r5, r1
 8003228:	3430      	adds	r4, #48	; 0x30
 800322a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800322e:	460c      	mov	r4, r1
 8003230:	2c63      	cmp	r4, #99	; 0x63
 8003232:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8003236:	4629      	mov	r1, r5
 8003238:	dcf1      	bgt.n	800321e <__exponent+0x22>
 800323a:	3130      	adds	r1, #48	; 0x30
 800323c:	f1ac 0402 	sub.w	r4, ip, #2
 8003240:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003244:	1c41      	adds	r1, r0, #1
 8003246:	4622      	mov	r2, r4
 8003248:	42ba      	cmp	r2, r7
 800324a:	d30a      	bcc.n	8003262 <__exponent+0x66>
 800324c:	f10d 0209 	add.w	r2, sp, #9
 8003250:	eba2 020c 	sub.w	r2, r2, ip
 8003254:	42bc      	cmp	r4, r7
 8003256:	bf88      	it	hi
 8003258:	2200      	movhi	r2, #0
 800325a:	4413      	add	r3, r2
 800325c:	1a18      	subs	r0, r3, r0
 800325e:	b003      	add	sp, #12
 8003260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003262:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003266:	f801 5f01 	strb.w	r5, [r1, #1]!
 800326a:	e7ed      	b.n	8003248 <__exponent+0x4c>
 800326c:	2330      	movs	r3, #48	; 0x30
 800326e:	3130      	adds	r1, #48	; 0x30
 8003270:	7083      	strb	r3, [r0, #2]
 8003272:	70c1      	strb	r1, [r0, #3]
 8003274:	1d03      	adds	r3, r0, #4
 8003276:	e7f1      	b.n	800325c <__exponent+0x60>

08003278 <_printf_float>:
 8003278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800327c:	ed2d 8b02 	vpush	{d8}
 8003280:	b08d      	sub	sp, #52	; 0x34
 8003282:	460c      	mov	r4, r1
 8003284:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003288:	4616      	mov	r6, r2
 800328a:	461f      	mov	r7, r3
 800328c:	4605      	mov	r5, r0
 800328e:	f001 fd6f 	bl	8004d70 <_localeconv_r>
 8003292:	f8d0 a000 	ldr.w	sl, [r0]
 8003296:	4650      	mov	r0, sl
 8003298:	f7fd f80a 	bl	80002b0 <strlen>
 800329c:	2300      	movs	r3, #0
 800329e:	930a      	str	r3, [sp, #40]	; 0x28
 80032a0:	6823      	ldr	r3, [r4, #0]
 80032a2:	9305      	str	r3, [sp, #20]
 80032a4:	f8d8 3000 	ldr.w	r3, [r8]
 80032a8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80032ac:	3307      	adds	r3, #7
 80032ae:	f023 0307 	bic.w	r3, r3, #7
 80032b2:	f103 0208 	add.w	r2, r3, #8
 80032b6:	f8c8 2000 	str.w	r2, [r8]
 80032ba:	e9d3 8900 	ldrd	r8, r9, [r3]
 80032be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80032c2:	9307      	str	r3, [sp, #28]
 80032c4:	f8cd 8018 	str.w	r8, [sp, #24]
 80032c8:	ee08 0a10 	vmov	s16, r0
 80032cc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80032d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80032d4:	4b9e      	ldr	r3, [pc, #632]	; (8003550 <_printf_float+0x2d8>)
 80032d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032da:	f7fd fc47 	bl	8000b6c <__aeabi_dcmpun>
 80032de:	bb88      	cbnz	r0, 8003344 <_printf_float+0xcc>
 80032e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80032e4:	4b9a      	ldr	r3, [pc, #616]	; (8003550 <_printf_float+0x2d8>)
 80032e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032ea:	f7fd fc21 	bl	8000b30 <__aeabi_dcmple>
 80032ee:	bb48      	cbnz	r0, 8003344 <_printf_float+0xcc>
 80032f0:	2200      	movs	r2, #0
 80032f2:	2300      	movs	r3, #0
 80032f4:	4640      	mov	r0, r8
 80032f6:	4649      	mov	r1, r9
 80032f8:	f7fd fc10 	bl	8000b1c <__aeabi_dcmplt>
 80032fc:	b110      	cbz	r0, 8003304 <_printf_float+0x8c>
 80032fe:	232d      	movs	r3, #45	; 0x2d
 8003300:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003304:	4a93      	ldr	r2, [pc, #588]	; (8003554 <_printf_float+0x2dc>)
 8003306:	4b94      	ldr	r3, [pc, #592]	; (8003558 <_printf_float+0x2e0>)
 8003308:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800330c:	bf94      	ite	ls
 800330e:	4690      	movls	r8, r2
 8003310:	4698      	movhi	r8, r3
 8003312:	2303      	movs	r3, #3
 8003314:	6123      	str	r3, [r4, #16]
 8003316:	9b05      	ldr	r3, [sp, #20]
 8003318:	f023 0304 	bic.w	r3, r3, #4
 800331c:	6023      	str	r3, [r4, #0]
 800331e:	f04f 0900 	mov.w	r9, #0
 8003322:	9700      	str	r7, [sp, #0]
 8003324:	4633      	mov	r3, r6
 8003326:	aa0b      	add	r2, sp, #44	; 0x2c
 8003328:	4621      	mov	r1, r4
 800332a:	4628      	mov	r0, r5
 800332c:	f000 f9da 	bl	80036e4 <_printf_common>
 8003330:	3001      	adds	r0, #1
 8003332:	f040 8090 	bne.w	8003456 <_printf_float+0x1de>
 8003336:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800333a:	b00d      	add	sp, #52	; 0x34
 800333c:	ecbd 8b02 	vpop	{d8}
 8003340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003344:	4642      	mov	r2, r8
 8003346:	464b      	mov	r3, r9
 8003348:	4640      	mov	r0, r8
 800334a:	4649      	mov	r1, r9
 800334c:	f7fd fc0e 	bl	8000b6c <__aeabi_dcmpun>
 8003350:	b140      	cbz	r0, 8003364 <_printf_float+0xec>
 8003352:	464b      	mov	r3, r9
 8003354:	2b00      	cmp	r3, #0
 8003356:	bfbc      	itt	lt
 8003358:	232d      	movlt	r3, #45	; 0x2d
 800335a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800335e:	4a7f      	ldr	r2, [pc, #508]	; (800355c <_printf_float+0x2e4>)
 8003360:	4b7f      	ldr	r3, [pc, #508]	; (8003560 <_printf_float+0x2e8>)
 8003362:	e7d1      	b.n	8003308 <_printf_float+0x90>
 8003364:	6863      	ldr	r3, [r4, #4]
 8003366:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800336a:	9206      	str	r2, [sp, #24]
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	d13f      	bne.n	80033f0 <_printf_float+0x178>
 8003370:	2306      	movs	r3, #6
 8003372:	6063      	str	r3, [r4, #4]
 8003374:	9b05      	ldr	r3, [sp, #20]
 8003376:	6861      	ldr	r1, [r4, #4]
 8003378:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800337c:	2300      	movs	r3, #0
 800337e:	9303      	str	r3, [sp, #12]
 8003380:	ab0a      	add	r3, sp, #40	; 0x28
 8003382:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003386:	ab09      	add	r3, sp, #36	; 0x24
 8003388:	ec49 8b10 	vmov	d0, r8, r9
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	6022      	str	r2, [r4, #0]
 8003390:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003394:	4628      	mov	r0, r5
 8003396:	f7ff fecf 	bl	8003138 <__cvt>
 800339a:	9b06      	ldr	r3, [sp, #24]
 800339c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800339e:	2b47      	cmp	r3, #71	; 0x47
 80033a0:	4680      	mov	r8, r0
 80033a2:	d108      	bne.n	80033b6 <_printf_float+0x13e>
 80033a4:	1cc8      	adds	r0, r1, #3
 80033a6:	db02      	blt.n	80033ae <_printf_float+0x136>
 80033a8:	6863      	ldr	r3, [r4, #4]
 80033aa:	4299      	cmp	r1, r3
 80033ac:	dd41      	ble.n	8003432 <_printf_float+0x1ba>
 80033ae:	f1ab 0302 	sub.w	r3, fp, #2
 80033b2:	fa5f fb83 	uxtb.w	fp, r3
 80033b6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80033ba:	d820      	bhi.n	80033fe <_printf_float+0x186>
 80033bc:	3901      	subs	r1, #1
 80033be:	465a      	mov	r2, fp
 80033c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80033c4:	9109      	str	r1, [sp, #36]	; 0x24
 80033c6:	f7ff ff19 	bl	80031fc <__exponent>
 80033ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80033cc:	1813      	adds	r3, r2, r0
 80033ce:	2a01      	cmp	r2, #1
 80033d0:	4681      	mov	r9, r0
 80033d2:	6123      	str	r3, [r4, #16]
 80033d4:	dc02      	bgt.n	80033dc <_printf_float+0x164>
 80033d6:	6822      	ldr	r2, [r4, #0]
 80033d8:	07d2      	lsls	r2, r2, #31
 80033da:	d501      	bpl.n	80033e0 <_printf_float+0x168>
 80033dc:	3301      	adds	r3, #1
 80033de:	6123      	str	r3, [r4, #16]
 80033e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d09c      	beq.n	8003322 <_printf_float+0xaa>
 80033e8:	232d      	movs	r3, #45	; 0x2d
 80033ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033ee:	e798      	b.n	8003322 <_printf_float+0xaa>
 80033f0:	9a06      	ldr	r2, [sp, #24]
 80033f2:	2a47      	cmp	r2, #71	; 0x47
 80033f4:	d1be      	bne.n	8003374 <_printf_float+0xfc>
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1bc      	bne.n	8003374 <_printf_float+0xfc>
 80033fa:	2301      	movs	r3, #1
 80033fc:	e7b9      	b.n	8003372 <_printf_float+0xfa>
 80033fe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003402:	d118      	bne.n	8003436 <_printf_float+0x1be>
 8003404:	2900      	cmp	r1, #0
 8003406:	6863      	ldr	r3, [r4, #4]
 8003408:	dd0b      	ble.n	8003422 <_printf_float+0x1aa>
 800340a:	6121      	str	r1, [r4, #16]
 800340c:	b913      	cbnz	r3, 8003414 <_printf_float+0x19c>
 800340e:	6822      	ldr	r2, [r4, #0]
 8003410:	07d0      	lsls	r0, r2, #31
 8003412:	d502      	bpl.n	800341a <_printf_float+0x1a2>
 8003414:	3301      	adds	r3, #1
 8003416:	440b      	add	r3, r1
 8003418:	6123      	str	r3, [r4, #16]
 800341a:	65a1      	str	r1, [r4, #88]	; 0x58
 800341c:	f04f 0900 	mov.w	r9, #0
 8003420:	e7de      	b.n	80033e0 <_printf_float+0x168>
 8003422:	b913      	cbnz	r3, 800342a <_printf_float+0x1b2>
 8003424:	6822      	ldr	r2, [r4, #0]
 8003426:	07d2      	lsls	r2, r2, #31
 8003428:	d501      	bpl.n	800342e <_printf_float+0x1b6>
 800342a:	3302      	adds	r3, #2
 800342c:	e7f4      	b.n	8003418 <_printf_float+0x1a0>
 800342e:	2301      	movs	r3, #1
 8003430:	e7f2      	b.n	8003418 <_printf_float+0x1a0>
 8003432:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003438:	4299      	cmp	r1, r3
 800343a:	db05      	blt.n	8003448 <_printf_float+0x1d0>
 800343c:	6823      	ldr	r3, [r4, #0]
 800343e:	6121      	str	r1, [r4, #16]
 8003440:	07d8      	lsls	r0, r3, #31
 8003442:	d5ea      	bpl.n	800341a <_printf_float+0x1a2>
 8003444:	1c4b      	adds	r3, r1, #1
 8003446:	e7e7      	b.n	8003418 <_printf_float+0x1a0>
 8003448:	2900      	cmp	r1, #0
 800344a:	bfd4      	ite	le
 800344c:	f1c1 0202 	rsble	r2, r1, #2
 8003450:	2201      	movgt	r2, #1
 8003452:	4413      	add	r3, r2
 8003454:	e7e0      	b.n	8003418 <_printf_float+0x1a0>
 8003456:	6823      	ldr	r3, [r4, #0]
 8003458:	055a      	lsls	r2, r3, #21
 800345a:	d407      	bmi.n	800346c <_printf_float+0x1f4>
 800345c:	6923      	ldr	r3, [r4, #16]
 800345e:	4642      	mov	r2, r8
 8003460:	4631      	mov	r1, r6
 8003462:	4628      	mov	r0, r5
 8003464:	47b8      	blx	r7
 8003466:	3001      	adds	r0, #1
 8003468:	d12c      	bne.n	80034c4 <_printf_float+0x24c>
 800346a:	e764      	b.n	8003336 <_printf_float+0xbe>
 800346c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003470:	f240 80e0 	bls.w	8003634 <_printf_float+0x3bc>
 8003474:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003478:	2200      	movs	r2, #0
 800347a:	2300      	movs	r3, #0
 800347c:	f7fd fb44 	bl	8000b08 <__aeabi_dcmpeq>
 8003480:	2800      	cmp	r0, #0
 8003482:	d034      	beq.n	80034ee <_printf_float+0x276>
 8003484:	4a37      	ldr	r2, [pc, #220]	; (8003564 <_printf_float+0x2ec>)
 8003486:	2301      	movs	r3, #1
 8003488:	4631      	mov	r1, r6
 800348a:	4628      	mov	r0, r5
 800348c:	47b8      	blx	r7
 800348e:	3001      	adds	r0, #1
 8003490:	f43f af51 	beq.w	8003336 <_printf_float+0xbe>
 8003494:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003498:	429a      	cmp	r2, r3
 800349a:	db02      	blt.n	80034a2 <_printf_float+0x22a>
 800349c:	6823      	ldr	r3, [r4, #0]
 800349e:	07d8      	lsls	r0, r3, #31
 80034a0:	d510      	bpl.n	80034c4 <_printf_float+0x24c>
 80034a2:	ee18 3a10 	vmov	r3, s16
 80034a6:	4652      	mov	r2, sl
 80034a8:	4631      	mov	r1, r6
 80034aa:	4628      	mov	r0, r5
 80034ac:	47b8      	blx	r7
 80034ae:	3001      	adds	r0, #1
 80034b0:	f43f af41 	beq.w	8003336 <_printf_float+0xbe>
 80034b4:	f04f 0800 	mov.w	r8, #0
 80034b8:	f104 091a 	add.w	r9, r4, #26
 80034bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034be:	3b01      	subs	r3, #1
 80034c0:	4543      	cmp	r3, r8
 80034c2:	dc09      	bgt.n	80034d8 <_printf_float+0x260>
 80034c4:	6823      	ldr	r3, [r4, #0]
 80034c6:	079b      	lsls	r3, r3, #30
 80034c8:	f100 8107 	bmi.w	80036da <_printf_float+0x462>
 80034cc:	68e0      	ldr	r0, [r4, #12]
 80034ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80034d0:	4298      	cmp	r0, r3
 80034d2:	bfb8      	it	lt
 80034d4:	4618      	movlt	r0, r3
 80034d6:	e730      	b.n	800333a <_printf_float+0xc2>
 80034d8:	2301      	movs	r3, #1
 80034da:	464a      	mov	r2, r9
 80034dc:	4631      	mov	r1, r6
 80034de:	4628      	mov	r0, r5
 80034e0:	47b8      	blx	r7
 80034e2:	3001      	adds	r0, #1
 80034e4:	f43f af27 	beq.w	8003336 <_printf_float+0xbe>
 80034e8:	f108 0801 	add.w	r8, r8, #1
 80034ec:	e7e6      	b.n	80034bc <_printf_float+0x244>
 80034ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	dc39      	bgt.n	8003568 <_printf_float+0x2f0>
 80034f4:	4a1b      	ldr	r2, [pc, #108]	; (8003564 <_printf_float+0x2ec>)
 80034f6:	2301      	movs	r3, #1
 80034f8:	4631      	mov	r1, r6
 80034fa:	4628      	mov	r0, r5
 80034fc:	47b8      	blx	r7
 80034fe:	3001      	adds	r0, #1
 8003500:	f43f af19 	beq.w	8003336 <_printf_float+0xbe>
 8003504:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003508:	4313      	orrs	r3, r2
 800350a:	d102      	bne.n	8003512 <_printf_float+0x29a>
 800350c:	6823      	ldr	r3, [r4, #0]
 800350e:	07d9      	lsls	r1, r3, #31
 8003510:	d5d8      	bpl.n	80034c4 <_printf_float+0x24c>
 8003512:	ee18 3a10 	vmov	r3, s16
 8003516:	4652      	mov	r2, sl
 8003518:	4631      	mov	r1, r6
 800351a:	4628      	mov	r0, r5
 800351c:	47b8      	blx	r7
 800351e:	3001      	adds	r0, #1
 8003520:	f43f af09 	beq.w	8003336 <_printf_float+0xbe>
 8003524:	f04f 0900 	mov.w	r9, #0
 8003528:	f104 0a1a 	add.w	sl, r4, #26
 800352c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800352e:	425b      	negs	r3, r3
 8003530:	454b      	cmp	r3, r9
 8003532:	dc01      	bgt.n	8003538 <_printf_float+0x2c0>
 8003534:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003536:	e792      	b.n	800345e <_printf_float+0x1e6>
 8003538:	2301      	movs	r3, #1
 800353a:	4652      	mov	r2, sl
 800353c:	4631      	mov	r1, r6
 800353e:	4628      	mov	r0, r5
 8003540:	47b8      	blx	r7
 8003542:	3001      	adds	r0, #1
 8003544:	f43f aef7 	beq.w	8003336 <_printf_float+0xbe>
 8003548:	f109 0901 	add.w	r9, r9, #1
 800354c:	e7ee      	b.n	800352c <_printf_float+0x2b4>
 800354e:	bf00      	nop
 8003550:	7fefffff 	.word	0x7fefffff
 8003554:	08008338 	.word	0x08008338
 8003558:	0800833c 	.word	0x0800833c
 800355c:	08008340 	.word	0x08008340
 8003560:	08008344 	.word	0x08008344
 8003564:	080085e5 	.word	0x080085e5
 8003568:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800356a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800356c:	429a      	cmp	r2, r3
 800356e:	bfa8      	it	ge
 8003570:	461a      	movge	r2, r3
 8003572:	2a00      	cmp	r2, #0
 8003574:	4691      	mov	r9, r2
 8003576:	dc37      	bgt.n	80035e8 <_printf_float+0x370>
 8003578:	f04f 0b00 	mov.w	fp, #0
 800357c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003580:	f104 021a 	add.w	r2, r4, #26
 8003584:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003586:	9305      	str	r3, [sp, #20]
 8003588:	eba3 0309 	sub.w	r3, r3, r9
 800358c:	455b      	cmp	r3, fp
 800358e:	dc33      	bgt.n	80035f8 <_printf_float+0x380>
 8003590:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003594:	429a      	cmp	r2, r3
 8003596:	db3b      	blt.n	8003610 <_printf_float+0x398>
 8003598:	6823      	ldr	r3, [r4, #0]
 800359a:	07da      	lsls	r2, r3, #31
 800359c:	d438      	bmi.n	8003610 <_printf_float+0x398>
 800359e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80035a2:	eba2 0903 	sub.w	r9, r2, r3
 80035a6:	9b05      	ldr	r3, [sp, #20]
 80035a8:	1ad2      	subs	r2, r2, r3
 80035aa:	4591      	cmp	r9, r2
 80035ac:	bfa8      	it	ge
 80035ae:	4691      	movge	r9, r2
 80035b0:	f1b9 0f00 	cmp.w	r9, #0
 80035b4:	dc35      	bgt.n	8003622 <_printf_float+0x3aa>
 80035b6:	f04f 0800 	mov.w	r8, #0
 80035ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80035be:	f104 0a1a 	add.w	sl, r4, #26
 80035c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80035c6:	1a9b      	subs	r3, r3, r2
 80035c8:	eba3 0309 	sub.w	r3, r3, r9
 80035cc:	4543      	cmp	r3, r8
 80035ce:	f77f af79 	ble.w	80034c4 <_printf_float+0x24c>
 80035d2:	2301      	movs	r3, #1
 80035d4:	4652      	mov	r2, sl
 80035d6:	4631      	mov	r1, r6
 80035d8:	4628      	mov	r0, r5
 80035da:	47b8      	blx	r7
 80035dc:	3001      	adds	r0, #1
 80035de:	f43f aeaa 	beq.w	8003336 <_printf_float+0xbe>
 80035e2:	f108 0801 	add.w	r8, r8, #1
 80035e6:	e7ec      	b.n	80035c2 <_printf_float+0x34a>
 80035e8:	4613      	mov	r3, r2
 80035ea:	4631      	mov	r1, r6
 80035ec:	4642      	mov	r2, r8
 80035ee:	4628      	mov	r0, r5
 80035f0:	47b8      	blx	r7
 80035f2:	3001      	adds	r0, #1
 80035f4:	d1c0      	bne.n	8003578 <_printf_float+0x300>
 80035f6:	e69e      	b.n	8003336 <_printf_float+0xbe>
 80035f8:	2301      	movs	r3, #1
 80035fa:	4631      	mov	r1, r6
 80035fc:	4628      	mov	r0, r5
 80035fe:	9205      	str	r2, [sp, #20]
 8003600:	47b8      	blx	r7
 8003602:	3001      	adds	r0, #1
 8003604:	f43f ae97 	beq.w	8003336 <_printf_float+0xbe>
 8003608:	9a05      	ldr	r2, [sp, #20]
 800360a:	f10b 0b01 	add.w	fp, fp, #1
 800360e:	e7b9      	b.n	8003584 <_printf_float+0x30c>
 8003610:	ee18 3a10 	vmov	r3, s16
 8003614:	4652      	mov	r2, sl
 8003616:	4631      	mov	r1, r6
 8003618:	4628      	mov	r0, r5
 800361a:	47b8      	blx	r7
 800361c:	3001      	adds	r0, #1
 800361e:	d1be      	bne.n	800359e <_printf_float+0x326>
 8003620:	e689      	b.n	8003336 <_printf_float+0xbe>
 8003622:	9a05      	ldr	r2, [sp, #20]
 8003624:	464b      	mov	r3, r9
 8003626:	4442      	add	r2, r8
 8003628:	4631      	mov	r1, r6
 800362a:	4628      	mov	r0, r5
 800362c:	47b8      	blx	r7
 800362e:	3001      	adds	r0, #1
 8003630:	d1c1      	bne.n	80035b6 <_printf_float+0x33e>
 8003632:	e680      	b.n	8003336 <_printf_float+0xbe>
 8003634:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003636:	2a01      	cmp	r2, #1
 8003638:	dc01      	bgt.n	800363e <_printf_float+0x3c6>
 800363a:	07db      	lsls	r3, r3, #31
 800363c:	d53a      	bpl.n	80036b4 <_printf_float+0x43c>
 800363e:	2301      	movs	r3, #1
 8003640:	4642      	mov	r2, r8
 8003642:	4631      	mov	r1, r6
 8003644:	4628      	mov	r0, r5
 8003646:	47b8      	blx	r7
 8003648:	3001      	adds	r0, #1
 800364a:	f43f ae74 	beq.w	8003336 <_printf_float+0xbe>
 800364e:	ee18 3a10 	vmov	r3, s16
 8003652:	4652      	mov	r2, sl
 8003654:	4631      	mov	r1, r6
 8003656:	4628      	mov	r0, r5
 8003658:	47b8      	blx	r7
 800365a:	3001      	adds	r0, #1
 800365c:	f43f ae6b 	beq.w	8003336 <_printf_float+0xbe>
 8003660:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003664:	2200      	movs	r2, #0
 8003666:	2300      	movs	r3, #0
 8003668:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800366c:	f7fd fa4c 	bl	8000b08 <__aeabi_dcmpeq>
 8003670:	b9d8      	cbnz	r0, 80036aa <_printf_float+0x432>
 8003672:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8003676:	f108 0201 	add.w	r2, r8, #1
 800367a:	4631      	mov	r1, r6
 800367c:	4628      	mov	r0, r5
 800367e:	47b8      	blx	r7
 8003680:	3001      	adds	r0, #1
 8003682:	d10e      	bne.n	80036a2 <_printf_float+0x42a>
 8003684:	e657      	b.n	8003336 <_printf_float+0xbe>
 8003686:	2301      	movs	r3, #1
 8003688:	4652      	mov	r2, sl
 800368a:	4631      	mov	r1, r6
 800368c:	4628      	mov	r0, r5
 800368e:	47b8      	blx	r7
 8003690:	3001      	adds	r0, #1
 8003692:	f43f ae50 	beq.w	8003336 <_printf_float+0xbe>
 8003696:	f108 0801 	add.w	r8, r8, #1
 800369a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800369c:	3b01      	subs	r3, #1
 800369e:	4543      	cmp	r3, r8
 80036a0:	dcf1      	bgt.n	8003686 <_printf_float+0x40e>
 80036a2:	464b      	mov	r3, r9
 80036a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80036a8:	e6da      	b.n	8003460 <_printf_float+0x1e8>
 80036aa:	f04f 0800 	mov.w	r8, #0
 80036ae:	f104 0a1a 	add.w	sl, r4, #26
 80036b2:	e7f2      	b.n	800369a <_printf_float+0x422>
 80036b4:	2301      	movs	r3, #1
 80036b6:	4642      	mov	r2, r8
 80036b8:	e7df      	b.n	800367a <_printf_float+0x402>
 80036ba:	2301      	movs	r3, #1
 80036bc:	464a      	mov	r2, r9
 80036be:	4631      	mov	r1, r6
 80036c0:	4628      	mov	r0, r5
 80036c2:	47b8      	blx	r7
 80036c4:	3001      	adds	r0, #1
 80036c6:	f43f ae36 	beq.w	8003336 <_printf_float+0xbe>
 80036ca:	f108 0801 	add.w	r8, r8, #1
 80036ce:	68e3      	ldr	r3, [r4, #12]
 80036d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80036d2:	1a5b      	subs	r3, r3, r1
 80036d4:	4543      	cmp	r3, r8
 80036d6:	dcf0      	bgt.n	80036ba <_printf_float+0x442>
 80036d8:	e6f8      	b.n	80034cc <_printf_float+0x254>
 80036da:	f04f 0800 	mov.w	r8, #0
 80036de:	f104 0919 	add.w	r9, r4, #25
 80036e2:	e7f4      	b.n	80036ce <_printf_float+0x456>

080036e4 <_printf_common>:
 80036e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036e8:	4616      	mov	r6, r2
 80036ea:	4699      	mov	r9, r3
 80036ec:	688a      	ldr	r2, [r1, #8]
 80036ee:	690b      	ldr	r3, [r1, #16]
 80036f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036f4:	4293      	cmp	r3, r2
 80036f6:	bfb8      	it	lt
 80036f8:	4613      	movlt	r3, r2
 80036fa:	6033      	str	r3, [r6, #0]
 80036fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003700:	4607      	mov	r7, r0
 8003702:	460c      	mov	r4, r1
 8003704:	b10a      	cbz	r2, 800370a <_printf_common+0x26>
 8003706:	3301      	adds	r3, #1
 8003708:	6033      	str	r3, [r6, #0]
 800370a:	6823      	ldr	r3, [r4, #0]
 800370c:	0699      	lsls	r1, r3, #26
 800370e:	bf42      	ittt	mi
 8003710:	6833      	ldrmi	r3, [r6, #0]
 8003712:	3302      	addmi	r3, #2
 8003714:	6033      	strmi	r3, [r6, #0]
 8003716:	6825      	ldr	r5, [r4, #0]
 8003718:	f015 0506 	ands.w	r5, r5, #6
 800371c:	d106      	bne.n	800372c <_printf_common+0x48>
 800371e:	f104 0a19 	add.w	sl, r4, #25
 8003722:	68e3      	ldr	r3, [r4, #12]
 8003724:	6832      	ldr	r2, [r6, #0]
 8003726:	1a9b      	subs	r3, r3, r2
 8003728:	42ab      	cmp	r3, r5
 800372a:	dc26      	bgt.n	800377a <_printf_common+0x96>
 800372c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003730:	1e13      	subs	r3, r2, #0
 8003732:	6822      	ldr	r2, [r4, #0]
 8003734:	bf18      	it	ne
 8003736:	2301      	movne	r3, #1
 8003738:	0692      	lsls	r2, r2, #26
 800373a:	d42b      	bmi.n	8003794 <_printf_common+0xb0>
 800373c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003740:	4649      	mov	r1, r9
 8003742:	4638      	mov	r0, r7
 8003744:	47c0      	blx	r8
 8003746:	3001      	adds	r0, #1
 8003748:	d01e      	beq.n	8003788 <_printf_common+0xa4>
 800374a:	6823      	ldr	r3, [r4, #0]
 800374c:	6922      	ldr	r2, [r4, #16]
 800374e:	f003 0306 	and.w	r3, r3, #6
 8003752:	2b04      	cmp	r3, #4
 8003754:	bf02      	ittt	eq
 8003756:	68e5      	ldreq	r5, [r4, #12]
 8003758:	6833      	ldreq	r3, [r6, #0]
 800375a:	1aed      	subeq	r5, r5, r3
 800375c:	68a3      	ldr	r3, [r4, #8]
 800375e:	bf0c      	ite	eq
 8003760:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003764:	2500      	movne	r5, #0
 8003766:	4293      	cmp	r3, r2
 8003768:	bfc4      	itt	gt
 800376a:	1a9b      	subgt	r3, r3, r2
 800376c:	18ed      	addgt	r5, r5, r3
 800376e:	2600      	movs	r6, #0
 8003770:	341a      	adds	r4, #26
 8003772:	42b5      	cmp	r5, r6
 8003774:	d11a      	bne.n	80037ac <_printf_common+0xc8>
 8003776:	2000      	movs	r0, #0
 8003778:	e008      	b.n	800378c <_printf_common+0xa8>
 800377a:	2301      	movs	r3, #1
 800377c:	4652      	mov	r2, sl
 800377e:	4649      	mov	r1, r9
 8003780:	4638      	mov	r0, r7
 8003782:	47c0      	blx	r8
 8003784:	3001      	adds	r0, #1
 8003786:	d103      	bne.n	8003790 <_printf_common+0xac>
 8003788:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800378c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003790:	3501      	adds	r5, #1
 8003792:	e7c6      	b.n	8003722 <_printf_common+0x3e>
 8003794:	18e1      	adds	r1, r4, r3
 8003796:	1c5a      	adds	r2, r3, #1
 8003798:	2030      	movs	r0, #48	; 0x30
 800379a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800379e:	4422      	add	r2, r4
 80037a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037a8:	3302      	adds	r3, #2
 80037aa:	e7c7      	b.n	800373c <_printf_common+0x58>
 80037ac:	2301      	movs	r3, #1
 80037ae:	4622      	mov	r2, r4
 80037b0:	4649      	mov	r1, r9
 80037b2:	4638      	mov	r0, r7
 80037b4:	47c0      	blx	r8
 80037b6:	3001      	adds	r0, #1
 80037b8:	d0e6      	beq.n	8003788 <_printf_common+0xa4>
 80037ba:	3601      	adds	r6, #1
 80037bc:	e7d9      	b.n	8003772 <_printf_common+0x8e>
	...

080037c0 <_printf_i>:
 80037c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037c4:	7e0f      	ldrb	r7, [r1, #24]
 80037c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80037c8:	2f78      	cmp	r7, #120	; 0x78
 80037ca:	4691      	mov	r9, r2
 80037cc:	4680      	mov	r8, r0
 80037ce:	460c      	mov	r4, r1
 80037d0:	469a      	mov	sl, r3
 80037d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80037d6:	d807      	bhi.n	80037e8 <_printf_i+0x28>
 80037d8:	2f62      	cmp	r7, #98	; 0x62
 80037da:	d80a      	bhi.n	80037f2 <_printf_i+0x32>
 80037dc:	2f00      	cmp	r7, #0
 80037de:	f000 80d4 	beq.w	800398a <_printf_i+0x1ca>
 80037e2:	2f58      	cmp	r7, #88	; 0x58
 80037e4:	f000 80c0 	beq.w	8003968 <_printf_i+0x1a8>
 80037e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80037f0:	e03a      	b.n	8003868 <_printf_i+0xa8>
 80037f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80037f6:	2b15      	cmp	r3, #21
 80037f8:	d8f6      	bhi.n	80037e8 <_printf_i+0x28>
 80037fa:	a101      	add	r1, pc, #4	; (adr r1, 8003800 <_printf_i+0x40>)
 80037fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003800:	08003859 	.word	0x08003859
 8003804:	0800386d 	.word	0x0800386d
 8003808:	080037e9 	.word	0x080037e9
 800380c:	080037e9 	.word	0x080037e9
 8003810:	080037e9 	.word	0x080037e9
 8003814:	080037e9 	.word	0x080037e9
 8003818:	0800386d 	.word	0x0800386d
 800381c:	080037e9 	.word	0x080037e9
 8003820:	080037e9 	.word	0x080037e9
 8003824:	080037e9 	.word	0x080037e9
 8003828:	080037e9 	.word	0x080037e9
 800382c:	08003971 	.word	0x08003971
 8003830:	08003899 	.word	0x08003899
 8003834:	0800392b 	.word	0x0800392b
 8003838:	080037e9 	.word	0x080037e9
 800383c:	080037e9 	.word	0x080037e9
 8003840:	08003993 	.word	0x08003993
 8003844:	080037e9 	.word	0x080037e9
 8003848:	08003899 	.word	0x08003899
 800384c:	080037e9 	.word	0x080037e9
 8003850:	080037e9 	.word	0x080037e9
 8003854:	08003933 	.word	0x08003933
 8003858:	682b      	ldr	r3, [r5, #0]
 800385a:	1d1a      	adds	r2, r3, #4
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	602a      	str	r2, [r5, #0]
 8003860:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003864:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003868:	2301      	movs	r3, #1
 800386a:	e09f      	b.n	80039ac <_printf_i+0x1ec>
 800386c:	6820      	ldr	r0, [r4, #0]
 800386e:	682b      	ldr	r3, [r5, #0]
 8003870:	0607      	lsls	r7, r0, #24
 8003872:	f103 0104 	add.w	r1, r3, #4
 8003876:	6029      	str	r1, [r5, #0]
 8003878:	d501      	bpl.n	800387e <_printf_i+0xbe>
 800387a:	681e      	ldr	r6, [r3, #0]
 800387c:	e003      	b.n	8003886 <_printf_i+0xc6>
 800387e:	0646      	lsls	r6, r0, #25
 8003880:	d5fb      	bpl.n	800387a <_printf_i+0xba>
 8003882:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003886:	2e00      	cmp	r6, #0
 8003888:	da03      	bge.n	8003892 <_printf_i+0xd2>
 800388a:	232d      	movs	r3, #45	; 0x2d
 800388c:	4276      	negs	r6, r6
 800388e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003892:	485a      	ldr	r0, [pc, #360]	; (80039fc <_printf_i+0x23c>)
 8003894:	230a      	movs	r3, #10
 8003896:	e012      	b.n	80038be <_printf_i+0xfe>
 8003898:	682b      	ldr	r3, [r5, #0]
 800389a:	6820      	ldr	r0, [r4, #0]
 800389c:	1d19      	adds	r1, r3, #4
 800389e:	6029      	str	r1, [r5, #0]
 80038a0:	0605      	lsls	r5, r0, #24
 80038a2:	d501      	bpl.n	80038a8 <_printf_i+0xe8>
 80038a4:	681e      	ldr	r6, [r3, #0]
 80038a6:	e002      	b.n	80038ae <_printf_i+0xee>
 80038a8:	0641      	lsls	r1, r0, #25
 80038aa:	d5fb      	bpl.n	80038a4 <_printf_i+0xe4>
 80038ac:	881e      	ldrh	r6, [r3, #0]
 80038ae:	4853      	ldr	r0, [pc, #332]	; (80039fc <_printf_i+0x23c>)
 80038b0:	2f6f      	cmp	r7, #111	; 0x6f
 80038b2:	bf0c      	ite	eq
 80038b4:	2308      	moveq	r3, #8
 80038b6:	230a      	movne	r3, #10
 80038b8:	2100      	movs	r1, #0
 80038ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038be:	6865      	ldr	r5, [r4, #4]
 80038c0:	60a5      	str	r5, [r4, #8]
 80038c2:	2d00      	cmp	r5, #0
 80038c4:	bfa2      	ittt	ge
 80038c6:	6821      	ldrge	r1, [r4, #0]
 80038c8:	f021 0104 	bicge.w	r1, r1, #4
 80038cc:	6021      	strge	r1, [r4, #0]
 80038ce:	b90e      	cbnz	r6, 80038d4 <_printf_i+0x114>
 80038d0:	2d00      	cmp	r5, #0
 80038d2:	d04b      	beq.n	800396c <_printf_i+0x1ac>
 80038d4:	4615      	mov	r5, r2
 80038d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80038da:	fb03 6711 	mls	r7, r3, r1, r6
 80038de:	5dc7      	ldrb	r7, [r0, r7]
 80038e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80038e4:	4637      	mov	r7, r6
 80038e6:	42bb      	cmp	r3, r7
 80038e8:	460e      	mov	r6, r1
 80038ea:	d9f4      	bls.n	80038d6 <_printf_i+0x116>
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	d10b      	bne.n	8003908 <_printf_i+0x148>
 80038f0:	6823      	ldr	r3, [r4, #0]
 80038f2:	07de      	lsls	r6, r3, #31
 80038f4:	d508      	bpl.n	8003908 <_printf_i+0x148>
 80038f6:	6923      	ldr	r3, [r4, #16]
 80038f8:	6861      	ldr	r1, [r4, #4]
 80038fa:	4299      	cmp	r1, r3
 80038fc:	bfde      	ittt	le
 80038fe:	2330      	movle	r3, #48	; 0x30
 8003900:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003904:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003908:	1b52      	subs	r2, r2, r5
 800390a:	6122      	str	r2, [r4, #16]
 800390c:	f8cd a000 	str.w	sl, [sp]
 8003910:	464b      	mov	r3, r9
 8003912:	aa03      	add	r2, sp, #12
 8003914:	4621      	mov	r1, r4
 8003916:	4640      	mov	r0, r8
 8003918:	f7ff fee4 	bl	80036e4 <_printf_common>
 800391c:	3001      	adds	r0, #1
 800391e:	d14a      	bne.n	80039b6 <_printf_i+0x1f6>
 8003920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003924:	b004      	add	sp, #16
 8003926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800392a:	6823      	ldr	r3, [r4, #0]
 800392c:	f043 0320 	orr.w	r3, r3, #32
 8003930:	6023      	str	r3, [r4, #0]
 8003932:	4833      	ldr	r0, [pc, #204]	; (8003a00 <_printf_i+0x240>)
 8003934:	2778      	movs	r7, #120	; 0x78
 8003936:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800393a:	6823      	ldr	r3, [r4, #0]
 800393c:	6829      	ldr	r1, [r5, #0]
 800393e:	061f      	lsls	r7, r3, #24
 8003940:	f851 6b04 	ldr.w	r6, [r1], #4
 8003944:	d402      	bmi.n	800394c <_printf_i+0x18c>
 8003946:	065f      	lsls	r7, r3, #25
 8003948:	bf48      	it	mi
 800394a:	b2b6      	uxthmi	r6, r6
 800394c:	07df      	lsls	r7, r3, #31
 800394e:	bf48      	it	mi
 8003950:	f043 0320 	orrmi.w	r3, r3, #32
 8003954:	6029      	str	r1, [r5, #0]
 8003956:	bf48      	it	mi
 8003958:	6023      	strmi	r3, [r4, #0]
 800395a:	b91e      	cbnz	r6, 8003964 <_printf_i+0x1a4>
 800395c:	6823      	ldr	r3, [r4, #0]
 800395e:	f023 0320 	bic.w	r3, r3, #32
 8003962:	6023      	str	r3, [r4, #0]
 8003964:	2310      	movs	r3, #16
 8003966:	e7a7      	b.n	80038b8 <_printf_i+0xf8>
 8003968:	4824      	ldr	r0, [pc, #144]	; (80039fc <_printf_i+0x23c>)
 800396a:	e7e4      	b.n	8003936 <_printf_i+0x176>
 800396c:	4615      	mov	r5, r2
 800396e:	e7bd      	b.n	80038ec <_printf_i+0x12c>
 8003970:	682b      	ldr	r3, [r5, #0]
 8003972:	6826      	ldr	r6, [r4, #0]
 8003974:	6961      	ldr	r1, [r4, #20]
 8003976:	1d18      	adds	r0, r3, #4
 8003978:	6028      	str	r0, [r5, #0]
 800397a:	0635      	lsls	r5, r6, #24
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	d501      	bpl.n	8003984 <_printf_i+0x1c4>
 8003980:	6019      	str	r1, [r3, #0]
 8003982:	e002      	b.n	800398a <_printf_i+0x1ca>
 8003984:	0670      	lsls	r0, r6, #25
 8003986:	d5fb      	bpl.n	8003980 <_printf_i+0x1c0>
 8003988:	8019      	strh	r1, [r3, #0]
 800398a:	2300      	movs	r3, #0
 800398c:	6123      	str	r3, [r4, #16]
 800398e:	4615      	mov	r5, r2
 8003990:	e7bc      	b.n	800390c <_printf_i+0x14c>
 8003992:	682b      	ldr	r3, [r5, #0]
 8003994:	1d1a      	adds	r2, r3, #4
 8003996:	602a      	str	r2, [r5, #0]
 8003998:	681d      	ldr	r5, [r3, #0]
 800399a:	6862      	ldr	r2, [r4, #4]
 800399c:	2100      	movs	r1, #0
 800399e:	4628      	mov	r0, r5
 80039a0:	f7fc fc36 	bl	8000210 <memchr>
 80039a4:	b108      	cbz	r0, 80039aa <_printf_i+0x1ea>
 80039a6:	1b40      	subs	r0, r0, r5
 80039a8:	6060      	str	r0, [r4, #4]
 80039aa:	6863      	ldr	r3, [r4, #4]
 80039ac:	6123      	str	r3, [r4, #16]
 80039ae:	2300      	movs	r3, #0
 80039b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039b4:	e7aa      	b.n	800390c <_printf_i+0x14c>
 80039b6:	6923      	ldr	r3, [r4, #16]
 80039b8:	462a      	mov	r2, r5
 80039ba:	4649      	mov	r1, r9
 80039bc:	4640      	mov	r0, r8
 80039be:	47d0      	blx	sl
 80039c0:	3001      	adds	r0, #1
 80039c2:	d0ad      	beq.n	8003920 <_printf_i+0x160>
 80039c4:	6823      	ldr	r3, [r4, #0]
 80039c6:	079b      	lsls	r3, r3, #30
 80039c8:	d413      	bmi.n	80039f2 <_printf_i+0x232>
 80039ca:	68e0      	ldr	r0, [r4, #12]
 80039cc:	9b03      	ldr	r3, [sp, #12]
 80039ce:	4298      	cmp	r0, r3
 80039d0:	bfb8      	it	lt
 80039d2:	4618      	movlt	r0, r3
 80039d4:	e7a6      	b.n	8003924 <_printf_i+0x164>
 80039d6:	2301      	movs	r3, #1
 80039d8:	4632      	mov	r2, r6
 80039da:	4649      	mov	r1, r9
 80039dc:	4640      	mov	r0, r8
 80039de:	47d0      	blx	sl
 80039e0:	3001      	adds	r0, #1
 80039e2:	d09d      	beq.n	8003920 <_printf_i+0x160>
 80039e4:	3501      	adds	r5, #1
 80039e6:	68e3      	ldr	r3, [r4, #12]
 80039e8:	9903      	ldr	r1, [sp, #12]
 80039ea:	1a5b      	subs	r3, r3, r1
 80039ec:	42ab      	cmp	r3, r5
 80039ee:	dcf2      	bgt.n	80039d6 <_printf_i+0x216>
 80039f0:	e7eb      	b.n	80039ca <_printf_i+0x20a>
 80039f2:	2500      	movs	r5, #0
 80039f4:	f104 0619 	add.w	r6, r4, #25
 80039f8:	e7f5      	b.n	80039e6 <_printf_i+0x226>
 80039fa:	bf00      	nop
 80039fc:	08008348 	.word	0x08008348
 8003a00:	08008359 	.word	0x08008359

08003a04 <_scanf_float>:
 8003a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a08:	b087      	sub	sp, #28
 8003a0a:	4617      	mov	r7, r2
 8003a0c:	9303      	str	r3, [sp, #12]
 8003a0e:	688b      	ldr	r3, [r1, #8]
 8003a10:	1e5a      	subs	r2, r3, #1
 8003a12:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003a16:	bf83      	ittte	hi
 8003a18:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003a1c:	195b      	addhi	r3, r3, r5
 8003a1e:	9302      	strhi	r3, [sp, #8]
 8003a20:	2300      	movls	r3, #0
 8003a22:	bf86      	itte	hi
 8003a24:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003a28:	608b      	strhi	r3, [r1, #8]
 8003a2a:	9302      	strls	r3, [sp, #8]
 8003a2c:	680b      	ldr	r3, [r1, #0]
 8003a2e:	468b      	mov	fp, r1
 8003a30:	2500      	movs	r5, #0
 8003a32:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003a36:	f84b 3b1c 	str.w	r3, [fp], #28
 8003a3a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003a3e:	4680      	mov	r8, r0
 8003a40:	460c      	mov	r4, r1
 8003a42:	465e      	mov	r6, fp
 8003a44:	46aa      	mov	sl, r5
 8003a46:	46a9      	mov	r9, r5
 8003a48:	9501      	str	r5, [sp, #4]
 8003a4a:	68a2      	ldr	r2, [r4, #8]
 8003a4c:	b152      	cbz	r2, 8003a64 <_scanf_float+0x60>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	2b4e      	cmp	r3, #78	; 0x4e
 8003a54:	d864      	bhi.n	8003b20 <_scanf_float+0x11c>
 8003a56:	2b40      	cmp	r3, #64	; 0x40
 8003a58:	d83c      	bhi.n	8003ad4 <_scanf_float+0xd0>
 8003a5a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8003a5e:	b2c8      	uxtb	r0, r1
 8003a60:	280e      	cmp	r0, #14
 8003a62:	d93a      	bls.n	8003ada <_scanf_float+0xd6>
 8003a64:	f1b9 0f00 	cmp.w	r9, #0
 8003a68:	d003      	beq.n	8003a72 <_scanf_float+0x6e>
 8003a6a:	6823      	ldr	r3, [r4, #0]
 8003a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a70:	6023      	str	r3, [r4, #0]
 8003a72:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003a76:	f1ba 0f01 	cmp.w	sl, #1
 8003a7a:	f200 8113 	bhi.w	8003ca4 <_scanf_float+0x2a0>
 8003a7e:	455e      	cmp	r6, fp
 8003a80:	f200 8105 	bhi.w	8003c8e <_scanf_float+0x28a>
 8003a84:	2501      	movs	r5, #1
 8003a86:	4628      	mov	r0, r5
 8003a88:	b007      	add	sp, #28
 8003a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a8e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8003a92:	2a0d      	cmp	r2, #13
 8003a94:	d8e6      	bhi.n	8003a64 <_scanf_float+0x60>
 8003a96:	a101      	add	r1, pc, #4	; (adr r1, 8003a9c <_scanf_float+0x98>)
 8003a98:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003a9c:	08003bdb 	.word	0x08003bdb
 8003aa0:	08003a65 	.word	0x08003a65
 8003aa4:	08003a65 	.word	0x08003a65
 8003aa8:	08003a65 	.word	0x08003a65
 8003aac:	08003c3b 	.word	0x08003c3b
 8003ab0:	08003c13 	.word	0x08003c13
 8003ab4:	08003a65 	.word	0x08003a65
 8003ab8:	08003a65 	.word	0x08003a65
 8003abc:	08003be9 	.word	0x08003be9
 8003ac0:	08003a65 	.word	0x08003a65
 8003ac4:	08003a65 	.word	0x08003a65
 8003ac8:	08003a65 	.word	0x08003a65
 8003acc:	08003a65 	.word	0x08003a65
 8003ad0:	08003ba1 	.word	0x08003ba1
 8003ad4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003ad8:	e7db      	b.n	8003a92 <_scanf_float+0x8e>
 8003ada:	290e      	cmp	r1, #14
 8003adc:	d8c2      	bhi.n	8003a64 <_scanf_float+0x60>
 8003ade:	a001      	add	r0, pc, #4	; (adr r0, 8003ae4 <_scanf_float+0xe0>)
 8003ae0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003ae4:	08003b93 	.word	0x08003b93
 8003ae8:	08003a65 	.word	0x08003a65
 8003aec:	08003b93 	.word	0x08003b93
 8003af0:	08003c27 	.word	0x08003c27
 8003af4:	08003a65 	.word	0x08003a65
 8003af8:	08003b41 	.word	0x08003b41
 8003afc:	08003b7d 	.word	0x08003b7d
 8003b00:	08003b7d 	.word	0x08003b7d
 8003b04:	08003b7d 	.word	0x08003b7d
 8003b08:	08003b7d 	.word	0x08003b7d
 8003b0c:	08003b7d 	.word	0x08003b7d
 8003b10:	08003b7d 	.word	0x08003b7d
 8003b14:	08003b7d 	.word	0x08003b7d
 8003b18:	08003b7d 	.word	0x08003b7d
 8003b1c:	08003b7d 	.word	0x08003b7d
 8003b20:	2b6e      	cmp	r3, #110	; 0x6e
 8003b22:	d809      	bhi.n	8003b38 <_scanf_float+0x134>
 8003b24:	2b60      	cmp	r3, #96	; 0x60
 8003b26:	d8b2      	bhi.n	8003a8e <_scanf_float+0x8a>
 8003b28:	2b54      	cmp	r3, #84	; 0x54
 8003b2a:	d077      	beq.n	8003c1c <_scanf_float+0x218>
 8003b2c:	2b59      	cmp	r3, #89	; 0x59
 8003b2e:	d199      	bne.n	8003a64 <_scanf_float+0x60>
 8003b30:	2d07      	cmp	r5, #7
 8003b32:	d197      	bne.n	8003a64 <_scanf_float+0x60>
 8003b34:	2508      	movs	r5, #8
 8003b36:	e029      	b.n	8003b8c <_scanf_float+0x188>
 8003b38:	2b74      	cmp	r3, #116	; 0x74
 8003b3a:	d06f      	beq.n	8003c1c <_scanf_float+0x218>
 8003b3c:	2b79      	cmp	r3, #121	; 0x79
 8003b3e:	e7f6      	b.n	8003b2e <_scanf_float+0x12a>
 8003b40:	6821      	ldr	r1, [r4, #0]
 8003b42:	05c8      	lsls	r0, r1, #23
 8003b44:	d51a      	bpl.n	8003b7c <_scanf_float+0x178>
 8003b46:	9b02      	ldr	r3, [sp, #8]
 8003b48:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003b4c:	6021      	str	r1, [r4, #0]
 8003b4e:	f109 0901 	add.w	r9, r9, #1
 8003b52:	b11b      	cbz	r3, 8003b5c <_scanf_float+0x158>
 8003b54:	3b01      	subs	r3, #1
 8003b56:	3201      	adds	r2, #1
 8003b58:	9302      	str	r3, [sp, #8]
 8003b5a:	60a2      	str	r2, [r4, #8]
 8003b5c:	68a3      	ldr	r3, [r4, #8]
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	60a3      	str	r3, [r4, #8]
 8003b62:	6923      	ldr	r3, [r4, #16]
 8003b64:	3301      	adds	r3, #1
 8003b66:	6123      	str	r3, [r4, #16]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	607b      	str	r3, [r7, #4]
 8003b70:	f340 8084 	ble.w	8003c7c <_scanf_float+0x278>
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	3301      	adds	r3, #1
 8003b78:	603b      	str	r3, [r7, #0]
 8003b7a:	e766      	b.n	8003a4a <_scanf_float+0x46>
 8003b7c:	eb1a 0f05 	cmn.w	sl, r5
 8003b80:	f47f af70 	bne.w	8003a64 <_scanf_float+0x60>
 8003b84:	6822      	ldr	r2, [r4, #0]
 8003b86:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8003b8a:	6022      	str	r2, [r4, #0]
 8003b8c:	f806 3b01 	strb.w	r3, [r6], #1
 8003b90:	e7e4      	b.n	8003b5c <_scanf_float+0x158>
 8003b92:	6822      	ldr	r2, [r4, #0]
 8003b94:	0610      	lsls	r0, r2, #24
 8003b96:	f57f af65 	bpl.w	8003a64 <_scanf_float+0x60>
 8003b9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b9e:	e7f4      	b.n	8003b8a <_scanf_float+0x186>
 8003ba0:	f1ba 0f00 	cmp.w	sl, #0
 8003ba4:	d10e      	bne.n	8003bc4 <_scanf_float+0x1c0>
 8003ba6:	f1b9 0f00 	cmp.w	r9, #0
 8003baa:	d10e      	bne.n	8003bca <_scanf_float+0x1c6>
 8003bac:	6822      	ldr	r2, [r4, #0]
 8003bae:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003bb2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003bb6:	d108      	bne.n	8003bca <_scanf_float+0x1c6>
 8003bb8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003bbc:	6022      	str	r2, [r4, #0]
 8003bbe:	f04f 0a01 	mov.w	sl, #1
 8003bc2:	e7e3      	b.n	8003b8c <_scanf_float+0x188>
 8003bc4:	f1ba 0f02 	cmp.w	sl, #2
 8003bc8:	d055      	beq.n	8003c76 <_scanf_float+0x272>
 8003bca:	2d01      	cmp	r5, #1
 8003bcc:	d002      	beq.n	8003bd4 <_scanf_float+0x1d0>
 8003bce:	2d04      	cmp	r5, #4
 8003bd0:	f47f af48 	bne.w	8003a64 <_scanf_float+0x60>
 8003bd4:	3501      	adds	r5, #1
 8003bd6:	b2ed      	uxtb	r5, r5
 8003bd8:	e7d8      	b.n	8003b8c <_scanf_float+0x188>
 8003bda:	f1ba 0f01 	cmp.w	sl, #1
 8003bde:	f47f af41 	bne.w	8003a64 <_scanf_float+0x60>
 8003be2:	f04f 0a02 	mov.w	sl, #2
 8003be6:	e7d1      	b.n	8003b8c <_scanf_float+0x188>
 8003be8:	b97d      	cbnz	r5, 8003c0a <_scanf_float+0x206>
 8003bea:	f1b9 0f00 	cmp.w	r9, #0
 8003bee:	f47f af3c 	bne.w	8003a6a <_scanf_float+0x66>
 8003bf2:	6822      	ldr	r2, [r4, #0]
 8003bf4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003bf8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003bfc:	f47f af39 	bne.w	8003a72 <_scanf_float+0x6e>
 8003c00:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003c04:	6022      	str	r2, [r4, #0]
 8003c06:	2501      	movs	r5, #1
 8003c08:	e7c0      	b.n	8003b8c <_scanf_float+0x188>
 8003c0a:	2d03      	cmp	r5, #3
 8003c0c:	d0e2      	beq.n	8003bd4 <_scanf_float+0x1d0>
 8003c0e:	2d05      	cmp	r5, #5
 8003c10:	e7de      	b.n	8003bd0 <_scanf_float+0x1cc>
 8003c12:	2d02      	cmp	r5, #2
 8003c14:	f47f af26 	bne.w	8003a64 <_scanf_float+0x60>
 8003c18:	2503      	movs	r5, #3
 8003c1a:	e7b7      	b.n	8003b8c <_scanf_float+0x188>
 8003c1c:	2d06      	cmp	r5, #6
 8003c1e:	f47f af21 	bne.w	8003a64 <_scanf_float+0x60>
 8003c22:	2507      	movs	r5, #7
 8003c24:	e7b2      	b.n	8003b8c <_scanf_float+0x188>
 8003c26:	6822      	ldr	r2, [r4, #0]
 8003c28:	0591      	lsls	r1, r2, #22
 8003c2a:	f57f af1b 	bpl.w	8003a64 <_scanf_float+0x60>
 8003c2e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8003c32:	6022      	str	r2, [r4, #0]
 8003c34:	f8cd 9004 	str.w	r9, [sp, #4]
 8003c38:	e7a8      	b.n	8003b8c <_scanf_float+0x188>
 8003c3a:	6822      	ldr	r2, [r4, #0]
 8003c3c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003c40:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003c44:	d006      	beq.n	8003c54 <_scanf_float+0x250>
 8003c46:	0550      	lsls	r0, r2, #21
 8003c48:	f57f af0c 	bpl.w	8003a64 <_scanf_float+0x60>
 8003c4c:	f1b9 0f00 	cmp.w	r9, #0
 8003c50:	f43f af0f 	beq.w	8003a72 <_scanf_float+0x6e>
 8003c54:	0591      	lsls	r1, r2, #22
 8003c56:	bf58      	it	pl
 8003c58:	9901      	ldrpl	r1, [sp, #4]
 8003c5a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003c5e:	bf58      	it	pl
 8003c60:	eba9 0101 	subpl.w	r1, r9, r1
 8003c64:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003c68:	bf58      	it	pl
 8003c6a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003c6e:	6022      	str	r2, [r4, #0]
 8003c70:	f04f 0900 	mov.w	r9, #0
 8003c74:	e78a      	b.n	8003b8c <_scanf_float+0x188>
 8003c76:	f04f 0a03 	mov.w	sl, #3
 8003c7a:	e787      	b.n	8003b8c <_scanf_float+0x188>
 8003c7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003c80:	4639      	mov	r1, r7
 8003c82:	4640      	mov	r0, r8
 8003c84:	4798      	blx	r3
 8003c86:	2800      	cmp	r0, #0
 8003c88:	f43f aedf 	beq.w	8003a4a <_scanf_float+0x46>
 8003c8c:	e6ea      	b.n	8003a64 <_scanf_float+0x60>
 8003c8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003c92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003c96:	463a      	mov	r2, r7
 8003c98:	4640      	mov	r0, r8
 8003c9a:	4798      	blx	r3
 8003c9c:	6923      	ldr	r3, [r4, #16]
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	6123      	str	r3, [r4, #16]
 8003ca2:	e6ec      	b.n	8003a7e <_scanf_float+0x7a>
 8003ca4:	1e6b      	subs	r3, r5, #1
 8003ca6:	2b06      	cmp	r3, #6
 8003ca8:	d825      	bhi.n	8003cf6 <_scanf_float+0x2f2>
 8003caa:	2d02      	cmp	r5, #2
 8003cac:	d836      	bhi.n	8003d1c <_scanf_float+0x318>
 8003cae:	455e      	cmp	r6, fp
 8003cb0:	f67f aee8 	bls.w	8003a84 <_scanf_float+0x80>
 8003cb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003cb8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003cbc:	463a      	mov	r2, r7
 8003cbe:	4640      	mov	r0, r8
 8003cc0:	4798      	blx	r3
 8003cc2:	6923      	ldr	r3, [r4, #16]
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	6123      	str	r3, [r4, #16]
 8003cc8:	e7f1      	b.n	8003cae <_scanf_float+0x2aa>
 8003cca:	9802      	ldr	r0, [sp, #8]
 8003ccc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003cd0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8003cd4:	9002      	str	r0, [sp, #8]
 8003cd6:	463a      	mov	r2, r7
 8003cd8:	4640      	mov	r0, r8
 8003cda:	4798      	blx	r3
 8003cdc:	6923      	ldr	r3, [r4, #16]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	6123      	str	r3, [r4, #16]
 8003ce2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003ce6:	fa5f fa8a 	uxtb.w	sl, sl
 8003cea:	f1ba 0f02 	cmp.w	sl, #2
 8003cee:	d1ec      	bne.n	8003cca <_scanf_float+0x2c6>
 8003cf0:	3d03      	subs	r5, #3
 8003cf2:	b2ed      	uxtb	r5, r5
 8003cf4:	1b76      	subs	r6, r6, r5
 8003cf6:	6823      	ldr	r3, [r4, #0]
 8003cf8:	05da      	lsls	r2, r3, #23
 8003cfa:	d52f      	bpl.n	8003d5c <_scanf_float+0x358>
 8003cfc:	055b      	lsls	r3, r3, #21
 8003cfe:	d510      	bpl.n	8003d22 <_scanf_float+0x31e>
 8003d00:	455e      	cmp	r6, fp
 8003d02:	f67f aebf 	bls.w	8003a84 <_scanf_float+0x80>
 8003d06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003d0e:	463a      	mov	r2, r7
 8003d10:	4640      	mov	r0, r8
 8003d12:	4798      	blx	r3
 8003d14:	6923      	ldr	r3, [r4, #16]
 8003d16:	3b01      	subs	r3, #1
 8003d18:	6123      	str	r3, [r4, #16]
 8003d1a:	e7f1      	b.n	8003d00 <_scanf_float+0x2fc>
 8003d1c:	46aa      	mov	sl, r5
 8003d1e:	9602      	str	r6, [sp, #8]
 8003d20:	e7df      	b.n	8003ce2 <_scanf_float+0x2de>
 8003d22:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003d26:	6923      	ldr	r3, [r4, #16]
 8003d28:	2965      	cmp	r1, #101	; 0x65
 8003d2a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8003d2e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8003d32:	6123      	str	r3, [r4, #16]
 8003d34:	d00c      	beq.n	8003d50 <_scanf_float+0x34c>
 8003d36:	2945      	cmp	r1, #69	; 0x45
 8003d38:	d00a      	beq.n	8003d50 <_scanf_float+0x34c>
 8003d3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d3e:	463a      	mov	r2, r7
 8003d40:	4640      	mov	r0, r8
 8003d42:	4798      	blx	r3
 8003d44:	6923      	ldr	r3, [r4, #16]
 8003d46:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	1eb5      	subs	r5, r6, #2
 8003d4e:	6123      	str	r3, [r4, #16]
 8003d50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003d54:	463a      	mov	r2, r7
 8003d56:	4640      	mov	r0, r8
 8003d58:	4798      	blx	r3
 8003d5a:	462e      	mov	r6, r5
 8003d5c:	6825      	ldr	r5, [r4, #0]
 8003d5e:	f015 0510 	ands.w	r5, r5, #16
 8003d62:	d158      	bne.n	8003e16 <_scanf_float+0x412>
 8003d64:	7035      	strb	r5, [r6, #0]
 8003d66:	6823      	ldr	r3, [r4, #0]
 8003d68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d70:	d11c      	bne.n	8003dac <_scanf_float+0x3a8>
 8003d72:	9b01      	ldr	r3, [sp, #4]
 8003d74:	454b      	cmp	r3, r9
 8003d76:	eba3 0209 	sub.w	r2, r3, r9
 8003d7a:	d124      	bne.n	8003dc6 <_scanf_float+0x3c2>
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	4659      	mov	r1, fp
 8003d80:	4640      	mov	r0, r8
 8003d82:	f000 ff21 	bl	8004bc8 <_strtod_r>
 8003d86:	9b03      	ldr	r3, [sp, #12]
 8003d88:	6821      	ldr	r1, [r4, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f011 0f02 	tst.w	r1, #2
 8003d90:	ec57 6b10 	vmov	r6, r7, d0
 8003d94:	f103 0204 	add.w	r2, r3, #4
 8003d98:	d020      	beq.n	8003ddc <_scanf_float+0x3d8>
 8003d9a:	9903      	ldr	r1, [sp, #12]
 8003d9c:	600a      	str	r2, [r1, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	e9c3 6700 	strd	r6, r7, [r3]
 8003da4:	68e3      	ldr	r3, [r4, #12]
 8003da6:	3301      	adds	r3, #1
 8003da8:	60e3      	str	r3, [r4, #12]
 8003daa:	e66c      	b.n	8003a86 <_scanf_float+0x82>
 8003dac:	9b04      	ldr	r3, [sp, #16]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0e4      	beq.n	8003d7c <_scanf_float+0x378>
 8003db2:	9905      	ldr	r1, [sp, #20]
 8003db4:	230a      	movs	r3, #10
 8003db6:	462a      	mov	r2, r5
 8003db8:	3101      	adds	r1, #1
 8003dba:	4640      	mov	r0, r8
 8003dbc:	f000 ff8c 	bl	8004cd8 <_strtol_r>
 8003dc0:	9b04      	ldr	r3, [sp, #16]
 8003dc2:	9e05      	ldr	r6, [sp, #20]
 8003dc4:	1ac2      	subs	r2, r0, r3
 8003dc6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003dca:	429e      	cmp	r6, r3
 8003dcc:	bf28      	it	cs
 8003dce:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8003dd2:	4912      	ldr	r1, [pc, #72]	; (8003e1c <_scanf_float+0x418>)
 8003dd4:	4630      	mov	r0, r6
 8003dd6:	f000 f825 	bl	8003e24 <siprintf>
 8003dda:	e7cf      	b.n	8003d7c <_scanf_float+0x378>
 8003ddc:	f011 0f04 	tst.w	r1, #4
 8003de0:	9903      	ldr	r1, [sp, #12]
 8003de2:	600a      	str	r2, [r1, #0]
 8003de4:	d1db      	bne.n	8003d9e <_scanf_float+0x39a>
 8003de6:	f8d3 8000 	ldr.w	r8, [r3]
 8003dea:	ee10 2a10 	vmov	r2, s0
 8003dee:	ee10 0a10 	vmov	r0, s0
 8003df2:	463b      	mov	r3, r7
 8003df4:	4639      	mov	r1, r7
 8003df6:	f7fc feb9 	bl	8000b6c <__aeabi_dcmpun>
 8003dfa:	b128      	cbz	r0, 8003e08 <_scanf_float+0x404>
 8003dfc:	4808      	ldr	r0, [pc, #32]	; (8003e20 <_scanf_float+0x41c>)
 8003dfe:	f000 ffff 	bl	8004e00 <nanf>
 8003e02:	ed88 0a00 	vstr	s0, [r8]
 8003e06:	e7cd      	b.n	8003da4 <_scanf_float+0x3a0>
 8003e08:	4630      	mov	r0, r6
 8003e0a:	4639      	mov	r1, r7
 8003e0c:	f7fc ff0c 	bl	8000c28 <__aeabi_d2f>
 8003e10:	f8c8 0000 	str.w	r0, [r8]
 8003e14:	e7c6      	b.n	8003da4 <_scanf_float+0x3a0>
 8003e16:	2500      	movs	r5, #0
 8003e18:	e635      	b.n	8003a86 <_scanf_float+0x82>
 8003e1a:	bf00      	nop
 8003e1c:	0800836a 	.word	0x0800836a
 8003e20:	0800877f 	.word	0x0800877f

08003e24 <siprintf>:
 8003e24:	b40e      	push	{r1, r2, r3}
 8003e26:	b500      	push	{lr}
 8003e28:	b09c      	sub	sp, #112	; 0x70
 8003e2a:	ab1d      	add	r3, sp, #116	; 0x74
 8003e2c:	9002      	str	r0, [sp, #8]
 8003e2e:	9006      	str	r0, [sp, #24]
 8003e30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003e34:	4809      	ldr	r0, [pc, #36]	; (8003e5c <siprintf+0x38>)
 8003e36:	9107      	str	r1, [sp, #28]
 8003e38:	9104      	str	r1, [sp, #16]
 8003e3a:	4909      	ldr	r1, [pc, #36]	; (8003e60 <siprintf+0x3c>)
 8003e3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e40:	9105      	str	r1, [sp, #20]
 8003e42:	6800      	ldr	r0, [r0, #0]
 8003e44:	9301      	str	r3, [sp, #4]
 8003e46:	a902      	add	r1, sp, #8
 8003e48:	f002 fa0e 	bl	8006268 <_svfiprintf_r>
 8003e4c:	9b02      	ldr	r3, [sp, #8]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	701a      	strb	r2, [r3, #0]
 8003e52:	b01c      	add	sp, #112	; 0x70
 8003e54:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e58:	b003      	add	sp, #12
 8003e5a:	4770      	bx	lr
 8003e5c:	200001d0 	.word	0x200001d0
 8003e60:	ffff0208 	.word	0xffff0208

08003e64 <std>:
 8003e64:	2300      	movs	r3, #0
 8003e66:	b510      	push	{r4, lr}
 8003e68:	4604      	mov	r4, r0
 8003e6a:	e9c0 3300 	strd	r3, r3, [r0]
 8003e6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e72:	6083      	str	r3, [r0, #8]
 8003e74:	8181      	strh	r1, [r0, #12]
 8003e76:	6643      	str	r3, [r0, #100]	; 0x64
 8003e78:	81c2      	strh	r2, [r0, #14]
 8003e7a:	6183      	str	r3, [r0, #24]
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	2208      	movs	r2, #8
 8003e80:	305c      	adds	r0, #92	; 0x5c
 8003e82:	f000 ff6d 	bl	8004d60 <memset>
 8003e86:	4b0d      	ldr	r3, [pc, #52]	; (8003ebc <std+0x58>)
 8003e88:	6263      	str	r3, [r4, #36]	; 0x24
 8003e8a:	4b0d      	ldr	r3, [pc, #52]	; (8003ec0 <std+0x5c>)
 8003e8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003e8e:	4b0d      	ldr	r3, [pc, #52]	; (8003ec4 <std+0x60>)
 8003e90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e92:	4b0d      	ldr	r3, [pc, #52]	; (8003ec8 <std+0x64>)
 8003e94:	6323      	str	r3, [r4, #48]	; 0x30
 8003e96:	4b0d      	ldr	r3, [pc, #52]	; (8003ecc <std+0x68>)
 8003e98:	6224      	str	r4, [r4, #32]
 8003e9a:	429c      	cmp	r4, r3
 8003e9c:	d006      	beq.n	8003eac <std+0x48>
 8003e9e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003ea2:	4294      	cmp	r4, r2
 8003ea4:	d002      	beq.n	8003eac <std+0x48>
 8003ea6:	33d0      	adds	r3, #208	; 0xd0
 8003ea8:	429c      	cmp	r4, r3
 8003eaa:	d105      	bne.n	8003eb8 <std+0x54>
 8003eac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eb4:	f000 bf8a 	b.w	8004dcc <__retarget_lock_init_recursive>
 8003eb8:	bd10      	pop	{r4, pc}
 8003eba:	bf00      	nop
 8003ebc:	08007723 	.word	0x08007723
 8003ec0:	08007745 	.word	0x08007745
 8003ec4:	0800777d 	.word	0x0800777d
 8003ec8:	080077a1 	.word	0x080077a1
 8003ecc:	20000240 	.word	0x20000240

08003ed0 <stdio_exit_handler>:
 8003ed0:	4a02      	ldr	r2, [pc, #8]	; (8003edc <stdio_exit_handler+0xc>)
 8003ed2:	4903      	ldr	r1, [pc, #12]	; (8003ee0 <stdio_exit_handler+0x10>)
 8003ed4:	4803      	ldr	r0, [pc, #12]	; (8003ee4 <stdio_exit_handler+0x14>)
 8003ed6:	f000 bf01 	b.w	8004cdc <_fwalk_sglue>
 8003eda:	bf00      	nop
 8003edc:	2000000c 	.word	0x2000000c
 8003ee0:	08006d61 	.word	0x08006d61
 8003ee4:	20000184 	.word	0x20000184

08003ee8 <cleanup_stdio>:
 8003ee8:	6841      	ldr	r1, [r0, #4]
 8003eea:	4b0c      	ldr	r3, [pc, #48]	; (8003f1c <cleanup_stdio+0x34>)
 8003eec:	4299      	cmp	r1, r3
 8003eee:	b510      	push	{r4, lr}
 8003ef0:	4604      	mov	r4, r0
 8003ef2:	d001      	beq.n	8003ef8 <cleanup_stdio+0x10>
 8003ef4:	f002 ff34 	bl	8006d60 <_fflush_r>
 8003ef8:	68a1      	ldr	r1, [r4, #8]
 8003efa:	4b09      	ldr	r3, [pc, #36]	; (8003f20 <cleanup_stdio+0x38>)
 8003efc:	4299      	cmp	r1, r3
 8003efe:	d002      	beq.n	8003f06 <cleanup_stdio+0x1e>
 8003f00:	4620      	mov	r0, r4
 8003f02:	f002 ff2d 	bl	8006d60 <_fflush_r>
 8003f06:	68e1      	ldr	r1, [r4, #12]
 8003f08:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <cleanup_stdio+0x3c>)
 8003f0a:	4299      	cmp	r1, r3
 8003f0c:	d004      	beq.n	8003f18 <cleanup_stdio+0x30>
 8003f0e:	4620      	mov	r0, r4
 8003f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f14:	f002 bf24 	b.w	8006d60 <_fflush_r>
 8003f18:	bd10      	pop	{r4, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20000240 	.word	0x20000240
 8003f20:	200002a8 	.word	0x200002a8
 8003f24:	20000310 	.word	0x20000310

08003f28 <global_stdio_init.part.0>:
 8003f28:	b510      	push	{r4, lr}
 8003f2a:	4b0b      	ldr	r3, [pc, #44]	; (8003f58 <global_stdio_init.part.0+0x30>)
 8003f2c:	4c0b      	ldr	r4, [pc, #44]	; (8003f5c <global_stdio_init.part.0+0x34>)
 8003f2e:	4a0c      	ldr	r2, [pc, #48]	; (8003f60 <global_stdio_init.part.0+0x38>)
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	4620      	mov	r0, r4
 8003f34:	2200      	movs	r2, #0
 8003f36:	2104      	movs	r1, #4
 8003f38:	f7ff ff94 	bl	8003e64 <std>
 8003f3c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003f40:	2201      	movs	r2, #1
 8003f42:	2109      	movs	r1, #9
 8003f44:	f7ff ff8e 	bl	8003e64 <std>
 8003f48:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003f4c:	2202      	movs	r2, #2
 8003f4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f52:	2112      	movs	r1, #18
 8003f54:	f7ff bf86 	b.w	8003e64 <std>
 8003f58:	20000378 	.word	0x20000378
 8003f5c:	20000240 	.word	0x20000240
 8003f60:	08003ed1 	.word	0x08003ed1

08003f64 <__sfp_lock_acquire>:
 8003f64:	4801      	ldr	r0, [pc, #4]	; (8003f6c <__sfp_lock_acquire+0x8>)
 8003f66:	f000 bf32 	b.w	8004dce <__retarget_lock_acquire_recursive>
 8003f6a:	bf00      	nop
 8003f6c:	2000037d 	.word	0x2000037d

08003f70 <__sfp_lock_release>:
 8003f70:	4801      	ldr	r0, [pc, #4]	; (8003f78 <__sfp_lock_release+0x8>)
 8003f72:	f000 bf2d 	b.w	8004dd0 <__retarget_lock_release_recursive>
 8003f76:	bf00      	nop
 8003f78:	2000037d 	.word	0x2000037d

08003f7c <__sinit>:
 8003f7c:	b510      	push	{r4, lr}
 8003f7e:	4604      	mov	r4, r0
 8003f80:	f7ff fff0 	bl	8003f64 <__sfp_lock_acquire>
 8003f84:	6a23      	ldr	r3, [r4, #32]
 8003f86:	b11b      	cbz	r3, 8003f90 <__sinit+0x14>
 8003f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f8c:	f7ff bff0 	b.w	8003f70 <__sfp_lock_release>
 8003f90:	4b04      	ldr	r3, [pc, #16]	; (8003fa4 <__sinit+0x28>)
 8003f92:	6223      	str	r3, [r4, #32]
 8003f94:	4b04      	ldr	r3, [pc, #16]	; (8003fa8 <__sinit+0x2c>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1f5      	bne.n	8003f88 <__sinit+0xc>
 8003f9c:	f7ff ffc4 	bl	8003f28 <global_stdio_init.part.0>
 8003fa0:	e7f2      	b.n	8003f88 <__sinit+0xc>
 8003fa2:	bf00      	nop
 8003fa4:	08003ee9 	.word	0x08003ee9
 8003fa8:	20000378 	.word	0x20000378

08003fac <sulp>:
 8003fac:	b570      	push	{r4, r5, r6, lr}
 8003fae:	4604      	mov	r4, r0
 8003fb0:	460d      	mov	r5, r1
 8003fb2:	ec45 4b10 	vmov	d0, r4, r5
 8003fb6:	4616      	mov	r6, r2
 8003fb8:	f003 fa72 	bl	80074a0 <__ulp>
 8003fbc:	ec51 0b10 	vmov	r0, r1, d0
 8003fc0:	b17e      	cbz	r6, 8003fe2 <sulp+0x36>
 8003fc2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8003fc6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	dd09      	ble.n	8003fe2 <sulp+0x36>
 8003fce:	051b      	lsls	r3, r3, #20
 8003fd0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003fd4:	2400      	movs	r4, #0
 8003fd6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003fda:	4622      	mov	r2, r4
 8003fdc:	462b      	mov	r3, r5
 8003fde:	f7fc fb2b 	bl	8000638 <__aeabi_dmul>
 8003fe2:	bd70      	pop	{r4, r5, r6, pc}
 8003fe4:	0000      	movs	r0, r0
	...

08003fe8 <_strtod_l>:
 8003fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fec:	ed2d 8b02 	vpush	{d8}
 8003ff0:	b09b      	sub	sp, #108	; 0x6c
 8003ff2:	4604      	mov	r4, r0
 8003ff4:	9213      	str	r2, [sp, #76]	; 0x4c
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	9216      	str	r2, [sp, #88]	; 0x58
 8003ffa:	460d      	mov	r5, r1
 8003ffc:	f04f 0800 	mov.w	r8, #0
 8004000:	f04f 0900 	mov.w	r9, #0
 8004004:	460a      	mov	r2, r1
 8004006:	9215      	str	r2, [sp, #84]	; 0x54
 8004008:	7811      	ldrb	r1, [r2, #0]
 800400a:	292b      	cmp	r1, #43	; 0x2b
 800400c:	d04c      	beq.n	80040a8 <_strtod_l+0xc0>
 800400e:	d83a      	bhi.n	8004086 <_strtod_l+0x9e>
 8004010:	290d      	cmp	r1, #13
 8004012:	d834      	bhi.n	800407e <_strtod_l+0x96>
 8004014:	2908      	cmp	r1, #8
 8004016:	d834      	bhi.n	8004082 <_strtod_l+0x9a>
 8004018:	2900      	cmp	r1, #0
 800401a:	d03d      	beq.n	8004098 <_strtod_l+0xb0>
 800401c:	2200      	movs	r2, #0
 800401e:	920a      	str	r2, [sp, #40]	; 0x28
 8004020:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8004022:	7832      	ldrb	r2, [r6, #0]
 8004024:	2a30      	cmp	r2, #48	; 0x30
 8004026:	f040 80b4 	bne.w	8004192 <_strtod_l+0x1aa>
 800402a:	7872      	ldrb	r2, [r6, #1]
 800402c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8004030:	2a58      	cmp	r2, #88	; 0x58
 8004032:	d170      	bne.n	8004116 <_strtod_l+0x12e>
 8004034:	9302      	str	r3, [sp, #8]
 8004036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004038:	9301      	str	r3, [sp, #4]
 800403a:	ab16      	add	r3, sp, #88	; 0x58
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	4a8e      	ldr	r2, [pc, #568]	; (8004278 <_strtod_l+0x290>)
 8004040:	ab17      	add	r3, sp, #92	; 0x5c
 8004042:	a915      	add	r1, sp, #84	; 0x54
 8004044:	4620      	mov	r0, r4
 8004046:	f001 fdc5 	bl	8005bd4 <__gethex>
 800404a:	f010 070f 	ands.w	r7, r0, #15
 800404e:	4605      	mov	r5, r0
 8004050:	d005      	beq.n	800405e <_strtod_l+0x76>
 8004052:	2f06      	cmp	r7, #6
 8004054:	d12a      	bne.n	80040ac <_strtod_l+0xc4>
 8004056:	3601      	adds	r6, #1
 8004058:	2300      	movs	r3, #0
 800405a:	9615      	str	r6, [sp, #84]	; 0x54
 800405c:	930a      	str	r3, [sp, #40]	; 0x28
 800405e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004060:	2b00      	cmp	r3, #0
 8004062:	f040 857f 	bne.w	8004b64 <_strtod_l+0xb7c>
 8004066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004068:	b1db      	cbz	r3, 80040a2 <_strtod_l+0xba>
 800406a:	4642      	mov	r2, r8
 800406c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004070:	ec43 2b10 	vmov	d0, r2, r3
 8004074:	b01b      	add	sp, #108	; 0x6c
 8004076:	ecbd 8b02 	vpop	{d8}
 800407a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800407e:	2920      	cmp	r1, #32
 8004080:	d1cc      	bne.n	800401c <_strtod_l+0x34>
 8004082:	3201      	adds	r2, #1
 8004084:	e7bf      	b.n	8004006 <_strtod_l+0x1e>
 8004086:	292d      	cmp	r1, #45	; 0x2d
 8004088:	d1c8      	bne.n	800401c <_strtod_l+0x34>
 800408a:	2101      	movs	r1, #1
 800408c:	910a      	str	r1, [sp, #40]	; 0x28
 800408e:	1c51      	adds	r1, r2, #1
 8004090:	9115      	str	r1, [sp, #84]	; 0x54
 8004092:	7852      	ldrb	r2, [r2, #1]
 8004094:	2a00      	cmp	r2, #0
 8004096:	d1c3      	bne.n	8004020 <_strtod_l+0x38>
 8004098:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800409a:	9515      	str	r5, [sp, #84]	; 0x54
 800409c:	2b00      	cmp	r3, #0
 800409e:	f040 855f 	bne.w	8004b60 <_strtod_l+0xb78>
 80040a2:	4642      	mov	r2, r8
 80040a4:	464b      	mov	r3, r9
 80040a6:	e7e3      	b.n	8004070 <_strtod_l+0x88>
 80040a8:	2100      	movs	r1, #0
 80040aa:	e7ef      	b.n	800408c <_strtod_l+0xa4>
 80040ac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80040ae:	b13a      	cbz	r2, 80040c0 <_strtod_l+0xd8>
 80040b0:	2135      	movs	r1, #53	; 0x35
 80040b2:	a818      	add	r0, sp, #96	; 0x60
 80040b4:	f003 faf1 	bl	800769a <__copybits>
 80040b8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80040ba:	4620      	mov	r0, r4
 80040bc:	f002 fec4 	bl	8006e48 <_Bfree>
 80040c0:	3f01      	subs	r7, #1
 80040c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80040c4:	2f04      	cmp	r7, #4
 80040c6:	d806      	bhi.n	80040d6 <_strtod_l+0xee>
 80040c8:	e8df f007 	tbb	[pc, r7]
 80040cc:	201d0314 	.word	0x201d0314
 80040d0:	14          	.byte	0x14
 80040d1:	00          	.byte	0x00
 80040d2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80040d6:	05e9      	lsls	r1, r5, #23
 80040d8:	bf48      	it	mi
 80040da:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80040de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80040e2:	0d1b      	lsrs	r3, r3, #20
 80040e4:	051b      	lsls	r3, r3, #20
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1b9      	bne.n	800405e <_strtod_l+0x76>
 80040ea:	f000 fe45 	bl	8004d78 <__errno>
 80040ee:	2322      	movs	r3, #34	; 0x22
 80040f0:	6003      	str	r3, [r0, #0]
 80040f2:	e7b4      	b.n	800405e <_strtod_l+0x76>
 80040f4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80040f8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80040fc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004100:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004104:	e7e7      	b.n	80040d6 <_strtod_l+0xee>
 8004106:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004280 <_strtod_l+0x298>
 800410a:	e7e4      	b.n	80040d6 <_strtod_l+0xee>
 800410c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004110:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004114:	e7df      	b.n	80040d6 <_strtod_l+0xee>
 8004116:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004118:	1c5a      	adds	r2, r3, #1
 800411a:	9215      	str	r2, [sp, #84]	; 0x54
 800411c:	785b      	ldrb	r3, [r3, #1]
 800411e:	2b30      	cmp	r3, #48	; 0x30
 8004120:	d0f9      	beq.n	8004116 <_strtod_l+0x12e>
 8004122:	2b00      	cmp	r3, #0
 8004124:	d09b      	beq.n	800405e <_strtod_l+0x76>
 8004126:	2301      	movs	r3, #1
 8004128:	f04f 0a00 	mov.w	sl, #0
 800412c:	9304      	str	r3, [sp, #16]
 800412e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004130:	930b      	str	r3, [sp, #44]	; 0x2c
 8004132:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8004136:	46d3      	mov	fp, sl
 8004138:	220a      	movs	r2, #10
 800413a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800413c:	7806      	ldrb	r6, [r0, #0]
 800413e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004142:	b2d9      	uxtb	r1, r3
 8004144:	2909      	cmp	r1, #9
 8004146:	d926      	bls.n	8004196 <_strtod_l+0x1ae>
 8004148:	494c      	ldr	r1, [pc, #304]	; (800427c <_strtod_l+0x294>)
 800414a:	2201      	movs	r2, #1
 800414c:	f000 fdf6 	bl	8004d3c <strncmp>
 8004150:	2800      	cmp	r0, #0
 8004152:	d030      	beq.n	80041b6 <_strtod_l+0x1ce>
 8004154:	2000      	movs	r0, #0
 8004156:	4632      	mov	r2, r6
 8004158:	9005      	str	r0, [sp, #20]
 800415a:	465e      	mov	r6, fp
 800415c:	4603      	mov	r3, r0
 800415e:	2a65      	cmp	r2, #101	; 0x65
 8004160:	d001      	beq.n	8004166 <_strtod_l+0x17e>
 8004162:	2a45      	cmp	r2, #69	; 0x45
 8004164:	d113      	bne.n	800418e <_strtod_l+0x1a6>
 8004166:	b91e      	cbnz	r6, 8004170 <_strtod_l+0x188>
 8004168:	9a04      	ldr	r2, [sp, #16]
 800416a:	4302      	orrs	r2, r0
 800416c:	d094      	beq.n	8004098 <_strtod_l+0xb0>
 800416e:	2600      	movs	r6, #0
 8004170:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8004172:	1c6a      	adds	r2, r5, #1
 8004174:	9215      	str	r2, [sp, #84]	; 0x54
 8004176:	786a      	ldrb	r2, [r5, #1]
 8004178:	2a2b      	cmp	r2, #43	; 0x2b
 800417a:	d074      	beq.n	8004266 <_strtod_l+0x27e>
 800417c:	2a2d      	cmp	r2, #45	; 0x2d
 800417e:	d078      	beq.n	8004272 <_strtod_l+0x28a>
 8004180:	f04f 0c00 	mov.w	ip, #0
 8004184:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004188:	2909      	cmp	r1, #9
 800418a:	d97f      	bls.n	800428c <_strtod_l+0x2a4>
 800418c:	9515      	str	r5, [sp, #84]	; 0x54
 800418e:	2700      	movs	r7, #0
 8004190:	e09e      	b.n	80042d0 <_strtod_l+0x2e8>
 8004192:	2300      	movs	r3, #0
 8004194:	e7c8      	b.n	8004128 <_strtod_l+0x140>
 8004196:	f1bb 0f08 	cmp.w	fp, #8
 800419a:	bfd8      	it	le
 800419c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800419e:	f100 0001 	add.w	r0, r0, #1
 80041a2:	bfda      	itte	le
 80041a4:	fb02 3301 	mlale	r3, r2, r1, r3
 80041a8:	9309      	strle	r3, [sp, #36]	; 0x24
 80041aa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80041ae:	f10b 0b01 	add.w	fp, fp, #1
 80041b2:	9015      	str	r0, [sp, #84]	; 0x54
 80041b4:	e7c1      	b.n	800413a <_strtod_l+0x152>
 80041b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	9215      	str	r2, [sp, #84]	; 0x54
 80041bc:	785a      	ldrb	r2, [r3, #1]
 80041be:	f1bb 0f00 	cmp.w	fp, #0
 80041c2:	d037      	beq.n	8004234 <_strtod_l+0x24c>
 80041c4:	9005      	str	r0, [sp, #20]
 80041c6:	465e      	mov	r6, fp
 80041c8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80041cc:	2b09      	cmp	r3, #9
 80041ce:	d912      	bls.n	80041f6 <_strtod_l+0x20e>
 80041d0:	2301      	movs	r3, #1
 80041d2:	e7c4      	b.n	800415e <_strtod_l+0x176>
 80041d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80041d6:	1c5a      	adds	r2, r3, #1
 80041d8:	9215      	str	r2, [sp, #84]	; 0x54
 80041da:	785a      	ldrb	r2, [r3, #1]
 80041dc:	3001      	adds	r0, #1
 80041de:	2a30      	cmp	r2, #48	; 0x30
 80041e0:	d0f8      	beq.n	80041d4 <_strtod_l+0x1ec>
 80041e2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80041e6:	2b08      	cmp	r3, #8
 80041e8:	f200 84c1 	bhi.w	8004b6e <_strtod_l+0xb86>
 80041ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80041ee:	9005      	str	r0, [sp, #20]
 80041f0:	2000      	movs	r0, #0
 80041f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80041f4:	4606      	mov	r6, r0
 80041f6:	3a30      	subs	r2, #48	; 0x30
 80041f8:	f100 0301 	add.w	r3, r0, #1
 80041fc:	d014      	beq.n	8004228 <_strtod_l+0x240>
 80041fe:	9905      	ldr	r1, [sp, #20]
 8004200:	4419      	add	r1, r3
 8004202:	9105      	str	r1, [sp, #20]
 8004204:	4633      	mov	r3, r6
 8004206:	eb00 0c06 	add.w	ip, r0, r6
 800420a:	210a      	movs	r1, #10
 800420c:	4563      	cmp	r3, ip
 800420e:	d113      	bne.n	8004238 <_strtod_l+0x250>
 8004210:	1833      	adds	r3, r6, r0
 8004212:	2b08      	cmp	r3, #8
 8004214:	f106 0601 	add.w	r6, r6, #1
 8004218:	4406      	add	r6, r0
 800421a:	dc1a      	bgt.n	8004252 <_strtod_l+0x26a>
 800421c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800421e:	230a      	movs	r3, #10
 8004220:	fb03 2301 	mla	r3, r3, r1, r2
 8004224:	9309      	str	r3, [sp, #36]	; 0x24
 8004226:	2300      	movs	r3, #0
 8004228:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800422a:	1c51      	adds	r1, r2, #1
 800422c:	9115      	str	r1, [sp, #84]	; 0x54
 800422e:	7852      	ldrb	r2, [r2, #1]
 8004230:	4618      	mov	r0, r3
 8004232:	e7c9      	b.n	80041c8 <_strtod_l+0x1e0>
 8004234:	4658      	mov	r0, fp
 8004236:	e7d2      	b.n	80041de <_strtod_l+0x1f6>
 8004238:	2b08      	cmp	r3, #8
 800423a:	f103 0301 	add.w	r3, r3, #1
 800423e:	dc03      	bgt.n	8004248 <_strtod_l+0x260>
 8004240:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004242:	434f      	muls	r7, r1
 8004244:	9709      	str	r7, [sp, #36]	; 0x24
 8004246:	e7e1      	b.n	800420c <_strtod_l+0x224>
 8004248:	2b10      	cmp	r3, #16
 800424a:	bfd8      	it	le
 800424c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8004250:	e7dc      	b.n	800420c <_strtod_l+0x224>
 8004252:	2e10      	cmp	r6, #16
 8004254:	bfdc      	itt	le
 8004256:	230a      	movle	r3, #10
 8004258:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800425c:	e7e3      	b.n	8004226 <_strtod_l+0x23e>
 800425e:	2300      	movs	r3, #0
 8004260:	9305      	str	r3, [sp, #20]
 8004262:	2301      	movs	r3, #1
 8004264:	e780      	b.n	8004168 <_strtod_l+0x180>
 8004266:	f04f 0c00 	mov.w	ip, #0
 800426a:	1caa      	adds	r2, r5, #2
 800426c:	9215      	str	r2, [sp, #84]	; 0x54
 800426e:	78aa      	ldrb	r2, [r5, #2]
 8004270:	e788      	b.n	8004184 <_strtod_l+0x19c>
 8004272:	f04f 0c01 	mov.w	ip, #1
 8004276:	e7f8      	b.n	800426a <_strtod_l+0x282>
 8004278:	08008374 	.word	0x08008374
 800427c:	0800836f 	.word	0x0800836f
 8004280:	7ff00000 	.word	0x7ff00000
 8004284:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004286:	1c51      	adds	r1, r2, #1
 8004288:	9115      	str	r1, [sp, #84]	; 0x54
 800428a:	7852      	ldrb	r2, [r2, #1]
 800428c:	2a30      	cmp	r2, #48	; 0x30
 800428e:	d0f9      	beq.n	8004284 <_strtod_l+0x29c>
 8004290:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004294:	2908      	cmp	r1, #8
 8004296:	f63f af7a 	bhi.w	800418e <_strtod_l+0x1a6>
 800429a:	3a30      	subs	r2, #48	; 0x30
 800429c:	9208      	str	r2, [sp, #32]
 800429e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80042a0:	920c      	str	r2, [sp, #48]	; 0x30
 80042a2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80042a4:	1c57      	adds	r7, r2, #1
 80042a6:	9715      	str	r7, [sp, #84]	; 0x54
 80042a8:	7852      	ldrb	r2, [r2, #1]
 80042aa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80042ae:	f1be 0f09 	cmp.w	lr, #9
 80042b2:	d938      	bls.n	8004326 <_strtod_l+0x33e>
 80042b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80042b6:	1a7f      	subs	r7, r7, r1
 80042b8:	2f08      	cmp	r7, #8
 80042ba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80042be:	dc03      	bgt.n	80042c8 <_strtod_l+0x2e0>
 80042c0:	9908      	ldr	r1, [sp, #32]
 80042c2:	428f      	cmp	r7, r1
 80042c4:	bfa8      	it	ge
 80042c6:	460f      	movge	r7, r1
 80042c8:	f1bc 0f00 	cmp.w	ip, #0
 80042cc:	d000      	beq.n	80042d0 <_strtod_l+0x2e8>
 80042ce:	427f      	negs	r7, r7
 80042d0:	2e00      	cmp	r6, #0
 80042d2:	d14f      	bne.n	8004374 <_strtod_l+0x38c>
 80042d4:	9904      	ldr	r1, [sp, #16]
 80042d6:	4301      	orrs	r1, r0
 80042d8:	f47f aec1 	bne.w	800405e <_strtod_l+0x76>
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f47f aedb 	bne.w	8004098 <_strtod_l+0xb0>
 80042e2:	2a69      	cmp	r2, #105	; 0x69
 80042e4:	d029      	beq.n	800433a <_strtod_l+0x352>
 80042e6:	dc26      	bgt.n	8004336 <_strtod_l+0x34e>
 80042e8:	2a49      	cmp	r2, #73	; 0x49
 80042ea:	d026      	beq.n	800433a <_strtod_l+0x352>
 80042ec:	2a4e      	cmp	r2, #78	; 0x4e
 80042ee:	f47f aed3 	bne.w	8004098 <_strtod_l+0xb0>
 80042f2:	499b      	ldr	r1, [pc, #620]	; (8004560 <_strtod_l+0x578>)
 80042f4:	a815      	add	r0, sp, #84	; 0x54
 80042f6:	f001 fead 	bl	8006054 <__match>
 80042fa:	2800      	cmp	r0, #0
 80042fc:	f43f aecc 	beq.w	8004098 <_strtod_l+0xb0>
 8004300:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2b28      	cmp	r3, #40	; 0x28
 8004306:	d12f      	bne.n	8004368 <_strtod_l+0x380>
 8004308:	4996      	ldr	r1, [pc, #600]	; (8004564 <_strtod_l+0x57c>)
 800430a:	aa18      	add	r2, sp, #96	; 0x60
 800430c:	a815      	add	r0, sp, #84	; 0x54
 800430e:	f001 feb5 	bl	800607c <__hexnan>
 8004312:	2805      	cmp	r0, #5
 8004314:	d128      	bne.n	8004368 <_strtod_l+0x380>
 8004316:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004318:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800431c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004320:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8004324:	e69b      	b.n	800405e <_strtod_l+0x76>
 8004326:	9f08      	ldr	r7, [sp, #32]
 8004328:	210a      	movs	r1, #10
 800432a:	fb01 2107 	mla	r1, r1, r7, r2
 800432e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8004332:	9208      	str	r2, [sp, #32]
 8004334:	e7b5      	b.n	80042a2 <_strtod_l+0x2ba>
 8004336:	2a6e      	cmp	r2, #110	; 0x6e
 8004338:	e7d9      	b.n	80042ee <_strtod_l+0x306>
 800433a:	498b      	ldr	r1, [pc, #556]	; (8004568 <_strtod_l+0x580>)
 800433c:	a815      	add	r0, sp, #84	; 0x54
 800433e:	f001 fe89 	bl	8006054 <__match>
 8004342:	2800      	cmp	r0, #0
 8004344:	f43f aea8 	beq.w	8004098 <_strtod_l+0xb0>
 8004348:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800434a:	4988      	ldr	r1, [pc, #544]	; (800456c <_strtod_l+0x584>)
 800434c:	3b01      	subs	r3, #1
 800434e:	a815      	add	r0, sp, #84	; 0x54
 8004350:	9315      	str	r3, [sp, #84]	; 0x54
 8004352:	f001 fe7f 	bl	8006054 <__match>
 8004356:	b910      	cbnz	r0, 800435e <_strtod_l+0x376>
 8004358:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800435a:	3301      	adds	r3, #1
 800435c:	9315      	str	r3, [sp, #84]	; 0x54
 800435e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800457c <_strtod_l+0x594>
 8004362:	f04f 0800 	mov.w	r8, #0
 8004366:	e67a      	b.n	800405e <_strtod_l+0x76>
 8004368:	4881      	ldr	r0, [pc, #516]	; (8004570 <_strtod_l+0x588>)
 800436a:	f000 fd41 	bl	8004df0 <nan>
 800436e:	ec59 8b10 	vmov	r8, r9, d0
 8004372:	e674      	b.n	800405e <_strtod_l+0x76>
 8004374:	9b05      	ldr	r3, [sp, #20]
 8004376:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004378:	1afb      	subs	r3, r7, r3
 800437a:	f1bb 0f00 	cmp.w	fp, #0
 800437e:	bf08      	it	eq
 8004380:	46b3      	moveq	fp, r6
 8004382:	2e10      	cmp	r6, #16
 8004384:	9308      	str	r3, [sp, #32]
 8004386:	4635      	mov	r5, r6
 8004388:	bfa8      	it	ge
 800438a:	2510      	movge	r5, #16
 800438c:	f7fc f8da 	bl	8000544 <__aeabi_ui2d>
 8004390:	2e09      	cmp	r6, #9
 8004392:	4680      	mov	r8, r0
 8004394:	4689      	mov	r9, r1
 8004396:	dd13      	ble.n	80043c0 <_strtod_l+0x3d8>
 8004398:	4b76      	ldr	r3, [pc, #472]	; (8004574 <_strtod_l+0x58c>)
 800439a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800439e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80043a2:	f7fc f949 	bl	8000638 <__aeabi_dmul>
 80043a6:	4680      	mov	r8, r0
 80043a8:	4650      	mov	r0, sl
 80043aa:	4689      	mov	r9, r1
 80043ac:	f7fc f8ca 	bl	8000544 <__aeabi_ui2d>
 80043b0:	4602      	mov	r2, r0
 80043b2:	460b      	mov	r3, r1
 80043b4:	4640      	mov	r0, r8
 80043b6:	4649      	mov	r1, r9
 80043b8:	f7fb ff88 	bl	80002cc <__adddf3>
 80043bc:	4680      	mov	r8, r0
 80043be:	4689      	mov	r9, r1
 80043c0:	2e0f      	cmp	r6, #15
 80043c2:	dc38      	bgt.n	8004436 <_strtod_l+0x44e>
 80043c4:	9b08      	ldr	r3, [sp, #32]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f43f ae49 	beq.w	800405e <_strtod_l+0x76>
 80043cc:	dd24      	ble.n	8004418 <_strtod_l+0x430>
 80043ce:	2b16      	cmp	r3, #22
 80043d0:	dc0b      	bgt.n	80043ea <_strtod_l+0x402>
 80043d2:	4968      	ldr	r1, [pc, #416]	; (8004574 <_strtod_l+0x58c>)
 80043d4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80043d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043dc:	4642      	mov	r2, r8
 80043de:	464b      	mov	r3, r9
 80043e0:	f7fc f92a 	bl	8000638 <__aeabi_dmul>
 80043e4:	4680      	mov	r8, r0
 80043e6:	4689      	mov	r9, r1
 80043e8:	e639      	b.n	800405e <_strtod_l+0x76>
 80043ea:	9a08      	ldr	r2, [sp, #32]
 80043ec:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80043f0:	4293      	cmp	r3, r2
 80043f2:	db20      	blt.n	8004436 <_strtod_l+0x44e>
 80043f4:	4c5f      	ldr	r4, [pc, #380]	; (8004574 <_strtod_l+0x58c>)
 80043f6:	f1c6 060f 	rsb	r6, r6, #15
 80043fa:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80043fe:	4642      	mov	r2, r8
 8004400:	464b      	mov	r3, r9
 8004402:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004406:	f7fc f917 	bl	8000638 <__aeabi_dmul>
 800440a:	9b08      	ldr	r3, [sp, #32]
 800440c:	1b9e      	subs	r6, r3, r6
 800440e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8004412:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004416:	e7e3      	b.n	80043e0 <_strtod_l+0x3f8>
 8004418:	9b08      	ldr	r3, [sp, #32]
 800441a:	3316      	adds	r3, #22
 800441c:	db0b      	blt.n	8004436 <_strtod_l+0x44e>
 800441e:	9b05      	ldr	r3, [sp, #20]
 8004420:	1bdf      	subs	r7, r3, r7
 8004422:	4b54      	ldr	r3, [pc, #336]	; (8004574 <_strtod_l+0x58c>)
 8004424:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004428:	e9d7 2300 	ldrd	r2, r3, [r7]
 800442c:	4640      	mov	r0, r8
 800442e:	4649      	mov	r1, r9
 8004430:	f7fc fa2c 	bl	800088c <__aeabi_ddiv>
 8004434:	e7d6      	b.n	80043e4 <_strtod_l+0x3fc>
 8004436:	9b08      	ldr	r3, [sp, #32]
 8004438:	1b75      	subs	r5, r6, r5
 800443a:	441d      	add	r5, r3
 800443c:	2d00      	cmp	r5, #0
 800443e:	dd70      	ble.n	8004522 <_strtod_l+0x53a>
 8004440:	f015 030f 	ands.w	r3, r5, #15
 8004444:	d00a      	beq.n	800445c <_strtod_l+0x474>
 8004446:	494b      	ldr	r1, [pc, #300]	; (8004574 <_strtod_l+0x58c>)
 8004448:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800444c:	4642      	mov	r2, r8
 800444e:	464b      	mov	r3, r9
 8004450:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004454:	f7fc f8f0 	bl	8000638 <__aeabi_dmul>
 8004458:	4680      	mov	r8, r0
 800445a:	4689      	mov	r9, r1
 800445c:	f035 050f 	bics.w	r5, r5, #15
 8004460:	d04d      	beq.n	80044fe <_strtod_l+0x516>
 8004462:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8004466:	dd22      	ble.n	80044ae <_strtod_l+0x4c6>
 8004468:	2500      	movs	r5, #0
 800446a:	46ab      	mov	fp, r5
 800446c:	9509      	str	r5, [sp, #36]	; 0x24
 800446e:	9505      	str	r5, [sp, #20]
 8004470:	2322      	movs	r3, #34	; 0x22
 8004472:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800457c <_strtod_l+0x594>
 8004476:	6023      	str	r3, [r4, #0]
 8004478:	f04f 0800 	mov.w	r8, #0
 800447c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800447e:	2b00      	cmp	r3, #0
 8004480:	f43f aded 	beq.w	800405e <_strtod_l+0x76>
 8004484:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004486:	4620      	mov	r0, r4
 8004488:	f002 fcde 	bl	8006e48 <_Bfree>
 800448c:	9905      	ldr	r1, [sp, #20]
 800448e:	4620      	mov	r0, r4
 8004490:	f002 fcda 	bl	8006e48 <_Bfree>
 8004494:	4659      	mov	r1, fp
 8004496:	4620      	mov	r0, r4
 8004498:	f002 fcd6 	bl	8006e48 <_Bfree>
 800449c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800449e:	4620      	mov	r0, r4
 80044a0:	f002 fcd2 	bl	8006e48 <_Bfree>
 80044a4:	4629      	mov	r1, r5
 80044a6:	4620      	mov	r0, r4
 80044a8:	f002 fcce 	bl	8006e48 <_Bfree>
 80044ac:	e5d7      	b.n	800405e <_strtod_l+0x76>
 80044ae:	4b32      	ldr	r3, [pc, #200]	; (8004578 <_strtod_l+0x590>)
 80044b0:	9304      	str	r3, [sp, #16]
 80044b2:	2300      	movs	r3, #0
 80044b4:	112d      	asrs	r5, r5, #4
 80044b6:	4640      	mov	r0, r8
 80044b8:	4649      	mov	r1, r9
 80044ba:	469a      	mov	sl, r3
 80044bc:	2d01      	cmp	r5, #1
 80044be:	dc21      	bgt.n	8004504 <_strtod_l+0x51c>
 80044c0:	b10b      	cbz	r3, 80044c6 <_strtod_l+0x4de>
 80044c2:	4680      	mov	r8, r0
 80044c4:	4689      	mov	r9, r1
 80044c6:	492c      	ldr	r1, [pc, #176]	; (8004578 <_strtod_l+0x590>)
 80044c8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80044cc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80044d0:	4642      	mov	r2, r8
 80044d2:	464b      	mov	r3, r9
 80044d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044d8:	f7fc f8ae 	bl	8000638 <__aeabi_dmul>
 80044dc:	4b27      	ldr	r3, [pc, #156]	; (800457c <_strtod_l+0x594>)
 80044de:	460a      	mov	r2, r1
 80044e0:	400b      	ands	r3, r1
 80044e2:	4927      	ldr	r1, [pc, #156]	; (8004580 <_strtod_l+0x598>)
 80044e4:	428b      	cmp	r3, r1
 80044e6:	4680      	mov	r8, r0
 80044e8:	d8be      	bhi.n	8004468 <_strtod_l+0x480>
 80044ea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80044ee:	428b      	cmp	r3, r1
 80044f0:	bf86      	itte	hi
 80044f2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8004584 <_strtod_l+0x59c>
 80044f6:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 80044fa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80044fe:	2300      	movs	r3, #0
 8004500:	9304      	str	r3, [sp, #16]
 8004502:	e07b      	b.n	80045fc <_strtod_l+0x614>
 8004504:	07ea      	lsls	r2, r5, #31
 8004506:	d505      	bpl.n	8004514 <_strtod_l+0x52c>
 8004508:	9b04      	ldr	r3, [sp, #16]
 800450a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450e:	f7fc f893 	bl	8000638 <__aeabi_dmul>
 8004512:	2301      	movs	r3, #1
 8004514:	9a04      	ldr	r2, [sp, #16]
 8004516:	3208      	adds	r2, #8
 8004518:	f10a 0a01 	add.w	sl, sl, #1
 800451c:	106d      	asrs	r5, r5, #1
 800451e:	9204      	str	r2, [sp, #16]
 8004520:	e7cc      	b.n	80044bc <_strtod_l+0x4d4>
 8004522:	d0ec      	beq.n	80044fe <_strtod_l+0x516>
 8004524:	426d      	negs	r5, r5
 8004526:	f015 020f 	ands.w	r2, r5, #15
 800452a:	d00a      	beq.n	8004542 <_strtod_l+0x55a>
 800452c:	4b11      	ldr	r3, [pc, #68]	; (8004574 <_strtod_l+0x58c>)
 800452e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004532:	4640      	mov	r0, r8
 8004534:	4649      	mov	r1, r9
 8004536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453a:	f7fc f9a7 	bl	800088c <__aeabi_ddiv>
 800453e:	4680      	mov	r8, r0
 8004540:	4689      	mov	r9, r1
 8004542:	112d      	asrs	r5, r5, #4
 8004544:	d0db      	beq.n	80044fe <_strtod_l+0x516>
 8004546:	2d1f      	cmp	r5, #31
 8004548:	dd1e      	ble.n	8004588 <_strtod_l+0x5a0>
 800454a:	2500      	movs	r5, #0
 800454c:	46ab      	mov	fp, r5
 800454e:	9509      	str	r5, [sp, #36]	; 0x24
 8004550:	9505      	str	r5, [sp, #20]
 8004552:	2322      	movs	r3, #34	; 0x22
 8004554:	f04f 0800 	mov.w	r8, #0
 8004558:	f04f 0900 	mov.w	r9, #0
 800455c:	6023      	str	r3, [r4, #0]
 800455e:	e78d      	b.n	800447c <_strtod_l+0x494>
 8004560:	08008345 	.word	0x08008345
 8004564:	08008388 	.word	0x08008388
 8004568:	0800833d 	.word	0x0800833d
 800456c:	080084d4 	.word	0x080084d4
 8004570:	0800877f 	.word	0x0800877f
 8004574:	08008670 	.word	0x08008670
 8004578:	08008648 	.word	0x08008648
 800457c:	7ff00000 	.word	0x7ff00000
 8004580:	7ca00000 	.word	0x7ca00000
 8004584:	7fefffff 	.word	0x7fefffff
 8004588:	f015 0310 	ands.w	r3, r5, #16
 800458c:	bf18      	it	ne
 800458e:	236a      	movne	r3, #106	; 0x6a
 8004590:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8004934 <_strtod_l+0x94c>
 8004594:	9304      	str	r3, [sp, #16]
 8004596:	4640      	mov	r0, r8
 8004598:	4649      	mov	r1, r9
 800459a:	2300      	movs	r3, #0
 800459c:	07ea      	lsls	r2, r5, #31
 800459e:	d504      	bpl.n	80045aa <_strtod_l+0x5c2>
 80045a0:	e9da 2300 	ldrd	r2, r3, [sl]
 80045a4:	f7fc f848 	bl	8000638 <__aeabi_dmul>
 80045a8:	2301      	movs	r3, #1
 80045aa:	106d      	asrs	r5, r5, #1
 80045ac:	f10a 0a08 	add.w	sl, sl, #8
 80045b0:	d1f4      	bne.n	800459c <_strtod_l+0x5b4>
 80045b2:	b10b      	cbz	r3, 80045b8 <_strtod_l+0x5d0>
 80045b4:	4680      	mov	r8, r0
 80045b6:	4689      	mov	r9, r1
 80045b8:	9b04      	ldr	r3, [sp, #16]
 80045ba:	b1bb      	cbz	r3, 80045ec <_strtod_l+0x604>
 80045bc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80045c0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	4649      	mov	r1, r9
 80045c8:	dd10      	ble.n	80045ec <_strtod_l+0x604>
 80045ca:	2b1f      	cmp	r3, #31
 80045cc:	f340 811e 	ble.w	800480c <_strtod_l+0x824>
 80045d0:	2b34      	cmp	r3, #52	; 0x34
 80045d2:	bfde      	ittt	le
 80045d4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80045d8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80045dc:	4093      	lslle	r3, r2
 80045de:	f04f 0800 	mov.w	r8, #0
 80045e2:	bfcc      	ite	gt
 80045e4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80045e8:	ea03 0901 	andle.w	r9, r3, r1
 80045ec:	2200      	movs	r2, #0
 80045ee:	2300      	movs	r3, #0
 80045f0:	4640      	mov	r0, r8
 80045f2:	4649      	mov	r1, r9
 80045f4:	f7fc fa88 	bl	8000b08 <__aeabi_dcmpeq>
 80045f8:	2800      	cmp	r0, #0
 80045fa:	d1a6      	bne.n	800454a <_strtod_l+0x562>
 80045fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004602:	4633      	mov	r3, r6
 8004604:	465a      	mov	r2, fp
 8004606:	4620      	mov	r0, r4
 8004608:	f002 fc86 	bl	8006f18 <__s2b>
 800460c:	9009      	str	r0, [sp, #36]	; 0x24
 800460e:	2800      	cmp	r0, #0
 8004610:	f43f af2a 	beq.w	8004468 <_strtod_l+0x480>
 8004614:	9a08      	ldr	r2, [sp, #32]
 8004616:	9b05      	ldr	r3, [sp, #20]
 8004618:	2a00      	cmp	r2, #0
 800461a:	eba3 0307 	sub.w	r3, r3, r7
 800461e:	bfa8      	it	ge
 8004620:	2300      	movge	r3, #0
 8004622:	930c      	str	r3, [sp, #48]	; 0x30
 8004624:	2500      	movs	r5, #0
 8004626:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800462a:	9312      	str	r3, [sp, #72]	; 0x48
 800462c:	46ab      	mov	fp, r5
 800462e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004630:	4620      	mov	r0, r4
 8004632:	6859      	ldr	r1, [r3, #4]
 8004634:	f002 fbc8 	bl	8006dc8 <_Balloc>
 8004638:	9005      	str	r0, [sp, #20]
 800463a:	2800      	cmp	r0, #0
 800463c:	f43f af18 	beq.w	8004470 <_strtod_l+0x488>
 8004640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004642:	691a      	ldr	r2, [r3, #16]
 8004644:	3202      	adds	r2, #2
 8004646:	f103 010c 	add.w	r1, r3, #12
 800464a:	0092      	lsls	r2, r2, #2
 800464c:	300c      	adds	r0, #12
 800464e:	f000 fbc0 	bl	8004dd2 <memcpy>
 8004652:	ec49 8b10 	vmov	d0, r8, r9
 8004656:	aa18      	add	r2, sp, #96	; 0x60
 8004658:	a917      	add	r1, sp, #92	; 0x5c
 800465a:	4620      	mov	r0, r4
 800465c:	f002 ff90 	bl	8007580 <__d2b>
 8004660:	ec49 8b18 	vmov	d8, r8, r9
 8004664:	9016      	str	r0, [sp, #88]	; 0x58
 8004666:	2800      	cmp	r0, #0
 8004668:	f43f af02 	beq.w	8004470 <_strtod_l+0x488>
 800466c:	2101      	movs	r1, #1
 800466e:	4620      	mov	r0, r4
 8004670:	f002 fcea 	bl	8007048 <__i2b>
 8004674:	4683      	mov	fp, r0
 8004676:	2800      	cmp	r0, #0
 8004678:	f43f aefa 	beq.w	8004470 <_strtod_l+0x488>
 800467c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800467e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004680:	2e00      	cmp	r6, #0
 8004682:	bfab      	itete	ge
 8004684:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8004686:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8004688:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800468a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800468e:	bfac      	ite	ge
 8004690:	eb06 0a03 	addge.w	sl, r6, r3
 8004694:	1b9f      	sublt	r7, r3, r6
 8004696:	9b04      	ldr	r3, [sp, #16]
 8004698:	1af6      	subs	r6, r6, r3
 800469a:	4416      	add	r6, r2
 800469c:	4ba0      	ldr	r3, [pc, #640]	; (8004920 <_strtod_l+0x938>)
 800469e:	3e01      	subs	r6, #1
 80046a0:	429e      	cmp	r6, r3
 80046a2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80046a6:	f280 80c4 	bge.w	8004832 <_strtod_l+0x84a>
 80046aa:	1b9b      	subs	r3, r3, r6
 80046ac:	2b1f      	cmp	r3, #31
 80046ae:	eba2 0203 	sub.w	r2, r2, r3
 80046b2:	f04f 0101 	mov.w	r1, #1
 80046b6:	f300 80b0 	bgt.w	800481a <_strtod_l+0x832>
 80046ba:	fa01 f303 	lsl.w	r3, r1, r3
 80046be:	930e      	str	r3, [sp, #56]	; 0x38
 80046c0:	2300      	movs	r3, #0
 80046c2:	930d      	str	r3, [sp, #52]	; 0x34
 80046c4:	eb0a 0602 	add.w	r6, sl, r2
 80046c8:	9b04      	ldr	r3, [sp, #16]
 80046ca:	45b2      	cmp	sl, r6
 80046cc:	4417      	add	r7, r2
 80046ce:	441f      	add	r7, r3
 80046d0:	4653      	mov	r3, sl
 80046d2:	bfa8      	it	ge
 80046d4:	4633      	movge	r3, r6
 80046d6:	42bb      	cmp	r3, r7
 80046d8:	bfa8      	it	ge
 80046da:	463b      	movge	r3, r7
 80046dc:	2b00      	cmp	r3, #0
 80046de:	bfc2      	ittt	gt
 80046e0:	1af6      	subgt	r6, r6, r3
 80046e2:	1aff      	subgt	r7, r7, r3
 80046e4:	ebaa 0a03 	subgt.w	sl, sl, r3
 80046e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	dd17      	ble.n	800471e <_strtod_l+0x736>
 80046ee:	4659      	mov	r1, fp
 80046f0:	461a      	mov	r2, r3
 80046f2:	4620      	mov	r0, r4
 80046f4:	f002 fd68 	bl	80071c8 <__pow5mult>
 80046f8:	4683      	mov	fp, r0
 80046fa:	2800      	cmp	r0, #0
 80046fc:	f43f aeb8 	beq.w	8004470 <_strtod_l+0x488>
 8004700:	4601      	mov	r1, r0
 8004702:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004704:	4620      	mov	r0, r4
 8004706:	f002 fcb5 	bl	8007074 <__multiply>
 800470a:	900b      	str	r0, [sp, #44]	; 0x2c
 800470c:	2800      	cmp	r0, #0
 800470e:	f43f aeaf 	beq.w	8004470 <_strtod_l+0x488>
 8004712:	9916      	ldr	r1, [sp, #88]	; 0x58
 8004714:	4620      	mov	r0, r4
 8004716:	f002 fb97 	bl	8006e48 <_Bfree>
 800471a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800471c:	9316      	str	r3, [sp, #88]	; 0x58
 800471e:	2e00      	cmp	r6, #0
 8004720:	f300 808c 	bgt.w	800483c <_strtod_l+0x854>
 8004724:	9b08      	ldr	r3, [sp, #32]
 8004726:	2b00      	cmp	r3, #0
 8004728:	dd08      	ble.n	800473c <_strtod_l+0x754>
 800472a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800472c:	9905      	ldr	r1, [sp, #20]
 800472e:	4620      	mov	r0, r4
 8004730:	f002 fd4a 	bl	80071c8 <__pow5mult>
 8004734:	9005      	str	r0, [sp, #20]
 8004736:	2800      	cmp	r0, #0
 8004738:	f43f ae9a 	beq.w	8004470 <_strtod_l+0x488>
 800473c:	2f00      	cmp	r7, #0
 800473e:	dd08      	ble.n	8004752 <_strtod_l+0x76a>
 8004740:	9905      	ldr	r1, [sp, #20]
 8004742:	463a      	mov	r2, r7
 8004744:	4620      	mov	r0, r4
 8004746:	f002 fd99 	bl	800727c <__lshift>
 800474a:	9005      	str	r0, [sp, #20]
 800474c:	2800      	cmp	r0, #0
 800474e:	f43f ae8f 	beq.w	8004470 <_strtod_l+0x488>
 8004752:	f1ba 0f00 	cmp.w	sl, #0
 8004756:	dd08      	ble.n	800476a <_strtod_l+0x782>
 8004758:	4659      	mov	r1, fp
 800475a:	4652      	mov	r2, sl
 800475c:	4620      	mov	r0, r4
 800475e:	f002 fd8d 	bl	800727c <__lshift>
 8004762:	4683      	mov	fp, r0
 8004764:	2800      	cmp	r0, #0
 8004766:	f43f ae83 	beq.w	8004470 <_strtod_l+0x488>
 800476a:	9a05      	ldr	r2, [sp, #20]
 800476c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800476e:	4620      	mov	r0, r4
 8004770:	f002 fe0c 	bl	800738c <__mdiff>
 8004774:	4605      	mov	r5, r0
 8004776:	2800      	cmp	r0, #0
 8004778:	f43f ae7a 	beq.w	8004470 <_strtod_l+0x488>
 800477c:	68c3      	ldr	r3, [r0, #12]
 800477e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004780:	2300      	movs	r3, #0
 8004782:	60c3      	str	r3, [r0, #12]
 8004784:	4659      	mov	r1, fp
 8004786:	f002 fde5 	bl	8007354 <__mcmp>
 800478a:	2800      	cmp	r0, #0
 800478c:	da60      	bge.n	8004850 <_strtod_l+0x868>
 800478e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004790:	ea53 0308 	orrs.w	r3, r3, r8
 8004794:	f040 8084 	bne.w	80048a0 <_strtod_l+0x8b8>
 8004798:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800479c:	2b00      	cmp	r3, #0
 800479e:	d17f      	bne.n	80048a0 <_strtod_l+0x8b8>
 80047a0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80047a4:	0d1b      	lsrs	r3, r3, #20
 80047a6:	051b      	lsls	r3, r3, #20
 80047a8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80047ac:	d978      	bls.n	80048a0 <_strtod_l+0x8b8>
 80047ae:	696b      	ldr	r3, [r5, #20]
 80047b0:	b913      	cbnz	r3, 80047b8 <_strtod_l+0x7d0>
 80047b2:	692b      	ldr	r3, [r5, #16]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	dd73      	ble.n	80048a0 <_strtod_l+0x8b8>
 80047b8:	4629      	mov	r1, r5
 80047ba:	2201      	movs	r2, #1
 80047bc:	4620      	mov	r0, r4
 80047be:	f002 fd5d 	bl	800727c <__lshift>
 80047c2:	4659      	mov	r1, fp
 80047c4:	4605      	mov	r5, r0
 80047c6:	f002 fdc5 	bl	8007354 <__mcmp>
 80047ca:	2800      	cmp	r0, #0
 80047cc:	dd68      	ble.n	80048a0 <_strtod_l+0x8b8>
 80047ce:	9904      	ldr	r1, [sp, #16]
 80047d0:	4a54      	ldr	r2, [pc, #336]	; (8004924 <_strtod_l+0x93c>)
 80047d2:	464b      	mov	r3, r9
 80047d4:	2900      	cmp	r1, #0
 80047d6:	f000 8084 	beq.w	80048e2 <_strtod_l+0x8fa>
 80047da:	ea02 0109 	and.w	r1, r2, r9
 80047de:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80047e2:	dc7e      	bgt.n	80048e2 <_strtod_l+0x8fa>
 80047e4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80047e8:	f77f aeb3 	ble.w	8004552 <_strtod_l+0x56a>
 80047ec:	4b4e      	ldr	r3, [pc, #312]	; (8004928 <_strtod_l+0x940>)
 80047ee:	4640      	mov	r0, r8
 80047f0:	4649      	mov	r1, r9
 80047f2:	2200      	movs	r2, #0
 80047f4:	f7fb ff20 	bl	8000638 <__aeabi_dmul>
 80047f8:	4b4a      	ldr	r3, [pc, #296]	; (8004924 <_strtod_l+0x93c>)
 80047fa:	400b      	ands	r3, r1
 80047fc:	4680      	mov	r8, r0
 80047fe:	4689      	mov	r9, r1
 8004800:	2b00      	cmp	r3, #0
 8004802:	f47f ae3f 	bne.w	8004484 <_strtod_l+0x49c>
 8004806:	2322      	movs	r3, #34	; 0x22
 8004808:	6023      	str	r3, [r4, #0]
 800480a:	e63b      	b.n	8004484 <_strtod_l+0x49c>
 800480c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004810:	fa02 f303 	lsl.w	r3, r2, r3
 8004814:	ea03 0808 	and.w	r8, r3, r8
 8004818:	e6e8      	b.n	80045ec <_strtod_l+0x604>
 800481a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800481e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8004822:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8004826:	36e2      	adds	r6, #226	; 0xe2
 8004828:	fa01 f306 	lsl.w	r3, r1, r6
 800482c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8004830:	e748      	b.n	80046c4 <_strtod_l+0x6dc>
 8004832:	2100      	movs	r1, #0
 8004834:	2301      	movs	r3, #1
 8004836:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800483a:	e743      	b.n	80046c4 <_strtod_l+0x6dc>
 800483c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800483e:	4632      	mov	r2, r6
 8004840:	4620      	mov	r0, r4
 8004842:	f002 fd1b 	bl	800727c <__lshift>
 8004846:	9016      	str	r0, [sp, #88]	; 0x58
 8004848:	2800      	cmp	r0, #0
 800484a:	f47f af6b 	bne.w	8004724 <_strtod_l+0x73c>
 800484e:	e60f      	b.n	8004470 <_strtod_l+0x488>
 8004850:	46ca      	mov	sl, r9
 8004852:	d171      	bne.n	8004938 <_strtod_l+0x950>
 8004854:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004856:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800485a:	b352      	cbz	r2, 80048b2 <_strtod_l+0x8ca>
 800485c:	4a33      	ldr	r2, [pc, #204]	; (800492c <_strtod_l+0x944>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d12a      	bne.n	80048b8 <_strtod_l+0x8d0>
 8004862:	9b04      	ldr	r3, [sp, #16]
 8004864:	4641      	mov	r1, r8
 8004866:	b1fb      	cbz	r3, 80048a8 <_strtod_l+0x8c0>
 8004868:	4b2e      	ldr	r3, [pc, #184]	; (8004924 <_strtod_l+0x93c>)
 800486a:	ea09 0303 	and.w	r3, r9, r3
 800486e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004872:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004876:	d81a      	bhi.n	80048ae <_strtod_l+0x8c6>
 8004878:	0d1b      	lsrs	r3, r3, #20
 800487a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800487e:	fa02 f303 	lsl.w	r3, r2, r3
 8004882:	4299      	cmp	r1, r3
 8004884:	d118      	bne.n	80048b8 <_strtod_l+0x8d0>
 8004886:	4b2a      	ldr	r3, [pc, #168]	; (8004930 <_strtod_l+0x948>)
 8004888:	459a      	cmp	sl, r3
 800488a:	d102      	bne.n	8004892 <_strtod_l+0x8aa>
 800488c:	3101      	adds	r1, #1
 800488e:	f43f adef 	beq.w	8004470 <_strtod_l+0x488>
 8004892:	4b24      	ldr	r3, [pc, #144]	; (8004924 <_strtod_l+0x93c>)
 8004894:	ea0a 0303 	and.w	r3, sl, r3
 8004898:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800489c:	f04f 0800 	mov.w	r8, #0
 80048a0:	9b04      	ldr	r3, [sp, #16]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1a2      	bne.n	80047ec <_strtod_l+0x804>
 80048a6:	e5ed      	b.n	8004484 <_strtod_l+0x49c>
 80048a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048ac:	e7e9      	b.n	8004882 <_strtod_l+0x89a>
 80048ae:	4613      	mov	r3, r2
 80048b0:	e7e7      	b.n	8004882 <_strtod_l+0x89a>
 80048b2:	ea53 0308 	orrs.w	r3, r3, r8
 80048b6:	d08a      	beq.n	80047ce <_strtod_l+0x7e6>
 80048b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048ba:	b1e3      	cbz	r3, 80048f6 <_strtod_l+0x90e>
 80048bc:	ea13 0f0a 	tst.w	r3, sl
 80048c0:	d0ee      	beq.n	80048a0 <_strtod_l+0x8b8>
 80048c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048c4:	9a04      	ldr	r2, [sp, #16]
 80048c6:	4640      	mov	r0, r8
 80048c8:	4649      	mov	r1, r9
 80048ca:	b1c3      	cbz	r3, 80048fe <_strtod_l+0x916>
 80048cc:	f7ff fb6e 	bl	8003fac <sulp>
 80048d0:	4602      	mov	r2, r0
 80048d2:	460b      	mov	r3, r1
 80048d4:	ec51 0b18 	vmov	r0, r1, d8
 80048d8:	f7fb fcf8 	bl	80002cc <__adddf3>
 80048dc:	4680      	mov	r8, r0
 80048de:	4689      	mov	r9, r1
 80048e0:	e7de      	b.n	80048a0 <_strtod_l+0x8b8>
 80048e2:	4013      	ands	r3, r2
 80048e4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80048e8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80048ec:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80048f0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80048f4:	e7d4      	b.n	80048a0 <_strtod_l+0x8b8>
 80048f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048f8:	ea13 0f08 	tst.w	r3, r8
 80048fc:	e7e0      	b.n	80048c0 <_strtod_l+0x8d8>
 80048fe:	f7ff fb55 	bl	8003fac <sulp>
 8004902:	4602      	mov	r2, r0
 8004904:	460b      	mov	r3, r1
 8004906:	ec51 0b18 	vmov	r0, r1, d8
 800490a:	f7fb fcdd 	bl	80002c8 <__aeabi_dsub>
 800490e:	2200      	movs	r2, #0
 8004910:	2300      	movs	r3, #0
 8004912:	4680      	mov	r8, r0
 8004914:	4689      	mov	r9, r1
 8004916:	f7fc f8f7 	bl	8000b08 <__aeabi_dcmpeq>
 800491a:	2800      	cmp	r0, #0
 800491c:	d0c0      	beq.n	80048a0 <_strtod_l+0x8b8>
 800491e:	e618      	b.n	8004552 <_strtod_l+0x56a>
 8004920:	fffffc02 	.word	0xfffffc02
 8004924:	7ff00000 	.word	0x7ff00000
 8004928:	39500000 	.word	0x39500000
 800492c:	000fffff 	.word	0x000fffff
 8004930:	7fefffff 	.word	0x7fefffff
 8004934:	080083a0 	.word	0x080083a0
 8004938:	4659      	mov	r1, fp
 800493a:	4628      	mov	r0, r5
 800493c:	f002 fe7a 	bl	8007634 <__ratio>
 8004940:	ec57 6b10 	vmov	r6, r7, d0
 8004944:	ee10 0a10 	vmov	r0, s0
 8004948:	2200      	movs	r2, #0
 800494a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800494e:	4639      	mov	r1, r7
 8004950:	f7fc f8ee 	bl	8000b30 <__aeabi_dcmple>
 8004954:	2800      	cmp	r0, #0
 8004956:	d071      	beq.n	8004a3c <_strtod_l+0xa54>
 8004958:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800495a:	2b00      	cmp	r3, #0
 800495c:	d17c      	bne.n	8004a58 <_strtod_l+0xa70>
 800495e:	f1b8 0f00 	cmp.w	r8, #0
 8004962:	d15a      	bne.n	8004a1a <_strtod_l+0xa32>
 8004964:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004968:	2b00      	cmp	r3, #0
 800496a:	d15d      	bne.n	8004a28 <_strtod_l+0xa40>
 800496c:	4b90      	ldr	r3, [pc, #576]	; (8004bb0 <_strtod_l+0xbc8>)
 800496e:	2200      	movs	r2, #0
 8004970:	4630      	mov	r0, r6
 8004972:	4639      	mov	r1, r7
 8004974:	f7fc f8d2 	bl	8000b1c <__aeabi_dcmplt>
 8004978:	2800      	cmp	r0, #0
 800497a:	d15c      	bne.n	8004a36 <_strtod_l+0xa4e>
 800497c:	4630      	mov	r0, r6
 800497e:	4639      	mov	r1, r7
 8004980:	4b8c      	ldr	r3, [pc, #560]	; (8004bb4 <_strtod_l+0xbcc>)
 8004982:	2200      	movs	r2, #0
 8004984:	f7fb fe58 	bl	8000638 <__aeabi_dmul>
 8004988:	4606      	mov	r6, r0
 800498a:	460f      	mov	r7, r1
 800498c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8004990:	9606      	str	r6, [sp, #24]
 8004992:	9307      	str	r3, [sp, #28]
 8004994:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004998:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800499c:	4b86      	ldr	r3, [pc, #536]	; (8004bb8 <_strtod_l+0xbd0>)
 800499e:	ea0a 0303 	and.w	r3, sl, r3
 80049a2:	930d      	str	r3, [sp, #52]	; 0x34
 80049a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80049a6:	4b85      	ldr	r3, [pc, #532]	; (8004bbc <_strtod_l+0xbd4>)
 80049a8:	429a      	cmp	r2, r3
 80049aa:	f040 8090 	bne.w	8004ace <_strtod_l+0xae6>
 80049ae:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80049b2:	ec49 8b10 	vmov	d0, r8, r9
 80049b6:	f002 fd73 	bl	80074a0 <__ulp>
 80049ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80049be:	ec51 0b10 	vmov	r0, r1, d0
 80049c2:	f7fb fe39 	bl	8000638 <__aeabi_dmul>
 80049c6:	4642      	mov	r2, r8
 80049c8:	464b      	mov	r3, r9
 80049ca:	f7fb fc7f 	bl	80002cc <__adddf3>
 80049ce:	460b      	mov	r3, r1
 80049d0:	4979      	ldr	r1, [pc, #484]	; (8004bb8 <_strtod_l+0xbd0>)
 80049d2:	4a7b      	ldr	r2, [pc, #492]	; (8004bc0 <_strtod_l+0xbd8>)
 80049d4:	4019      	ands	r1, r3
 80049d6:	4291      	cmp	r1, r2
 80049d8:	4680      	mov	r8, r0
 80049da:	d944      	bls.n	8004a66 <_strtod_l+0xa7e>
 80049dc:	ee18 2a90 	vmov	r2, s17
 80049e0:	4b78      	ldr	r3, [pc, #480]	; (8004bc4 <_strtod_l+0xbdc>)
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d104      	bne.n	80049f0 <_strtod_l+0xa08>
 80049e6:	ee18 3a10 	vmov	r3, s16
 80049ea:	3301      	adds	r3, #1
 80049ec:	f43f ad40 	beq.w	8004470 <_strtod_l+0x488>
 80049f0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8004bc4 <_strtod_l+0xbdc>
 80049f4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80049f8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80049fa:	4620      	mov	r0, r4
 80049fc:	f002 fa24 	bl	8006e48 <_Bfree>
 8004a00:	9905      	ldr	r1, [sp, #20]
 8004a02:	4620      	mov	r0, r4
 8004a04:	f002 fa20 	bl	8006e48 <_Bfree>
 8004a08:	4659      	mov	r1, fp
 8004a0a:	4620      	mov	r0, r4
 8004a0c:	f002 fa1c 	bl	8006e48 <_Bfree>
 8004a10:	4629      	mov	r1, r5
 8004a12:	4620      	mov	r0, r4
 8004a14:	f002 fa18 	bl	8006e48 <_Bfree>
 8004a18:	e609      	b.n	800462e <_strtod_l+0x646>
 8004a1a:	f1b8 0f01 	cmp.w	r8, #1
 8004a1e:	d103      	bne.n	8004a28 <_strtod_l+0xa40>
 8004a20:	f1b9 0f00 	cmp.w	r9, #0
 8004a24:	f43f ad95 	beq.w	8004552 <_strtod_l+0x56a>
 8004a28:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8004b80 <_strtod_l+0xb98>
 8004a2c:	4f60      	ldr	r7, [pc, #384]	; (8004bb0 <_strtod_l+0xbc8>)
 8004a2e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004a32:	2600      	movs	r6, #0
 8004a34:	e7ae      	b.n	8004994 <_strtod_l+0x9ac>
 8004a36:	4f5f      	ldr	r7, [pc, #380]	; (8004bb4 <_strtod_l+0xbcc>)
 8004a38:	2600      	movs	r6, #0
 8004a3a:	e7a7      	b.n	800498c <_strtod_l+0x9a4>
 8004a3c:	4b5d      	ldr	r3, [pc, #372]	; (8004bb4 <_strtod_l+0xbcc>)
 8004a3e:	4630      	mov	r0, r6
 8004a40:	4639      	mov	r1, r7
 8004a42:	2200      	movs	r2, #0
 8004a44:	f7fb fdf8 	bl	8000638 <__aeabi_dmul>
 8004a48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a4a:	4606      	mov	r6, r0
 8004a4c:	460f      	mov	r7, r1
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d09c      	beq.n	800498c <_strtod_l+0x9a4>
 8004a52:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8004a56:	e79d      	b.n	8004994 <_strtod_l+0x9ac>
 8004a58:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8004b88 <_strtod_l+0xba0>
 8004a5c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004a60:	ec57 6b17 	vmov	r6, r7, d7
 8004a64:	e796      	b.n	8004994 <_strtod_l+0x9ac>
 8004a66:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8004a6a:	9b04      	ldr	r3, [sp, #16]
 8004a6c:	46ca      	mov	sl, r9
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1c2      	bne.n	80049f8 <_strtod_l+0xa10>
 8004a72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004a76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004a78:	0d1b      	lsrs	r3, r3, #20
 8004a7a:	051b      	lsls	r3, r3, #20
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d1bb      	bne.n	80049f8 <_strtod_l+0xa10>
 8004a80:	4630      	mov	r0, r6
 8004a82:	4639      	mov	r1, r7
 8004a84:	f7fc f938 	bl	8000cf8 <__aeabi_d2lz>
 8004a88:	f7fb fda8 	bl	80005dc <__aeabi_l2d>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4630      	mov	r0, r6
 8004a92:	4639      	mov	r1, r7
 8004a94:	f7fb fc18 	bl	80002c8 <__aeabi_dsub>
 8004a98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004a9a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004a9e:	ea43 0308 	orr.w	r3, r3, r8
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	4606      	mov	r6, r0
 8004aa6:	460f      	mov	r7, r1
 8004aa8:	d054      	beq.n	8004b54 <_strtod_l+0xb6c>
 8004aaa:	a339      	add	r3, pc, #228	; (adr r3, 8004b90 <_strtod_l+0xba8>)
 8004aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab0:	f7fc f834 	bl	8000b1c <__aeabi_dcmplt>
 8004ab4:	2800      	cmp	r0, #0
 8004ab6:	f47f ace5 	bne.w	8004484 <_strtod_l+0x49c>
 8004aba:	a337      	add	r3, pc, #220	; (adr r3, 8004b98 <_strtod_l+0xbb0>)
 8004abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac0:	4630      	mov	r0, r6
 8004ac2:	4639      	mov	r1, r7
 8004ac4:	f7fc f848 	bl	8000b58 <__aeabi_dcmpgt>
 8004ac8:	2800      	cmp	r0, #0
 8004aca:	d095      	beq.n	80049f8 <_strtod_l+0xa10>
 8004acc:	e4da      	b.n	8004484 <_strtod_l+0x49c>
 8004ace:	9b04      	ldr	r3, [sp, #16]
 8004ad0:	b333      	cbz	r3, 8004b20 <_strtod_l+0xb38>
 8004ad2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ad4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004ad8:	d822      	bhi.n	8004b20 <_strtod_l+0xb38>
 8004ada:	a331      	add	r3, pc, #196	; (adr r3, 8004ba0 <_strtod_l+0xbb8>)
 8004adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae0:	4630      	mov	r0, r6
 8004ae2:	4639      	mov	r1, r7
 8004ae4:	f7fc f824 	bl	8000b30 <__aeabi_dcmple>
 8004ae8:	b1a0      	cbz	r0, 8004b14 <_strtod_l+0xb2c>
 8004aea:	4639      	mov	r1, r7
 8004aec:	4630      	mov	r0, r6
 8004aee:	f7fc f87b 	bl	8000be8 <__aeabi_d2uiz>
 8004af2:	2801      	cmp	r0, #1
 8004af4:	bf38      	it	cc
 8004af6:	2001      	movcc	r0, #1
 8004af8:	f7fb fd24 	bl	8000544 <__aeabi_ui2d>
 8004afc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004afe:	4606      	mov	r6, r0
 8004b00:	460f      	mov	r7, r1
 8004b02:	bb23      	cbnz	r3, 8004b4e <_strtod_l+0xb66>
 8004b04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004b08:	9010      	str	r0, [sp, #64]	; 0x40
 8004b0a:	9311      	str	r3, [sp, #68]	; 0x44
 8004b0c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004b10:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004b14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004b18:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8004b1c:	1a9b      	subs	r3, r3, r2
 8004b1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b20:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004b24:	eeb0 0a48 	vmov.f32	s0, s16
 8004b28:	eef0 0a68 	vmov.f32	s1, s17
 8004b2c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8004b30:	f002 fcb6 	bl	80074a0 <__ulp>
 8004b34:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004b38:	ec53 2b10 	vmov	r2, r3, d0
 8004b3c:	f7fb fd7c 	bl	8000638 <__aeabi_dmul>
 8004b40:	ec53 2b18 	vmov	r2, r3, d8
 8004b44:	f7fb fbc2 	bl	80002cc <__adddf3>
 8004b48:	4680      	mov	r8, r0
 8004b4a:	4689      	mov	r9, r1
 8004b4c:	e78d      	b.n	8004a6a <_strtod_l+0xa82>
 8004b4e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8004b52:	e7db      	b.n	8004b0c <_strtod_l+0xb24>
 8004b54:	a314      	add	r3, pc, #80	; (adr r3, 8004ba8 <_strtod_l+0xbc0>)
 8004b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5a:	f7fb ffdf 	bl	8000b1c <__aeabi_dcmplt>
 8004b5e:	e7b3      	b.n	8004ac8 <_strtod_l+0xae0>
 8004b60:	2300      	movs	r3, #0
 8004b62:	930a      	str	r3, [sp, #40]	; 0x28
 8004b64:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004b66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004b68:	6013      	str	r3, [r2, #0]
 8004b6a:	f7ff ba7c 	b.w	8004066 <_strtod_l+0x7e>
 8004b6e:	2a65      	cmp	r2, #101	; 0x65
 8004b70:	f43f ab75 	beq.w	800425e <_strtod_l+0x276>
 8004b74:	2a45      	cmp	r2, #69	; 0x45
 8004b76:	f43f ab72 	beq.w	800425e <_strtod_l+0x276>
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	f7ff bbaa 	b.w	80042d4 <_strtod_l+0x2ec>
 8004b80:	00000000 	.word	0x00000000
 8004b84:	bff00000 	.word	0xbff00000
 8004b88:	00000000 	.word	0x00000000
 8004b8c:	3ff00000 	.word	0x3ff00000
 8004b90:	94a03595 	.word	0x94a03595
 8004b94:	3fdfffff 	.word	0x3fdfffff
 8004b98:	35afe535 	.word	0x35afe535
 8004b9c:	3fe00000 	.word	0x3fe00000
 8004ba0:	ffc00000 	.word	0xffc00000
 8004ba4:	41dfffff 	.word	0x41dfffff
 8004ba8:	94a03595 	.word	0x94a03595
 8004bac:	3fcfffff 	.word	0x3fcfffff
 8004bb0:	3ff00000 	.word	0x3ff00000
 8004bb4:	3fe00000 	.word	0x3fe00000
 8004bb8:	7ff00000 	.word	0x7ff00000
 8004bbc:	7fe00000 	.word	0x7fe00000
 8004bc0:	7c9fffff 	.word	0x7c9fffff
 8004bc4:	7fefffff 	.word	0x7fefffff

08004bc8 <_strtod_r>:
 8004bc8:	4b01      	ldr	r3, [pc, #4]	; (8004bd0 <_strtod_r+0x8>)
 8004bca:	f7ff ba0d 	b.w	8003fe8 <_strtod_l>
 8004bce:	bf00      	nop
 8004bd0:	20000018 	.word	0x20000018

08004bd4 <_strtol_l.constprop.0>:
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bda:	d001      	beq.n	8004be0 <_strtol_l.constprop.0+0xc>
 8004bdc:	2b24      	cmp	r3, #36	; 0x24
 8004bde:	d906      	bls.n	8004bee <_strtol_l.constprop.0+0x1a>
 8004be0:	f000 f8ca 	bl	8004d78 <__errno>
 8004be4:	2316      	movs	r3, #22
 8004be6:	6003      	str	r3, [r0, #0]
 8004be8:	2000      	movs	r0, #0
 8004bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004cd4 <_strtol_l.constprop.0+0x100>
 8004bf2:	460d      	mov	r5, r1
 8004bf4:	462e      	mov	r6, r5
 8004bf6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004bfa:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8004bfe:	f017 0708 	ands.w	r7, r7, #8
 8004c02:	d1f7      	bne.n	8004bf4 <_strtol_l.constprop.0+0x20>
 8004c04:	2c2d      	cmp	r4, #45	; 0x2d
 8004c06:	d132      	bne.n	8004c6e <_strtol_l.constprop.0+0x9a>
 8004c08:	782c      	ldrb	r4, [r5, #0]
 8004c0a:	2701      	movs	r7, #1
 8004c0c:	1cb5      	adds	r5, r6, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d05b      	beq.n	8004cca <_strtol_l.constprop.0+0xf6>
 8004c12:	2b10      	cmp	r3, #16
 8004c14:	d109      	bne.n	8004c2a <_strtol_l.constprop.0+0x56>
 8004c16:	2c30      	cmp	r4, #48	; 0x30
 8004c18:	d107      	bne.n	8004c2a <_strtol_l.constprop.0+0x56>
 8004c1a:	782c      	ldrb	r4, [r5, #0]
 8004c1c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004c20:	2c58      	cmp	r4, #88	; 0x58
 8004c22:	d14d      	bne.n	8004cc0 <_strtol_l.constprop.0+0xec>
 8004c24:	786c      	ldrb	r4, [r5, #1]
 8004c26:	2310      	movs	r3, #16
 8004c28:	3502      	adds	r5, #2
 8004c2a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004c2e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004c32:	f04f 0e00 	mov.w	lr, #0
 8004c36:	fbb8 f9f3 	udiv	r9, r8, r3
 8004c3a:	4676      	mov	r6, lr
 8004c3c:	fb03 8a19 	mls	sl, r3, r9, r8
 8004c40:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004c44:	f1bc 0f09 	cmp.w	ip, #9
 8004c48:	d816      	bhi.n	8004c78 <_strtol_l.constprop.0+0xa4>
 8004c4a:	4664      	mov	r4, ip
 8004c4c:	42a3      	cmp	r3, r4
 8004c4e:	dd24      	ble.n	8004c9a <_strtol_l.constprop.0+0xc6>
 8004c50:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8004c54:	d008      	beq.n	8004c68 <_strtol_l.constprop.0+0x94>
 8004c56:	45b1      	cmp	r9, r6
 8004c58:	d31c      	bcc.n	8004c94 <_strtol_l.constprop.0+0xc0>
 8004c5a:	d101      	bne.n	8004c60 <_strtol_l.constprop.0+0x8c>
 8004c5c:	45a2      	cmp	sl, r4
 8004c5e:	db19      	blt.n	8004c94 <_strtol_l.constprop.0+0xc0>
 8004c60:	fb06 4603 	mla	r6, r6, r3, r4
 8004c64:	f04f 0e01 	mov.w	lr, #1
 8004c68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004c6c:	e7e8      	b.n	8004c40 <_strtol_l.constprop.0+0x6c>
 8004c6e:	2c2b      	cmp	r4, #43	; 0x2b
 8004c70:	bf04      	itt	eq
 8004c72:	782c      	ldrbeq	r4, [r5, #0]
 8004c74:	1cb5      	addeq	r5, r6, #2
 8004c76:	e7ca      	b.n	8004c0e <_strtol_l.constprop.0+0x3a>
 8004c78:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004c7c:	f1bc 0f19 	cmp.w	ip, #25
 8004c80:	d801      	bhi.n	8004c86 <_strtol_l.constprop.0+0xb2>
 8004c82:	3c37      	subs	r4, #55	; 0x37
 8004c84:	e7e2      	b.n	8004c4c <_strtol_l.constprop.0+0x78>
 8004c86:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004c8a:	f1bc 0f19 	cmp.w	ip, #25
 8004c8e:	d804      	bhi.n	8004c9a <_strtol_l.constprop.0+0xc6>
 8004c90:	3c57      	subs	r4, #87	; 0x57
 8004c92:	e7db      	b.n	8004c4c <_strtol_l.constprop.0+0x78>
 8004c94:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8004c98:	e7e6      	b.n	8004c68 <_strtol_l.constprop.0+0x94>
 8004c9a:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8004c9e:	d105      	bne.n	8004cac <_strtol_l.constprop.0+0xd8>
 8004ca0:	2322      	movs	r3, #34	; 0x22
 8004ca2:	6003      	str	r3, [r0, #0]
 8004ca4:	4646      	mov	r6, r8
 8004ca6:	b942      	cbnz	r2, 8004cba <_strtol_l.constprop.0+0xe6>
 8004ca8:	4630      	mov	r0, r6
 8004caa:	e79e      	b.n	8004bea <_strtol_l.constprop.0+0x16>
 8004cac:	b107      	cbz	r7, 8004cb0 <_strtol_l.constprop.0+0xdc>
 8004cae:	4276      	negs	r6, r6
 8004cb0:	2a00      	cmp	r2, #0
 8004cb2:	d0f9      	beq.n	8004ca8 <_strtol_l.constprop.0+0xd4>
 8004cb4:	f1be 0f00 	cmp.w	lr, #0
 8004cb8:	d000      	beq.n	8004cbc <_strtol_l.constprop.0+0xe8>
 8004cba:	1e69      	subs	r1, r5, #1
 8004cbc:	6011      	str	r1, [r2, #0]
 8004cbe:	e7f3      	b.n	8004ca8 <_strtol_l.constprop.0+0xd4>
 8004cc0:	2430      	movs	r4, #48	; 0x30
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1b1      	bne.n	8004c2a <_strtol_l.constprop.0+0x56>
 8004cc6:	2308      	movs	r3, #8
 8004cc8:	e7af      	b.n	8004c2a <_strtol_l.constprop.0+0x56>
 8004cca:	2c30      	cmp	r4, #48	; 0x30
 8004ccc:	d0a5      	beq.n	8004c1a <_strtol_l.constprop.0+0x46>
 8004cce:	230a      	movs	r3, #10
 8004cd0:	e7ab      	b.n	8004c2a <_strtol_l.constprop.0+0x56>
 8004cd2:	bf00      	nop
 8004cd4:	080083d1 	.word	0x080083d1

08004cd8 <_strtol_r>:
 8004cd8:	f7ff bf7c 	b.w	8004bd4 <_strtol_l.constprop.0>

08004cdc <_fwalk_sglue>:
 8004cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ce0:	4607      	mov	r7, r0
 8004ce2:	4688      	mov	r8, r1
 8004ce4:	4614      	mov	r4, r2
 8004ce6:	2600      	movs	r6, #0
 8004ce8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004cec:	f1b9 0901 	subs.w	r9, r9, #1
 8004cf0:	d505      	bpl.n	8004cfe <_fwalk_sglue+0x22>
 8004cf2:	6824      	ldr	r4, [r4, #0]
 8004cf4:	2c00      	cmp	r4, #0
 8004cf6:	d1f7      	bne.n	8004ce8 <_fwalk_sglue+0xc>
 8004cf8:	4630      	mov	r0, r6
 8004cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cfe:	89ab      	ldrh	r3, [r5, #12]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d907      	bls.n	8004d14 <_fwalk_sglue+0x38>
 8004d04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	d003      	beq.n	8004d14 <_fwalk_sglue+0x38>
 8004d0c:	4629      	mov	r1, r5
 8004d0e:	4638      	mov	r0, r7
 8004d10:	47c0      	blx	r8
 8004d12:	4306      	orrs	r6, r0
 8004d14:	3568      	adds	r5, #104	; 0x68
 8004d16:	e7e9      	b.n	8004cec <_fwalk_sglue+0x10>

08004d18 <iscanf>:
 8004d18:	b40f      	push	{r0, r1, r2, r3}
 8004d1a:	b507      	push	{r0, r1, r2, lr}
 8004d1c:	4906      	ldr	r1, [pc, #24]	; (8004d38 <iscanf+0x20>)
 8004d1e:	ab04      	add	r3, sp, #16
 8004d20:	6808      	ldr	r0, [r1, #0]
 8004d22:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d26:	6841      	ldr	r1, [r0, #4]
 8004d28:	9301      	str	r3, [sp, #4]
 8004d2a:	f001 fdf7 	bl	800691c <_vfiscanf_r>
 8004d2e:	b003      	add	sp, #12
 8004d30:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d34:	b004      	add	sp, #16
 8004d36:	4770      	bx	lr
 8004d38:	200001d0 	.word	0x200001d0

08004d3c <strncmp>:
 8004d3c:	b510      	push	{r4, lr}
 8004d3e:	b16a      	cbz	r2, 8004d5c <strncmp+0x20>
 8004d40:	3901      	subs	r1, #1
 8004d42:	1884      	adds	r4, r0, r2
 8004d44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d48:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d103      	bne.n	8004d58 <strncmp+0x1c>
 8004d50:	42a0      	cmp	r0, r4
 8004d52:	d001      	beq.n	8004d58 <strncmp+0x1c>
 8004d54:	2a00      	cmp	r2, #0
 8004d56:	d1f5      	bne.n	8004d44 <strncmp+0x8>
 8004d58:	1ad0      	subs	r0, r2, r3
 8004d5a:	bd10      	pop	{r4, pc}
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	e7fc      	b.n	8004d5a <strncmp+0x1e>

08004d60 <memset>:
 8004d60:	4402      	add	r2, r0
 8004d62:	4603      	mov	r3, r0
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d100      	bne.n	8004d6a <memset+0xa>
 8004d68:	4770      	bx	lr
 8004d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d6e:	e7f9      	b.n	8004d64 <memset+0x4>

08004d70 <_localeconv_r>:
 8004d70:	4800      	ldr	r0, [pc, #0]	; (8004d74 <_localeconv_r+0x4>)
 8004d72:	4770      	bx	lr
 8004d74:	20000108 	.word	0x20000108

08004d78 <__errno>:
 8004d78:	4b01      	ldr	r3, [pc, #4]	; (8004d80 <__errno+0x8>)
 8004d7a:	6818      	ldr	r0, [r3, #0]
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	200001d0 	.word	0x200001d0

08004d84 <__libc_init_array>:
 8004d84:	b570      	push	{r4, r5, r6, lr}
 8004d86:	4d0d      	ldr	r5, [pc, #52]	; (8004dbc <__libc_init_array+0x38>)
 8004d88:	4c0d      	ldr	r4, [pc, #52]	; (8004dc0 <__libc_init_array+0x3c>)
 8004d8a:	1b64      	subs	r4, r4, r5
 8004d8c:	10a4      	asrs	r4, r4, #2
 8004d8e:	2600      	movs	r6, #0
 8004d90:	42a6      	cmp	r6, r4
 8004d92:	d109      	bne.n	8004da8 <__libc_init_array+0x24>
 8004d94:	4d0b      	ldr	r5, [pc, #44]	; (8004dc4 <__libc_init_array+0x40>)
 8004d96:	4c0c      	ldr	r4, [pc, #48]	; (8004dc8 <__libc_init_array+0x44>)
 8004d98:	f003 faae 	bl	80082f8 <_init>
 8004d9c:	1b64      	subs	r4, r4, r5
 8004d9e:	10a4      	asrs	r4, r4, #2
 8004da0:	2600      	movs	r6, #0
 8004da2:	42a6      	cmp	r6, r4
 8004da4:	d105      	bne.n	8004db2 <__libc_init_array+0x2e>
 8004da6:	bd70      	pop	{r4, r5, r6, pc}
 8004da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dac:	4798      	blx	r3
 8004dae:	3601      	adds	r6, #1
 8004db0:	e7ee      	b.n	8004d90 <__libc_init_array+0xc>
 8004db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004db6:	4798      	blx	r3
 8004db8:	3601      	adds	r6, #1
 8004dba:	e7f2      	b.n	8004da2 <__libc_init_array+0x1e>
 8004dbc:	08008788 	.word	0x08008788
 8004dc0:	08008788 	.word	0x08008788
 8004dc4:	08008788 	.word	0x08008788
 8004dc8:	0800878c 	.word	0x0800878c

08004dcc <__retarget_lock_init_recursive>:
 8004dcc:	4770      	bx	lr

08004dce <__retarget_lock_acquire_recursive>:
 8004dce:	4770      	bx	lr

08004dd0 <__retarget_lock_release_recursive>:
 8004dd0:	4770      	bx	lr

08004dd2 <memcpy>:
 8004dd2:	440a      	add	r2, r1
 8004dd4:	4291      	cmp	r1, r2
 8004dd6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004dda:	d100      	bne.n	8004dde <memcpy+0xc>
 8004ddc:	4770      	bx	lr
 8004dde:	b510      	push	{r4, lr}
 8004de0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004de4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004de8:	4291      	cmp	r1, r2
 8004dea:	d1f9      	bne.n	8004de0 <memcpy+0xe>
 8004dec:	bd10      	pop	{r4, pc}
	...

08004df0 <nan>:
 8004df0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8004df8 <nan+0x8>
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	00000000 	.word	0x00000000
 8004dfc:	7ff80000 	.word	0x7ff80000

08004e00 <nanf>:
 8004e00:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004e08 <nanf+0x8>
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	7fc00000 	.word	0x7fc00000

08004e0c <quorem>:
 8004e0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e10:	6903      	ldr	r3, [r0, #16]
 8004e12:	690c      	ldr	r4, [r1, #16]
 8004e14:	42a3      	cmp	r3, r4
 8004e16:	4607      	mov	r7, r0
 8004e18:	db7e      	blt.n	8004f18 <quorem+0x10c>
 8004e1a:	3c01      	subs	r4, #1
 8004e1c:	f101 0814 	add.w	r8, r1, #20
 8004e20:	f100 0514 	add.w	r5, r0, #20
 8004e24:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e28:	9301      	str	r3, [sp, #4]
 8004e2a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004e2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e32:	3301      	adds	r3, #1
 8004e34:	429a      	cmp	r2, r3
 8004e36:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004e3a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004e3e:	fbb2 f6f3 	udiv	r6, r2, r3
 8004e42:	d331      	bcc.n	8004ea8 <quorem+0x9c>
 8004e44:	f04f 0e00 	mov.w	lr, #0
 8004e48:	4640      	mov	r0, r8
 8004e4a:	46ac      	mov	ip, r5
 8004e4c:	46f2      	mov	sl, lr
 8004e4e:	f850 2b04 	ldr.w	r2, [r0], #4
 8004e52:	b293      	uxth	r3, r2
 8004e54:	fb06 e303 	mla	r3, r6, r3, lr
 8004e58:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004e5c:	0c1a      	lsrs	r2, r3, #16
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	ebaa 0303 	sub.w	r3, sl, r3
 8004e64:	f8dc a000 	ldr.w	sl, [ip]
 8004e68:	fa13 f38a 	uxtah	r3, r3, sl
 8004e6c:	fb06 220e 	mla	r2, r6, lr, r2
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	9b00      	ldr	r3, [sp, #0]
 8004e74:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004e78:	b292      	uxth	r2, r2
 8004e7a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004e7e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e82:	f8bd 3000 	ldrh.w	r3, [sp]
 8004e86:	4581      	cmp	r9, r0
 8004e88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e8c:	f84c 3b04 	str.w	r3, [ip], #4
 8004e90:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004e94:	d2db      	bcs.n	8004e4e <quorem+0x42>
 8004e96:	f855 300b 	ldr.w	r3, [r5, fp]
 8004e9a:	b92b      	cbnz	r3, 8004ea8 <quorem+0x9c>
 8004e9c:	9b01      	ldr	r3, [sp, #4]
 8004e9e:	3b04      	subs	r3, #4
 8004ea0:	429d      	cmp	r5, r3
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	d32c      	bcc.n	8004f00 <quorem+0xf4>
 8004ea6:	613c      	str	r4, [r7, #16]
 8004ea8:	4638      	mov	r0, r7
 8004eaa:	f002 fa53 	bl	8007354 <__mcmp>
 8004eae:	2800      	cmp	r0, #0
 8004eb0:	db22      	blt.n	8004ef8 <quorem+0xec>
 8004eb2:	3601      	adds	r6, #1
 8004eb4:	4629      	mov	r1, r5
 8004eb6:	2000      	movs	r0, #0
 8004eb8:	f858 2b04 	ldr.w	r2, [r8], #4
 8004ebc:	f8d1 c000 	ldr.w	ip, [r1]
 8004ec0:	b293      	uxth	r3, r2
 8004ec2:	1ac3      	subs	r3, r0, r3
 8004ec4:	0c12      	lsrs	r2, r2, #16
 8004ec6:	fa13 f38c 	uxtah	r3, r3, ip
 8004eca:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004ece:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ed8:	45c1      	cmp	r9, r8
 8004eda:	f841 3b04 	str.w	r3, [r1], #4
 8004ede:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004ee2:	d2e9      	bcs.n	8004eb8 <quorem+0xac>
 8004ee4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ee8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004eec:	b922      	cbnz	r2, 8004ef8 <quorem+0xec>
 8004eee:	3b04      	subs	r3, #4
 8004ef0:	429d      	cmp	r5, r3
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	d30a      	bcc.n	8004f0c <quorem+0x100>
 8004ef6:	613c      	str	r4, [r7, #16]
 8004ef8:	4630      	mov	r0, r6
 8004efa:	b003      	add	sp, #12
 8004efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f00:	6812      	ldr	r2, [r2, #0]
 8004f02:	3b04      	subs	r3, #4
 8004f04:	2a00      	cmp	r2, #0
 8004f06:	d1ce      	bne.n	8004ea6 <quorem+0x9a>
 8004f08:	3c01      	subs	r4, #1
 8004f0a:	e7c9      	b.n	8004ea0 <quorem+0x94>
 8004f0c:	6812      	ldr	r2, [r2, #0]
 8004f0e:	3b04      	subs	r3, #4
 8004f10:	2a00      	cmp	r2, #0
 8004f12:	d1f0      	bne.n	8004ef6 <quorem+0xea>
 8004f14:	3c01      	subs	r4, #1
 8004f16:	e7eb      	b.n	8004ef0 <quorem+0xe4>
 8004f18:	2000      	movs	r0, #0
 8004f1a:	e7ee      	b.n	8004efa <quorem+0xee>
 8004f1c:	0000      	movs	r0, r0
	...

08004f20 <_dtoa_r>:
 8004f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f24:	ed2d 8b04 	vpush	{d8-d9}
 8004f28:	69c5      	ldr	r5, [r0, #28]
 8004f2a:	b093      	sub	sp, #76	; 0x4c
 8004f2c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004f30:	ec57 6b10 	vmov	r6, r7, d0
 8004f34:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004f38:	9107      	str	r1, [sp, #28]
 8004f3a:	4604      	mov	r4, r0
 8004f3c:	920a      	str	r2, [sp, #40]	; 0x28
 8004f3e:	930d      	str	r3, [sp, #52]	; 0x34
 8004f40:	b975      	cbnz	r5, 8004f60 <_dtoa_r+0x40>
 8004f42:	2010      	movs	r0, #16
 8004f44:	f001 fa8e 	bl	8006464 <malloc>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	61e0      	str	r0, [r4, #28]
 8004f4c:	b920      	cbnz	r0, 8004f58 <_dtoa_r+0x38>
 8004f4e:	4bae      	ldr	r3, [pc, #696]	; (8005208 <_dtoa_r+0x2e8>)
 8004f50:	21ef      	movs	r1, #239	; 0xef
 8004f52:	48ae      	ldr	r0, [pc, #696]	; (800520c <_dtoa_r+0x2ec>)
 8004f54:	f002 fe8e 	bl	8007c74 <__assert_func>
 8004f58:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004f5c:	6005      	str	r5, [r0, #0]
 8004f5e:	60c5      	str	r5, [r0, #12]
 8004f60:	69e3      	ldr	r3, [r4, #28]
 8004f62:	6819      	ldr	r1, [r3, #0]
 8004f64:	b151      	cbz	r1, 8004f7c <_dtoa_r+0x5c>
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	604a      	str	r2, [r1, #4]
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	4093      	lsls	r3, r2
 8004f6e:	608b      	str	r3, [r1, #8]
 8004f70:	4620      	mov	r0, r4
 8004f72:	f001 ff69 	bl	8006e48 <_Bfree>
 8004f76:	69e3      	ldr	r3, [r4, #28]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	1e3b      	subs	r3, r7, #0
 8004f7e:	bfbb      	ittet	lt
 8004f80:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004f84:	9303      	strlt	r3, [sp, #12]
 8004f86:	2300      	movge	r3, #0
 8004f88:	2201      	movlt	r2, #1
 8004f8a:	bfac      	ite	ge
 8004f8c:	f8c8 3000 	strge.w	r3, [r8]
 8004f90:	f8c8 2000 	strlt.w	r2, [r8]
 8004f94:	4b9e      	ldr	r3, [pc, #632]	; (8005210 <_dtoa_r+0x2f0>)
 8004f96:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004f9a:	ea33 0308 	bics.w	r3, r3, r8
 8004f9e:	d11b      	bne.n	8004fd8 <_dtoa_r+0xb8>
 8004fa0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004fa2:	f242 730f 	movw	r3, #9999	; 0x270f
 8004fa6:	6013      	str	r3, [r2, #0]
 8004fa8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004fac:	4333      	orrs	r3, r6
 8004fae:	f000 8593 	beq.w	8005ad8 <_dtoa_r+0xbb8>
 8004fb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004fb4:	b963      	cbnz	r3, 8004fd0 <_dtoa_r+0xb0>
 8004fb6:	4b97      	ldr	r3, [pc, #604]	; (8005214 <_dtoa_r+0x2f4>)
 8004fb8:	e027      	b.n	800500a <_dtoa_r+0xea>
 8004fba:	4b97      	ldr	r3, [pc, #604]	; (8005218 <_dtoa_r+0x2f8>)
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	3308      	adds	r3, #8
 8004fc0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004fc2:	6013      	str	r3, [r2, #0]
 8004fc4:	9800      	ldr	r0, [sp, #0]
 8004fc6:	b013      	add	sp, #76	; 0x4c
 8004fc8:	ecbd 8b04 	vpop	{d8-d9}
 8004fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fd0:	4b90      	ldr	r3, [pc, #576]	; (8005214 <_dtoa_r+0x2f4>)
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	3303      	adds	r3, #3
 8004fd6:	e7f3      	b.n	8004fc0 <_dtoa_r+0xa0>
 8004fd8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	ec51 0b17 	vmov	r0, r1, d7
 8004fe2:	eeb0 8a47 	vmov.f32	s16, s14
 8004fe6:	eef0 8a67 	vmov.f32	s17, s15
 8004fea:	2300      	movs	r3, #0
 8004fec:	f7fb fd8c 	bl	8000b08 <__aeabi_dcmpeq>
 8004ff0:	4681      	mov	r9, r0
 8004ff2:	b160      	cbz	r0, 800500e <_dtoa_r+0xee>
 8004ff4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	6013      	str	r3, [r2, #0]
 8004ffa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f000 8568 	beq.w	8005ad2 <_dtoa_r+0xbb2>
 8005002:	4b86      	ldr	r3, [pc, #536]	; (800521c <_dtoa_r+0x2fc>)
 8005004:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005006:	6013      	str	r3, [r2, #0]
 8005008:	3b01      	subs	r3, #1
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	e7da      	b.n	8004fc4 <_dtoa_r+0xa4>
 800500e:	aa10      	add	r2, sp, #64	; 0x40
 8005010:	a911      	add	r1, sp, #68	; 0x44
 8005012:	4620      	mov	r0, r4
 8005014:	eeb0 0a48 	vmov.f32	s0, s16
 8005018:	eef0 0a68 	vmov.f32	s1, s17
 800501c:	f002 fab0 	bl	8007580 <__d2b>
 8005020:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005024:	4682      	mov	sl, r0
 8005026:	2d00      	cmp	r5, #0
 8005028:	d07f      	beq.n	800512a <_dtoa_r+0x20a>
 800502a:	ee18 3a90 	vmov	r3, s17
 800502e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005032:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005036:	ec51 0b18 	vmov	r0, r1, d8
 800503a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800503e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005042:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005046:	4619      	mov	r1, r3
 8005048:	2200      	movs	r2, #0
 800504a:	4b75      	ldr	r3, [pc, #468]	; (8005220 <_dtoa_r+0x300>)
 800504c:	f7fb f93c 	bl	80002c8 <__aeabi_dsub>
 8005050:	a367      	add	r3, pc, #412	; (adr r3, 80051f0 <_dtoa_r+0x2d0>)
 8005052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005056:	f7fb faef 	bl	8000638 <__aeabi_dmul>
 800505a:	a367      	add	r3, pc, #412	; (adr r3, 80051f8 <_dtoa_r+0x2d8>)
 800505c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005060:	f7fb f934 	bl	80002cc <__adddf3>
 8005064:	4606      	mov	r6, r0
 8005066:	4628      	mov	r0, r5
 8005068:	460f      	mov	r7, r1
 800506a:	f7fb fa7b 	bl	8000564 <__aeabi_i2d>
 800506e:	a364      	add	r3, pc, #400	; (adr r3, 8005200 <_dtoa_r+0x2e0>)
 8005070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005074:	f7fb fae0 	bl	8000638 <__aeabi_dmul>
 8005078:	4602      	mov	r2, r0
 800507a:	460b      	mov	r3, r1
 800507c:	4630      	mov	r0, r6
 800507e:	4639      	mov	r1, r7
 8005080:	f7fb f924 	bl	80002cc <__adddf3>
 8005084:	4606      	mov	r6, r0
 8005086:	460f      	mov	r7, r1
 8005088:	f7fb fd86 	bl	8000b98 <__aeabi_d2iz>
 800508c:	2200      	movs	r2, #0
 800508e:	4683      	mov	fp, r0
 8005090:	2300      	movs	r3, #0
 8005092:	4630      	mov	r0, r6
 8005094:	4639      	mov	r1, r7
 8005096:	f7fb fd41 	bl	8000b1c <__aeabi_dcmplt>
 800509a:	b148      	cbz	r0, 80050b0 <_dtoa_r+0x190>
 800509c:	4658      	mov	r0, fp
 800509e:	f7fb fa61 	bl	8000564 <__aeabi_i2d>
 80050a2:	4632      	mov	r2, r6
 80050a4:	463b      	mov	r3, r7
 80050a6:	f7fb fd2f 	bl	8000b08 <__aeabi_dcmpeq>
 80050aa:	b908      	cbnz	r0, 80050b0 <_dtoa_r+0x190>
 80050ac:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80050b0:	f1bb 0f16 	cmp.w	fp, #22
 80050b4:	d857      	bhi.n	8005166 <_dtoa_r+0x246>
 80050b6:	4b5b      	ldr	r3, [pc, #364]	; (8005224 <_dtoa_r+0x304>)
 80050b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80050bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c0:	ec51 0b18 	vmov	r0, r1, d8
 80050c4:	f7fb fd2a 	bl	8000b1c <__aeabi_dcmplt>
 80050c8:	2800      	cmp	r0, #0
 80050ca:	d04e      	beq.n	800516a <_dtoa_r+0x24a>
 80050cc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80050d0:	2300      	movs	r3, #0
 80050d2:	930c      	str	r3, [sp, #48]	; 0x30
 80050d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80050d6:	1b5b      	subs	r3, r3, r5
 80050d8:	1e5a      	subs	r2, r3, #1
 80050da:	bf45      	ittet	mi
 80050dc:	f1c3 0301 	rsbmi	r3, r3, #1
 80050e0:	9305      	strmi	r3, [sp, #20]
 80050e2:	2300      	movpl	r3, #0
 80050e4:	2300      	movmi	r3, #0
 80050e6:	9206      	str	r2, [sp, #24]
 80050e8:	bf54      	ite	pl
 80050ea:	9305      	strpl	r3, [sp, #20]
 80050ec:	9306      	strmi	r3, [sp, #24]
 80050ee:	f1bb 0f00 	cmp.w	fp, #0
 80050f2:	db3c      	blt.n	800516e <_dtoa_r+0x24e>
 80050f4:	9b06      	ldr	r3, [sp, #24]
 80050f6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80050fa:	445b      	add	r3, fp
 80050fc:	9306      	str	r3, [sp, #24]
 80050fe:	2300      	movs	r3, #0
 8005100:	9308      	str	r3, [sp, #32]
 8005102:	9b07      	ldr	r3, [sp, #28]
 8005104:	2b09      	cmp	r3, #9
 8005106:	d868      	bhi.n	80051da <_dtoa_r+0x2ba>
 8005108:	2b05      	cmp	r3, #5
 800510a:	bfc4      	itt	gt
 800510c:	3b04      	subgt	r3, #4
 800510e:	9307      	strgt	r3, [sp, #28]
 8005110:	9b07      	ldr	r3, [sp, #28]
 8005112:	f1a3 0302 	sub.w	r3, r3, #2
 8005116:	bfcc      	ite	gt
 8005118:	2500      	movgt	r5, #0
 800511a:	2501      	movle	r5, #1
 800511c:	2b03      	cmp	r3, #3
 800511e:	f200 8085 	bhi.w	800522c <_dtoa_r+0x30c>
 8005122:	e8df f003 	tbb	[pc, r3]
 8005126:	3b2e      	.short	0x3b2e
 8005128:	5839      	.short	0x5839
 800512a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800512e:	441d      	add	r5, r3
 8005130:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005134:	2b20      	cmp	r3, #32
 8005136:	bfc1      	itttt	gt
 8005138:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800513c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005140:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005144:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005148:	bfd6      	itet	le
 800514a:	f1c3 0320 	rsble	r3, r3, #32
 800514e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005152:	fa06 f003 	lslle.w	r0, r6, r3
 8005156:	f7fb f9f5 	bl	8000544 <__aeabi_ui2d>
 800515a:	2201      	movs	r2, #1
 800515c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005160:	3d01      	subs	r5, #1
 8005162:	920e      	str	r2, [sp, #56]	; 0x38
 8005164:	e76f      	b.n	8005046 <_dtoa_r+0x126>
 8005166:	2301      	movs	r3, #1
 8005168:	e7b3      	b.n	80050d2 <_dtoa_r+0x1b2>
 800516a:	900c      	str	r0, [sp, #48]	; 0x30
 800516c:	e7b2      	b.n	80050d4 <_dtoa_r+0x1b4>
 800516e:	9b05      	ldr	r3, [sp, #20]
 8005170:	eba3 030b 	sub.w	r3, r3, fp
 8005174:	9305      	str	r3, [sp, #20]
 8005176:	f1cb 0300 	rsb	r3, fp, #0
 800517a:	9308      	str	r3, [sp, #32]
 800517c:	2300      	movs	r3, #0
 800517e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005180:	e7bf      	b.n	8005102 <_dtoa_r+0x1e2>
 8005182:	2300      	movs	r3, #0
 8005184:	9309      	str	r3, [sp, #36]	; 0x24
 8005186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005188:	2b00      	cmp	r3, #0
 800518a:	dc52      	bgt.n	8005232 <_dtoa_r+0x312>
 800518c:	2301      	movs	r3, #1
 800518e:	9301      	str	r3, [sp, #4]
 8005190:	9304      	str	r3, [sp, #16]
 8005192:	461a      	mov	r2, r3
 8005194:	920a      	str	r2, [sp, #40]	; 0x28
 8005196:	e00b      	b.n	80051b0 <_dtoa_r+0x290>
 8005198:	2301      	movs	r3, #1
 800519a:	e7f3      	b.n	8005184 <_dtoa_r+0x264>
 800519c:	2300      	movs	r3, #0
 800519e:	9309      	str	r3, [sp, #36]	; 0x24
 80051a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051a2:	445b      	add	r3, fp
 80051a4:	9301      	str	r3, [sp, #4]
 80051a6:	3301      	adds	r3, #1
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	9304      	str	r3, [sp, #16]
 80051ac:	bfb8      	it	lt
 80051ae:	2301      	movlt	r3, #1
 80051b0:	69e0      	ldr	r0, [r4, #28]
 80051b2:	2100      	movs	r1, #0
 80051b4:	2204      	movs	r2, #4
 80051b6:	f102 0614 	add.w	r6, r2, #20
 80051ba:	429e      	cmp	r6, r3
 80051bc:	d93d      	bls.n	800523a <_dtoa_r+0x31a>
 80051be:	6041      	str	r1, [r0, #4]
 80051c0:	4620      	mov	r0, r4
 80051c2:	f001 fe01 	bl	8006dc8 <_Balloc>
 80051c6:	9000      	str	r0, [sp, #0]
 80051c8:	2800      	cmp	r0, #0
 80051ca:	d139      	bne.n	8005240 <_dtoa_r+0x320>
 80051cc:	4b16      	ldr	r3, [pc, #88]	; (8005228 <_dtoa_r+0x308>)
 80051ce:	4602      	mov	r2, r0
 80051d0:	f240 11af 	movw	r1, #431	; 0x1af
 80051d4:	e6bd      	b.n	8004f52 <_dtoa_r+0x32>
 80051d6:	2301      	movs	r3, #1
 80051d8:	e7e1      	b.n	800519e <_dtoa_r+0x27e>
 80051da:	2501      	movs	r5, #1
 80051dc:	2300      	movs	r3, #0
 80051de:	9307      	str	r3, [sp, #28]
 80051e0:	9509      	str	r5, [sp, #36]	; 0x24
 80051e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051e6:	9301      	str	r3, [sp, #4]
 80051e8:	9304      	str	r3, [sp, #16]
 80051ea:	2200      	movs	r2, #0
 80051ec:	2312      	movs	r3, #18
 80051ee:	e7d1      	b.n	8005194 <_dtoa_r+0x274>
 80051f0:	636f4361 	.word	0x636f4361
 80051f4:	3fd287a7 	.word	0x3fd287a7
 80051f8:	8b60c8b3 	.word	0x8b60c8b3
 80051fc:	3fc68a28 	.word	0x3fc68a28
 8005200:	509f79fb 	.word	0x509f79fb
 8005204:	3fd34413 	.word	0x3fd34413
 8005208:	080084de 	.word	0x080084de
 800520c:	080084f5 	.word	0x080084f5
 8005210:	7ff00000 	.word	0x7ff00000
 8005214:	080084da 	.word	0x080084da
 8005218:	080084d1 	.word	0x080084d1
 800521c:	080085e6 	.word	0x080085e6
 8005220:	3ff80000 	.word	0x3ff80000
 8005224:	08008670 	.word	0x08008670
 8005228:	0800854d 	.word	0x0800854d
 800522c:	2301      	movs	r3, #1
 800522e:	9309      	str	r3, [sp, #36]	; 0x24
 8005230:	e7d7      	b.n	80051e2 <_dtoa_r+0x2c2>
 8005232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005234:	9301      	str	r3, [sp, #4]
 8005236:	9304      	str	r3, [sp, #16]
 8005238:	e7ba      	b.n	80051b0 <_dtoa_r+0x290>
 800523a:	3101      	adds	r1, #1
 800523c:	0052      	lsls	r2, r2, #1
 800523e:	e7ba      	b.n	80051b6 <_dtoa_r+0x296>
 8005240:	69e3      	ldr	r3, [r4, #28]
 8005242:	9a00      	ldr	r2, [sp, #0]
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	9b04      	ldr	r3, [sp, #16]
 8005248:	2b0e      	cmp	r3, #14
 800524a:	f200 80a8 	bhi.w	800539e <_dtoa_r+0x47e>
 800524e:	2d00      	cmp	r5, #0
 8005250:	f000 80a5 	beq.w	800539e <_dtoa_r+0x47e>
 8005254:	f1bb 0f00 	cmp.w	fp, #0
 8005258:	dd38      	ble.n	80052cc <_dtoa_r+0x3ac>
 800525a:	4bc0      	ldr	r3, [pc, #768]	; (800555c <_dtoa_r+0x63c>)
 800525c:	f00b 020f 	and.w	r2, fp, #15
 8005260:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005264:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005268:	e9d3 6700 	ldrd	r6, r7, [r3]
 800526c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005270:	d019      	beq.n	80052a6 <_dtoa_r+0x386>
 8005272:	4bbb      	ldr	r3, [pc, #748]	; (8005560 <_dtoa_r+0x640>)
 8005274:	ec51 0b18 	vmov	r0, r1, d8
 8005278:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800527c:	f7fb fb06 	bl	800088c <__aeabi_ddiv>
 8005280:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005284:	f008 080f 	and.w	r8, r8, #15
 8005288:	2503      	movs	r5, #3
 800528a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005560 <_dtoa_r+0x640>
 800528e:	f1b8 0f00 	cmp.w	r8, #0
 8005292:	d10a      	bne.n	80052aa <_dtoa_r+0x38a>
 8005294:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005298:	4632      	mov	r2, r6
 800529a:	463b      	mov	r3, r7
 800529c:	f7fb faf6 	bl	800088c <__aeabi_ddiv>
 80052a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052a4:	e02b      	b.n	80052fe <_dtoa_r+0x3de>
 80052a6:	2502      	movs	r5, #2
 80052a8:	e7ef      	b.n	800528a <_dtoa_r+0x36a>
 80052aa:	f018 0f01 	tst.w	r8, #1
 80052ae:	d008      	beq.n	80052c2 <_dtoa_r+0x3a2>
 80052b0:	4630      	mov	r0, r6
 80052b2:	4639      	mov	r1, r7
 80052b4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80052b8:	f7fb f9be 	bl	8000638 <__aeabi_dmul>
 80052bc:	3501      	adds	r5, #1
 80052be:	4606      	mov	r6, r0
 80052c0:	460f      	mov	r7, r1
 80052c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80052c6:	f109 0908 	add.w	r9, r9, #8
 80052ca:	e7e0      	b.n	800528e <_dtoa_r+0x36e>
 80052cc:	f000 809f 	beq.w	800540e <_dtoa_r+0x4ee>
 80052d0:	f1cb 0600 	rsb	r6, fp, #0
 80052d4:	4ba1      	ldr	r3, [pc, #644]	; (800555c <_dtoa_r+0x63c>)
 80052d6:	4fa2      	ldr	r7, [pc, #648]	; (8005560 <_dtoa_r+0x640>)
 80052d8:	f006 020f 	and.w	r2, r6, #15
 80052dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e4:	ec51 0b18 	vmov	r0, r1, d8
 80052e8:	f7fb f9a6 	bl	8000638 <__aeabi_dmul>
 80052ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052f0:	1136      	asrs	r6, r6, #4
 80052f2:	2300      	movs	r3, #0
 80052f4:	2502      	movs	r5, #2
 80052f6:	2e00      	cmp	r6, #0
 80052f8:	d17e      	bne.n	80053f8 <_dtoa_r+0x4d8>
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1d0      	bne.n	80052a0 <_dtoa_r+0x380>
 80052fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005300:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005304:	2b00      	cmp	r3, #0
 8005306:	f000 8084 	beq.w	8005412 <_dtoa_r+0x4f2>
 800530a:	4b96      	ldr	r3, [pc, #600]	; (8005564 <_dtoa_r+0x644>)
 800530c:	2200      	movs	r2, #0
 800530e:	4640      	mov	r0, r8
 8005310:	4649      	mov	r1, r9
 8005312:	f7fb fc03 	bl	8000b1c <__aeabi_dcmplt>
 8005316:	2800      	cmp	r0, #0
 8005318:	d07b      	beq.n	8005412 <_dtoa_r+0x4f2>
 800531a:	9b04      	ldr	r3, [sp, #16]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d078      	beq.n	8005412 <_dtoa_r+0x4f2>
 8005320:	9b01      	ldr	r3, [sp, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	dd39      	ble.n	800539a <_dtoa_r+0x47a>
 8005326:	4b90      	ldr	r3, [pc, #576]	; (8005568 <_dtoa_r+0x648>)
 8005328:	2200      	movs	r2, #0
 800532a:	4640      	mov	r0, r8
 800532c:	4649      	mov	r1, r9
 800532e:	f7fb f983 	bl	8000638 <__aeabi_dmul>
 8005332:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005336:	9e01      	ldr	r6, [sp, #4]
 8005338:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800533c:	3501      	adds	r5, #1
 800533e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005342:	4628      	mov	r0, r5
 8005344:	f7fb f90e 	bl	8000564 <__aeabi_i2d>
 8005348:	4642      	mov	r2, r8
 800534a:	464b      	mov	r3, r9
 800534c:	f7fb f974 	bl	8000638 <__aeabi_dmul>
 8005350:	4b86      	ldr	r3, [pc, #536]	; (800556c <_dtoa_r+0x64c>)
 8005352:	2200      	movs	r2, #0
 8005354:	f7fa ffba 	bl	80002cc <__adddf3>
 8005358:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800535c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005360:	9303      	str	r3, [sp, #12]
 8005362:	2e00      	cmp	r6, #0
 8005364:	d158      	bne.n	8005418 <_dtoa_r+0x4f8>
 8005366:	4b82      	ldr	r3, [pc, #520]	; (8005570 <_dtoa_r+0x650>)
 8005368:	2200      	movs	r2, #0
 800536a:	4640      	mov	r0, r8
 800536c:	4649      	mov	r1, r9
 800536e:	f7fa ffab 	bl	80002c8 <__aeabi_dsub>
 8005372:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005376:	4680      	mov	r8, r0
 8005378:	4689      	mov	r9, r1
 800537a:	f7fb fbed 	bl	8000b58 <__aeabi_dcmpgt>
 800537e:	2800      	cmp	r0, #0
 8005380:	f040 8296 	bne.w	80058b0 <_dtoa_r+0x990>
 8005384:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005388:	4640      	mov	r0, r8
 800538a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800538e:	4649      	mov	r1, r9
 8005390:	f7fb fbc4 	bl	8000b1c <__aeabi_dcmplt>
 8005394:	2800      	cmp	r0, #0
 8005396:	f040 8289 	bne.w	80058ac <_dtoa_r+0x98c>
 800539a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800539e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f2c0 814e 	blt.w	8005642 <_dtoa_r+0x722>
 80053a6:	f1bb 0f0e 	cmp.w	fp, #14
 80053aa:	f300 814a 	bgt.w	8005642 <_dtoa_r+0x722>
 80053ae:	4b6b      	ldr	r3, [pc, #428]	; (800555c <_dtoa_r+0x63c>)
 80053b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80053b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80053b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f280 80dc 	bge.w	8005578 <_dtoa_r+0x658>
 80053c0:	9b04      	ldr	r3, [sp, #16]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f300 80d8 	bgt.w	8005578 <_dtoa_r+0x658>
 80053c8:	f040 826f 	bne.w	80058aa <_dtoa_r+0x98a>
 80053cc:	4b68      	ldr	r3, [pc, #416]	; (8005570 <_dtoa_r+0x650>)
 80053ce:	2200      	movs	r2, #0
 80053d0:	4640      	mov	r0, r8
 80053d2:	4649      	mov	r1, r9
 80053d4:	f7fb f930 	bl	8000638 <__aeabi_dmul>
 80053d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053dc:	f7fb fbb2 	bl	8000b44 <__aeabi_dcmpge>
 80053e0:	9e04      	ldr	r6, [sp, #16]
 80053e2:	4637      	mov	r7, r6
 80053e4:	2800      	cmp	r0, #0
 80053e6:	f040 8245 	bne.w	8005874 <_dtoa_r+0x954>
 80053ea:	9d00      	ldr	r5, [sp, #0]
 80053ec:	2331      	movs	r3, #49	; 0x31
 80053ee:	f805 3b01 	strb.w	r3, [r5], #1
 80053f2:	f10b 0b01 	add.w	fp, fp, #1
 80053f6:	e241      	b.n	800587c <_dtoa_r+0x95c>
 80053f8:	07f2      	lsls	r2, r6, #31
 80053fa:	d505      	bpl.n	8005408 <_dtoa_r+0x4e8>
 80053fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005400:	f7fb f91a 	bl	8000638 <__aeabi_dmul>
 8005404:	3501      	adds	r5, #1
 8005406:	2301      	movs	r3, #1
 8005408:	1076      	asrs	r6, r6, #1
 800540a:	3708      	adds	r7, #8
 800540c:	e773      	b.n	80052f6 <_dtoa_r+0x3d6>
 800540e:	2502      	movs	r5, #2
 8005410:	e775      	b.n	80052fe <_dtoa_r+0x3de>
 8005412:	9e04      	ldr	r6, [sp, #16]
 8005414:	465f      	mov	r7, fp
 8005416:	e792      	b.n	800533e <_dtoa_r+0x41e>
 8005418:	9900      	ldr	r1, [sp, #0]
 800541a:	4b50      	ldr	r3, [pc, #320]	; (800555c <_dtoa_r+0x63c>)
 800541c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005420:	4431      	add	r1, r6
 8005422:	9102      	str	r1, [sp, #8]
 8005424:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005426:	eeb0 9a47 	vmov.f32	s18, s14
 800542a:	eef0 9a67 	vmov.f32	s19, s15
 800542e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005432:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005436:	2900      	cmp	r1, #0
 8005438:	d044      	beq.n	80054c4 <_dtoa_r+0x5a4>
 800543a:	494e      	ldr	r1, [pc, #312]	; (8005574 <_dtoa_r+0x654>)
 800543c:	2000      	movs	r0, #0
 800543e:	f7fb fa25 	bl	800088c <__aeabi_ddiv>
 8005442:	ec53 2b19 	vmov	r2, r3, d9
 8005446:	f7fa ff3f 	bl	80002c8 <__aeabi_dsub>
 800544a:	9d00      	ldr	r5, [sp, #0]
 800544c:	ec41 0b19 	vmov	d9, r0, r1
 8005450:	4649      	mov	r1, r9
 8005452:	4640      	mov	r0, r8
 8005454:	f7fb fba0 	bl	8000b98 <__aeabi_d2iz>
 8005458:	4606      	mov	r6, r0
 800545a:	f7fb f883 	bl	8000564 <__aeabi_i2d>
 800545e:	4602      	mov	r2, r0
 8005460:	460b      	mov	r3, r1
 8005462:	4640      	mov	r0, r8
 8005464:	4649      	mov	r1, r9
 8005466:	f7fa ff2f 	bl	80002c8 <__aeabi_dsub>
 800546a:	3630      	adds	r6, #48	; 0x30
 800546c:	f805 6b01 	strb.w	r6, [r5], #1
 8005470:	ec53 2b19 	vmov	r2, r3, d9
 8005474:	4680      	mov	r8, r0
 8005476:	4689      	mov	r9, r1
 8005478:	f7fb fb50 	bl	8000b1c <__aeabi_dcmplt>
 800547c:	2800      	cmp	r0, #0
 800547e:	d164      	bne.n	800554a <_dtoa_r+0x62a>
 8005480:	4642      	mov	r2, r8
 8005482:	464b      	mov	r3, r9
 8005484:	4937      	ldr	r1, [pc, #220]	; (8005564 <_dtoa_r+0x644>)
 8005486:	2000      	movs	r0, #0
 8005488:	f7fa ff1e 	bl	80002c8 <__aeabi_dsub>
 800548c:	ec53 2b19 	vmov	r2, r3, d9
 8005490:	f7fb fb44 	bl	8000b1c <__aeabi_dcmplt>
 8005494:	2800      	cmp	r0, #0
 8005496:	f040 80b6 	bne.w	8005606 <_dtoa_r+0x6e6>
 800549a:	9b02      	ldr	r3, [sp, #8]
 800549c:	429d      	cmp	r5, r3
 800549e:	f43f af7c 	beq.w	800539a <_dtoa_r+0x47a>
 80054a2:	4b31      	ldr	r3, [pc, #196]	; (8005568 <_dtoa_r+0x648>)
 80054a4:	ec51 0b19 	vmov	r0, r1, d9
 80054a8:	2200      	movs	r2, #0
 80054aa:	f7fb f8c5 	bl	8000638 <__aeabi_dmul>
 80054ae:	4b2e      	ldr	r3, [pc, #184]	; (8005568 <_dtoa_r+0x648>)
 80054b0:	ec41 0b19 	vmov	d9, r0, r1
 80054b4:	2200      	movs	r2, #0
 80054b6:	4640      	mov	r0, r8
 80054b8:	4649      	mov	r1, r9
 80054ba:	f7fb f8bd 	bl	8000638 <__aeabi_dmul>
 80054be:	4680      	mov	r8, r0
 80054c0:	4689      	mov	r9, r1
 80054c2:	e7c5      	b.n	8005450 <_dtoa_r+0x530>
 80054c4:	ec51 0b17 	vmov	r0, r1, d7
 80054c8:	f7fb f8b6 	bl	8000638 <__aeabi_dmul>
 80054cc:	9b02      	ldr	r3, [sp, #8]
 80054ce:	9d00      	ldr	r5, [sp, #0]
 80054d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80054d2:	ec41 0b19 	vmov	d9, r0, r1
 80054d6:	4649      	mov	r1, r9
 80054d8:	4640      	mov	r0, r8
 80054da:	f7fb fb5d 	bl	8000b98 <__aeabi_d2iz>
 80054de:	4606      	mov	r6, r0
 80054e0:	f7fb f840 	bl	8000564 <__aeabi_i2d>
 80054e4:	3630      	adds	r6, #48	; 0x30
 80054e6:	4602      	mov	r2, r0
 80054e8:	460b      	mov	r3, r1
 80054ea:	4640      	mov	r0, r8
 80054ec:	4649      	mov	r1, r9
 80054ee:	f7fa feeb 	bl	80002c8 <__aeabi_dsub>
 80054f2:	f805 6b01 	strb.w	r6, [r5], #1
 80054f6:	9b02      	ldr	r3, [sp, #8]
 80054f8:	429d      	cmp	r5, r3
 80054fa:	4680      	mov	r8, r0
 80054fc:	4689      	mov	r9, r1
 80054fe:	f04f 0200 	mov.w	r2, #0
 8005502:	d124      	bne.n	800554e <_dtoa_r+0x62e>
 8005504:	4b1b      	ldr	r3, [pc, #108]	; (8005574 <_dtoa_r+0x654>)
 8005506:	ec51 0b19 	vmov	r0, r1, d9
 800550a:	f7fa fedf 	bl	80002cc <__adddf3>
 800550e:	4602      	mov	r2, r0
 8005510:	460b      	mov	r3, r1
 8005512:	4640      	mov	r0, r8
 8005514:	4649      	mov	r1, r9
 8005516:	f7fb fb1f 	bl	8000b58 <__aeabi_dcmpgt>
 800551a:	2800      	cmp	r0, #0
 800551c:	d173      	bne.n	8005606 <_dtoa_r+0x6e6>
 800551e:	ec53 2b19 	vmov	r2, r3, d9
 8005522:	4914      	ldr	r1, [pc, #80]	; (8005574 <_dtoa_r+0x654>)
 8005524:	2000      	movs	r0, #0
 8005526:	f7fa fecf 	bl	80002c8 <__aeabi_dsub>
 800552a:	4602      	mov	r2, r0
 800552c:	460b      	mov	r3, r1
 800552e:	4640      	mov	r0, r8
 8005530:	4649      	mov	r1, r9
 8005532:	f7fb faf3 	bl	8000b1c <__aeabi_dcmplt>
 8005536:	2800      	cmp	r0, #0
 8005538:	f43f af2f 	beq.w	800539a <_dtoa_r+0x47a>
 800553c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800553e:	1e6b      	subs	r3, r5, #1
 8005540:	930f      	str	r3, [sp, #60]	; 0x3c
 8005542:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005546:	2b30      	cmp	r3, #48	; 0x30
 8005548:	d0f8      	beq.n	800553c <_dtoa_r+0x61c>
 800554a:	46bb      	mov	fp, r7
 800554c:	e04a      	b.n	80055e4 <_dtoa_r+0x6c4>
 800554e:	4b06      	ldr	r3, [pc, #24]	; (8005568 <_dtoa_r+0x648>)
 8005550:	f7fb f872 	bl	8000638 <__aeabi_dmul>
 8005554:	4680      	mov	r8, r0
 8005556:	4689      	mov	r9, r1
 8005558:	e7bd      	b.n	80054d6 <_dtoa_r+0x5b6>
 800555a:	bf00      	nop
 800555c:	08008670 	.word	0x08008670
 8005560:	08008648 	.word	0x08008648
 8005564:	3ff00000 	.word	0x3ff00000
 8005568:	40240000 	.word	0x40240000
 800556c:	401c0000 	.word	0x401c0000
 8005570:	40140000 	.word	0x40140000
 8005574:	3fe00000 	.word	0x3fe00000
 8005578:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800557c:	9d00      	ldr	r5, [sp, #0]
 800557e:	4642      	mov	r2, r8
 8005580:	464b      	mov	r3, r9
 8005582:	4630      	mov	r0, r6
 8005584:	4639      	mov	r1, r7
 8005586:	f7fb f981 	bl	800088c <__aeabi_ddiv>
 800558a:	f7fb fb05 	bl	8000b98 <__aeabi_d2iz>
 800558e:	9001      	str	r0, [sp, #4]
 8005590:	f7fa ffe8 	bl	8000564 <__aeabi_i2d>
 8005594:	4642      	mov	r2, r8
 8005596:	464b      	mov	r3, r9
 8005598:	f7fb f84e 	bl	8000638 <__aeabi_dmul>
 800559c:	4602      	mov	r2, r0
 800559e:	460b      	mov	r3, r1
 80055a0:	4630      	mov	r0, r6
 80055a2:	4639      	mov	r1, r7
 80055a4:	f7fa fe90 	bl	80002c8 <__aeabi_dsub>
 80055a8:	9e01      	ldr	r6, [sp, #4]
 80055aa:	9f04      	ldr	r7, [sp, #16]
 80055ac:	3630      	adds	r6, #48	; 0x30
 80055ae:	f805 6b01 	strb.w	r6, [r5], #1
 80055b2:	9e00      	ldr	r6, [sp, #0]
 80055b4:	1bae      	subs	r6, r5, r6
 80055b6:	42b7      	cmp	r7, r6
 80055b8:	4602      	mov	r2, r0
 80055ba:	460b      	mov	r3, r1
 80055bc:	d134      	bne.n	8005628 <_dtoa_r+0x708>
 80055be:	f7fa fe85 	bl	80002cc <__adddf3>
 80055c2:	4642      	mov	r2, r8
 80055c4:	464b      	mov	r3, r9
 80055c6:	4606      	mov	r6, r0
 80055c8:	460f      	mov	r7, r1
 80055ca:	f7fb fac5 	bl	8000b58 <__aeabi_dcmpgt>
 80055ce:	b9c8      	cbnz	r0, 8005604 <_dtoa_r+0x6e4>
 80055d0:	4642      	mov	r2, r8
 80055d2:	464b      	mov	r3, r9
 80055d4:	4630      	mov	r0, r6
 80055d6:	4639      	mov	r1, r7
 80055d8:	f7fb fa96 	bl	8000b08 <__aeabi_dcmpeq>
 80055dc:	b110      	cbz	r0, 80055e4 <_dtoa_r+0x6c4>
 80055de:	9b01      	ldr	r3, [sp, #4]
 80055e0:	07db      	lsls	r3, r3, #31
 80055e2:	d40f      	bmi.n	8005604 <_dtoa_r+0x6e4>
 80055e4:	4651      	mov	r1, sl
 80055e6:	4620      	mov	r0, r4
 80055e8:	f001 fc2e 	bl	8006e48 <_Bfree>
 80055ec:	2300      	movs	r3, #0
 80055ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80055f0:	702b      	strb	r3, [r5, #0]
 80055f2:	f10b 0301 	add.w	r3, fp, #1
 80055f6:	6013      	str	r3, [r2, #0]
 80055f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f43f ace2 	beq.w	8004fc4 <_dtoa_r+0xa4>
 8005600:	601d      	str	r5, [r3, #0]
 8005602:	e4df      	b.n	8004fc4 <_dtoa_r+0xa4>
 8005604:	465f      	mov	r7, fp
 8005606:	462b      	mov	r3, r5
 8005608:	461d      	mov	r5, r3
 800560a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800560e:	2a39      	cmp	r2, #57	; 0x39
 8005610:	d106      	bne.n	8005620 <_dtoa_r+0x700>
 8005612:	9a00      	ldr	r2, [sp, #0]
 8005614:	429a      	cmp	r2, r3
 8005616:	d1f7      	bne.n	8005608 <_dtoa_r+0x6e8>
 8005618:	9900      	ldr	r1, [sp, #0]
 800561a:	2230      	movs	r2, #48	; 0x30
 800561c:	3701      	adds	r7, #1
 800561e:	700a      	strb	r2, [r1, #0]
 8005620:	781a      	ldrb	r2, [r3, #0]
 8005622:	3201      	adds	r2, #1
 8005624:	701a      	strb	r2, [r3, #0]
 8005626:	e790      	b.n	800554a <_dtoa_r+0x62a>
 8005628:	4ba3      	ldr	r3, [pc, #652]	; (80058b8 <_dtoa_r+0x998>)
 800562a:	2200      	movs	r2, #0
 800562c:	f7fb f804 	bl	8000638 <__aeabi_dmul>
 8005630:	2200      	movs	r2, #0
 8005632:	2300      	movs	r3, #0
 8005634:	4606      	mov	r6, r0
 8005636:	460f      	mov	r7, r1
 8005638:	f7fb fa66 	bl	8000b08 <__aeabi_dcmpeq>
 800563c:	2800      	cmp	r0, #0
 800563e:	d09e      	beq.n	800557e <_dtoa_r+0x65e>
 8005640:	e7d0      	b.n	80055e4 <_dtoa_r+0x6c4>
 8005642:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005644:	2a00      	cmp	r2, #0
 8005646:	f000 80ca 	beq.w	80057de <_dtoa_r+0x8be>
 800564a:	9a07      	ldr	r2, [sp, #28]
 800564c:	2a01      	cmp	r2, #1
 800564e:	f300 80ad 	bgt.w	80057ac <_dtoa_r+0x88c>
 8005652:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005654:	2a00      	cmp	r2, #0
 8005656:	f000 80a5 	beq.w	80057a4 <_dtoa_r+0x884>
 800565a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800565e:	9e08      	ldr	r6, [sp, #32]
 8005660:	9d05      	ldr	r5, [sp, #20]
 8005662:	9a05      	ldr	r2, [sp, #20]
 8005664:	441a      	add	r2, r3
 8005666:	9205      	str	r2, [sp, #20]
 8005668:	9a06      	ldr	r2, [sp, #24]
 800566a:	2101      	movs	r1, #1
 800566c:	441a      	add	r2, r3
 800566e:	4620      	mov	r0, r4
 8005670:	9206      	str	r2, [sp, #24]
 8005672:	f001 fce9 	bl	8007048 <__i2b>
 8005676:	4607      	mov	r7, r0
 8005678:	b165      	cbz	r5, 8005694 <_dtoa_r+0x774>
 800567a:	9b06      	ldr	r3, [sp, #24]
 800567c:	2b00      	cmp	r3, #0
 800567e:	dd09      	ble.n	8005694 <_dtoa_r+0x774>
 8005680:	42ab      	cmp	r3, r5
 8005682:	9a05      	ldr	r2, [sp, #20]
 8005684:	bfa8      	it	ge
 8005686:	462b      	movge	r3, r5
 8005688:	1ad2      	subs	r2, r2, r3
 800568a:	9205      	str	r2, [sp, #20]
 800568c:	9a06      	ldr	r2, [sp, #24]
 800568e:	1aed      	subs	r5, r5, r3
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	9306      	str	r3, [sp, #24]
 8005694:	9b08      	ldr	r3, [sp, #32]
 8005696:	b1f3      	cbz	r3, 80056d6 <_dtoa_r+0x7b6>
 8005698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800569a:	2b00      	cmp	r3, #0
 800569c:	f000 80a3 	beq.w	80057e6 <_dtoa_r+0x8c6>
 80056a0:	2e00      	cmp	r6, #0
 80056a2:	dd10      	ble.n	80056c6 <_dtoa_r+0x7a6>
 80056a4:	4639      	mov	r1, r7
 80056a6:	4632      	mov	r2, r6
 80056a8:	4620      	mov	r0, r4
 80056aa:	f001 fd8d 	bl	80071c8 <__pow5mult>
 80056ae:	4652      	mov	r2, sl
 80056b0:	4601      	mov	r1, r0
 80056b2:	4607      	mov	r7, r0
 80056b4:	4620      	mov	r0, r4
 80056b6:	f001 fcdd 	bl	8007074 <__multiply>
 80056ba:	4651      	mov	r1, sl
 80056bc:	4680      	mov	r8, r0
 80056be:	4620      	mov	r0, r4
 80056c0:	f001 fbc2 	bl	8006e48 <_Bfree>
 80056c4:	46c2      	mov	sl, r8
 80056c6:	9b08      	ldr	r3, [sp, #32]
 80056c8:	1b9a      	subs	r2, r3, r6
 80056ca:	d004      	beq.n	80056d6 <_dtoa_r+0x7b6>
 80056cc:	4651      	mov	r1, sl
 80056ce:	4620      	mov	r0, r4
 80056d0:	f001 fd7a 	bl	80071c8 <__pow5mult>
 80056d4:	4682      	mov	sl, r0
 80056d6:	2101      	movs	r1, #1
 80056d8:	4620      	mov	r0, r4
 80056da:	f001 fcb5 	bl	8007048 <__i2b>
 80056de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	4606      	mov	r6, r0
 80056e4:	f340 8081 	ble.w	80057ea <_dtoa_r+0x8ca>
 80056e8:	461a      	mov	r2, r3
 80056ea:	4601      	mov	r1, r0
 80056ec:	4620      	mov	r0, r4
 80056ee:	f001 fd6b 	bl	80071c8 <__pow5mult>
 80056f2:	9b07      	ldr	r3, [sp, #28]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	4606      	mov	r6, r0
 80056f8:	dd7a      	ble.n	80057f0 <_dtoa_r+0x8d0>
 80056fa:	f04f 0800 	mov.w	r8, #0
 80056fe:	6933      	ldr	r3, [r6, #16]
 8005700:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005704:	6918      	ldr	r0, [r3, #16]
 8005706:	f001 fc51 	bl	8006fac <__hi0bits>
 800570a:	f1c0 0020 	rsb	r0, r0, #32
 800570e:	9b06      	ldr	r3, [sp, #24]
 8005710:	4418      	add	r0, r3
 8005712:	f010 001f 	ands.w	r0, r0, #31
 8005716:	f000 8094 	beq.w	8005842 <_dtoa_r+0x922>
 800571a:	f1c0 0320 	rsb	r3, r0, #32
 800571e:	2b04      	cmp	r3, #4
 8005720:	f340 8085 	ble.w	800582e <_dtoa_r+0x90e>
 8005724:	9b05      	ldr	r3, [sp, #20]
 8005726:	f1c0 001c 	rsb	r0, r0, #28
 800572a:	4403      	add	r3, r0
 800572c:	9305      	str	r3, [sp, #20]
 800572e:	9b06      	ldr	r3, [sp, #24]
 8005730:	4403      	add	r3, r0
 8005732:	4405      	add	r5, r0
 8005734:	9306      	str	r3, [sp, #24]
 8005736:	9b05      	ldr	r3, [sp, #20]
 8005738:	2b00      	cmp	r3, #0
 800573a:	dd05      	ble.n	8005748 <_dtoa_r+0x828>
 800573c:	4651      	mov	r1, sl
 800573e:	461a      	mov	r2, r3
 8005740:	4620      	mov	r0, r4
 8005742:	f001 fd9b 	bl	800727c <__lshift>
 8005746:	4682      	mov	sl, r0
 8005748:	9b06      	ldr	r3, [sp, #24]
 800574a:	2b00      	cmp	r3, #0
 800574c:	dd05      	ble.n	800575a <_dtoa_r+0x83a>
 800574e:	4631      	mov	r1, r6
 8005750:	461a      	mov	r2, r3
 8005752:	4620      	mov	r0, r4
 8005754:	f001 fd92 	bl	800727c <__lshift>
 8005758:	4606      	mov	r6, r0
 800575a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800575c:	2b00      	cmp	r3, #0
 800575e:	d072      	beq.n	8005846 <_dtoa_r+0x926>
 8005760:	4631      	mov	r1, r6
 8005762:	4650      	mov	r0, sl
 8005764:	f001 fdf6 	bl	8007354 <__mcmp>
 8005768:	2800      	cmp	r0, #0
 800576a:	da6c      	bge.n	8005846 <_dtoa_r+0x926>
 800576c:	2300      	movs	r3, #0
 800576e:	4651      	mov	r1, sl
 8005770:	220a      	movs	r2, #10
 8005772:	4620      	mov	r0, r4
 8005774:	f001 fb8a 	bl	8006e8c <__multadd>
 8005778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800577a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800577e:	4682      	mov	sl, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	f000 81b0 	beq.w	8005ae6 <_dtoa_r+0xbc6>
 8005786:	2300      	movs	r3, #0
 8005788:	4639      	mov	r1, r7
 800578a:	220a      	movs	r2, #10
 800578c:	4620      	mov	r0, r4
 800578e:	f001 fb7d 	bl	8006e8c <__multadd>
 8005792:	9b01      	ldr	r3, [sp, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	4607      	mov	r7, r0
 8005798:	f300 8096 	bgt.w	80058c8 <_dtoa_r+0x9a8>
 800579c:	9b07      	ldr	r3, [sp, #28]
 800579e:	2b02      	cmp	r3, #2
 80057a0:	dc59      	bgt.n	8005856 <_dtoa_r+0x936>
 80057a2:	e091      	b.n	80058c8 <_dtoa_r+0x9a8>
 80057a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80057a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80057aa:	e758      	b.n	800565e <_dtoa_r+0x73e>
 80057ac:	9b04      	ldr	r3, [sp, #16]
 80057ae:	1e5e      	subs	r6, r3, #1
 80057b0:	9b08      	ldr	r3, [sp, #32]
 80057b2:	42b3      	cmp	r3, r6
 80057b4:	bfbf      	itttt	lt
 80057b6:	9b08      	ldrlt	r3, [sp, #32]
 80057b8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80057ba:	9608      	strlt	r6, [sp, #32]
 80057bc:	1af3      	sublt	r3, r6, r3
 80057be:	bfb4      	ite	lt
 80057c0:	18d2      	addlt	r2, r2, r3
 80057c2:	1b9e      	subge	r6, r3, r6
 80057c4:	9b04      	ldr	r3, [sp, #16]
 80057c6:	bfbc      	itt	lt
 80057c8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80057ca:	2600      	movlt	r6, #0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	bfb7      	itett	lt
 80057d0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80057d4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80057d8:	1a9d      	sublt	r5, r3, r2
 80057da:	2300      	movlt	r3, #0
 80057dc:	e741      	b.n	8005662 <_dtoa_r+0x742>
 80057de:	9e08      	ldr	r6, [sp, #32]
 80057e0:	9d05      	ldr	r5, [sp, #20]
 80057e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80057e4:	e748      	b.n	8005678 <_dtoa_r+0x758>
 80057e6:	9a08      	ldr	r2, [sp, #32]
 80057e8:	e770      	b.n	80056cc <_dtoa_r+0x7ac>
 80057ea:	9b07      	ldr	r3, [sp, #28]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	dc19      	bgt.n	8005824 <_dtoa_r+0x904>
 80057f0:	9b02      	ldr	r3, [sp, #8]
 80057f2:	b9bb      	cbnz	r3, 8005824 <_dtoa_r+0x904>
 80057f4:	9b03      	ldr	r3, [sp, #12]
 80057f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057fa:	b99b      	cbnz	r3, 8005824 <_dtoa_r+0x904>
 80057fc:	9b03      	ldr	r3, [sp, #12]
 80057fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005802:	0d1b      	lsrs	r3, r3, #20
 8005804:	051b      	lsls	r3, r3, #20
 8005806:	b183      	cbz	r3, 800582a <_dtoa_r+0x90a>
 8005808:	9b05      	ldr	r3, [sp, #20]
 800580a:	3301      	adds	r3, #1
 800580c:	9305      	str	r3, [sp, #20]
 800580e:	9b06      	ldr	r3, [sp, #24]
 8005810:	3301      	adds	r3, #1
 8005812:	9306      	str	r3, [sp, #24]
 8005814:	f04f 0801 	mov.w	r8, #1
 8005818:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800581a:	2b00      	cmp	r3, #0
 800581c:	f47f af6f 	bne.w	80056fe <_dtoa_r+0x7de>
 8005820:	2001      	movs	r0, #1
 8005822:	e774      	b.n	800570e <_dtoa_r+0x7ee>
 8005824:	f04f 0800 	mov.w	r8, #0
 8005828:	e7f6      	b.n	8005818 <_dtoa_r+0x8f8>
 800582a:	4698      	mov	r8, r3
 800582c:	e7f4      	b.n	8005818 <_dtoa_r+0x8f8>
 800582e:	d082      	beq.n	8005736 <_dtoa_r+0x816>
 8005830:	9a05      	ldr	r2, [sp, #20]
 8005832:	331c      	adds	r3, #28
 8005834:	441a      	add	r2, r3
 8005836:	9205      	str	r2, [sp, #20]
 8005838:	9a06      	ldr	r2, [sp, #24]
 800583a:	441a      	add	r2, r3
 800583c:	441d      	add	r5, r3
 800583e:	9206      	str	r2, [sp, #24]
 8005840:	e779      	b.n	8005736 <_dtoa_r+0x816>
 8005842:	4603      	mov	r3, r0
 8005844:	e7f4      	b.n	8005830 <_dtoa_r+0x910>
 8005846:	9b04      	ldr	r3, [sp, #16]
 8005848:	2b00      	cmp	r3, #0
 800584a:	dc37      	bgt.n	80058bc <_dtoa_r+0x99c>
 800584c:	9b07      	ldr	r3, [sp, #28]
 800584e:	2b02      	cmp	r3, #2
 8005850:	dd34      	ble.n	80058bc <_dtoa_r+0x99c>
 8005852:	9b04      	ldr	r3, [sp, #16]
 8005854:	9301      	str	r3, [sp, #4]
 8005856:	9b01      	ldr	r3, [sp, #4]
 8005858:	b963      	cbnz	r3, 8005874 <_dtoa_r+0x954>
 800585a:	4631      	mov	r1, r6
 800585c:	2205      	movs	r2, #5
 800585e:	4620      	mov	r0, r4
 8005860:	f001 fb14 	bl	8006e8c <__multadd>
 8005864:	4601      	mov	r1, r0
 8005866:	4606      	mov	r6, r0
 8005868:	4650      	mov	r0, sl
 800586a:	f001 fd73 	bl	8007354 <__mcmp>
 800586e:	2800      	cmp	r0, #0
 8005870:	f73f adbb 	bgt.w	80053ea <_dtoa_r+0x4ca>
 8005874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005876:	9d00      	ldr	r5, [sp, #0]
 8005878:	ea6f 0b03 	mvn.w	fp, r3
 800587c:	f04f 0800 	mov.w	r8, #0
 8005880:	4631      	mov	r1, r6
 8005882:	4620      	mov	r0, r4
 8005884:	f001 fae0 	bl	8006e48 <_Bfree>
 8005888:	2f00      	cmp	r7, #0
 800588a:	f43f aeab 	beq.w	80055e4 <_dtoa_r+0x6c4>
 800588e:	f1b8 0f00 	cmp.w	r8, #0
 8005892:	d005      	beq.n	80058a0 <_dtoa_r+0x980>
 8005894:	45b8      	cmp	r8, r7
 8005896:	d003      	beq.n	80058a0 <_dtoa_r+0x980>
 8005898:	4641      	mov	r1, r8
 800589a:	4620      	mov	r0, r4
 800589c:	f001 fad4 	bl	8006e48 <_Bfree>
 80058a0:	4639      	mov	r1, r7
 80058a2:	4620      	mov	r0, r4
 80058a4:	f001 fad0 	bl	8006e48 <_Bfree>
 80058a8:	e69c      	b.n	80055e4 <_dtoa_r+0x6c4>
 80058aa:	2600      	movs	r6, #0
 80058ac:	4637      	mov	r7, r6
 80058ae:	e7e1      	b.n	8005874 <_dtoa_r+0x954>
 80058b0:	46bb      	mov	fp, r7
 80058b2:	4637      	mov	r7, r6
 80058b4:	e599      	b.n	80053ea <_dtoa_r+0x4ca>
 80058b6:	bf00      	nop
 80058b8:	40240000 	.word	0x40240000
 80058bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058be:	2b00      	cmp	r3, #0
 80058c0:	f000 80c8 	beq.w	8005a54 <_dtoa_r+0xb34>
 80058c4:	9b04      	ldr	r3, [sp, #16]
 80058c6:	9301      	str	r3, [sp, #4]
 80058c8:	2d00      	cmp	r5, #0
 80058ca:	dd05      	ble.n	80058d8 <_dtoa_r+0x9b8>
 80058cc:	4639      	mov	r1, r7
 80058ce:	462a      	mov	r2, r5
 80058d0:	4620      	mov	r0, r4
 80058d2:	f001 fcd3 	bl	800727c <__lshift>
 80058d6:	4607      	mov	r7, r0
 80058d8:	f1b8 0f00 	cmp.w	r8, #0
 80058dc:	d05b      	beq.n	8005996 <_dtoa_r+0xa76>
 80058de:	6879      	ldr	r1, [r7, #4]
 80058e0:	4620      	mov	r0, r4
 80058e2:	f001 fa71 	bl	8006dc8 <_Balloc>
 80058e6:	4605      	mov	r5, r0
 80058e8:	b928      	cbnz	r0, 80058f6 <_dtoa_r+0x9d6>
 80058ea:	4b83      	ldr	r3, [pc, #524]	; (8005af8 <_dtoa_r+0xbd8>)
 80058ec:	4602      	mov	r2, r0
 80058ee:	f240 21ef 	movw	r1, #751	; 0x2ef
 80058f2:	f7ff bb2e 	b.w	8004f52 <_dtoa_r+0x32>
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	3202      	adds	r2, #2
 80058fa:	0092      	lsls	r2, r2, #2
 80058fc:	f107 010c 	add.w	r1, r7, #12
 8005900:	300c      	adds	r0, #12
 8005902:	f7ff fa66 	bl	8004dd2 <memcpy>
 8005906:	2201      	movs	r2, #1
 8005908:	4629      	mov	r1, r5
 800590a:	4620      	mov	r0, r4
 800590c:	f001 fcb6 	bl	800727c <__lshift>
 8005910:	9b00      	ldr	r3, [sp, #0]
 8005912:	3301      	adds	r3, #1
 8005914:	9304      	str	r3, [sp, #16]
 8005916:	e9dd 2300 	ldrd	r2, r3, [sp]
 800591a:	4413      	add	r3, r2
 800591c:	9308      	str	r3, [sp, #32]
 800591e:	9b02      	ldr	r3, [sp, #8]
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	46b8      	mov	r8, r7
 8005926:	9306      	str	r3, [sp, #24]
 8005928:	4607      	mov	r7, r0
 800592a:	9b04      	ldr	r3, [sp, #16]
 800592c:	4631      	mov	r1, r6
 800592e:	3b01      	subs	r3, #1
 8005930:	4650      	mov	r0, sl
 8005932:	9301      	str	r3, [sp, #4]
 8005934:	f7ff fa6a 	bl	8004e0c <quorem>
 8005938:	4641      	mov	r1, r8
 800593a:	9002      	str	r0, [sp, #8]
 800593c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005940:	4650      	mov	r0, sl
 8005942:	f001 fd07 	bl	8007354 <__mcmp>
 8005946:	463a      	mov	r2, r7
 8005948:	9005      	str	r0, [sp, #20]
 800594a:	4631      	mov	r1, r6
 800594c:	4620      	mov	r0, r4
 800594e:	f001 fd1d 	bl	800738c <__mdiff>
 8005952:	68c2      	ldr	r2, [r0, #12]
 8005954:	4605      	mov	r5, r0
 8005956:	bb02      	cbnz	r2, 800599a <_dtoa_r+0xa7a>
 8005958:	4601      	mov	r1, r0
 800595a:	4650      	mov	r0, sl
 800595c:	f001 fcfa 	bl	8007354 <__mcmp>
 8005960:	4602      	mov	r2, r0
 8005962:	4629      	mov	r1, r5
 8005964:	4620      	mov	r0, r4
 8005966:	9209      	str	r2, [sp, #36]	; 0x24
 8005968:	f001 fa6e 	bl	8006e48 <_Bfree>
 800596c:	9b07      	ldr	r3, [sp, #28]
 800596e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005970:	9d04      	ldr	r5, [sp, #16]
 8005972:	ea43 0102 	orr.w	r1, r3, r2
 8005976:	9b06      	ldr	r3, [sp, #24]
 8005978:	4319      	orrs	r1, r3
 800597a:	d110      	bne.n	800599e <_dtoa_r+0xa7e>
 800597c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005980:	d029      	beq.n	80059d6 <_dtoa_r+0xab6>
 8005982:	9b05      	ldr	r3, [sp, #20]
 8005984:	2b00      	cmp	r3, #0
 8005986:	dd02      	ble.n	800598e <_dtoa_r+0xa6e>
 8005988:	9b02      	ldr	r3, [sp, #8]
 800598a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800598e:	9b01      	ldr	r3, [sp, #4]
 8005990:	f883 9000 	strb.w	r9, [r3]
 8005994:	e774      	b.n	8005880 <_dtoa_r+0x960>
 8005996:	4638      	mov	r0, r7
 8005998:	e7ba      	b.n	8005910 <_dtoa_r+0x9f0>
 800599a:	2201      	movs	r2, #1
 800599c:	e7e1      	b.n	8005962 <_dtoa_r+0xa42>
 800599e:	9b05      	ldr	r3, [sp, #20]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	db04      	blt.n	80059ae <_dtoa_r+0xa8e>
 80059a4:	9907      	ldr	r1, [sp, #28]
 80059a6:	430b      	orrs	r3, r1
 80059a8:	9906      	ldr	r1, [sp, #24]
 80059aa:	430b      	orrs	r3, r1
 80059ac:	d120      	bne.n	80059f0 <_dtoa_r+0xad0>
 80059ae:	2a00      	cmp	r2, #0
 80059b0:	dded      	ble.n	800598e <_dtoa_r+0xa6e>
 80059b2:	4651      	mov	r1, sl
 80059b4:	2201      	movs	r2, #1
 80059b6:	4620      	mov	r0, r4
 80059b8:	f001 fc60 	bl	800727c <__lshift>
 80059bc:	4631      	mov	r1, r6
 80059be:	4682      	mov	sl, r0
 80059c0:	f001 fcc8 	bl	8007354 <__mcmp>
 80059c4:	2800      	cmp	r0, #0
 80059c6:	dc03      	bgt.n	80059d0 <_dtoa_r+0xab0>
 80059c8:	d1e1      	bne.n	800598e <_dtoa_r+0xa6e>
 80059ca:	f019 0f01 	tst.w	r9, #1
 80059ce:	d0de      	beq.n	800598e <_dtoa_r+0xa6e>
 80059d0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80059d4:	d1d8      	bne.n	8005988 <_dtoa_r+0xa68>
 80059d6:	9a01      	ldr	r2, [sp, #4]
 80059d8:	2339      	movs	r3, #57	; 0x39
 80059da:	7013      	strb	r3, [r2, #0]
 80059dc:	462b      	mov	r3, r5
 80059de:	461d      	mov	r5, r3
 80059e0:	3b01      	subs	r3, #1
 80059e2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80059e6:	2a39      	cmp	r2, #57	; 0x39
 80059e8:	d06c      	beq.n	8005ac4 <_dtoa_r+0xba4>
 80059ea:	3201      	adds	r2, #1
 80059ec:	701a      	strb	r2, [r3, #0]
 80059ee:	e747      	b.n	8005880 <_dtoa_r+0x960>
 80059f0:	2a00      	cmp	r2, #0
 80059f2:	dd07      	ble.n	8005a04 <_dtoa_r+0xae4>
 80059f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80059f8:	d0ed      	beq.n	80059d6 <_dtoa_r+0xab6>
 80059fa:	9a01      	ldr	r2, [sp, #4]
 80059fc:	f109 0301 	add.w	r3, r9, #1
 8005a00:	7013      	strb	r3, [r2, #0]
 8005a02:	e73d      	b.n	8005880 <_dtoa_r+0x960>
 8005a04:	9b04      	ldr	r3, [sp, #16]
 8005a06:	9a08      	ldr	r2, [sp, #32]
 8005a08:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d043      	beq.n	8005a98 <_dtoa_r+0xb78>
 8005a10:	4651      	mov	r1, sl
 8005a12:	2300      	movs	r3, #0
 8005a14:	220a      	movs	r2, #10
 8005a16:	4620      	mov	r0, r4
 8005a18:	f001 fa38 	bl	8006e8c <__multadd>
 8005a1c:	45b8      	cmp	r8, r7
 8005a1e:	4682      	mov	sl, r0
 8005a20:	f04f 0300 	mov.w	r3, #0
 8005a24:	f04f 020a 	mov.w	r2, #10
 8005a28:	4641      	mov	r1, r8
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	d107      	bne.n	8005a3e <_dtoa_r+0xb1e>
 8005a2e:	f001 fa2d 	bl	8006e8c <__multadd>
 8005a32:	4680      	mov	r8, r0
 8005a34:	4607      	mov	r7, r0
 8005a36:	9b04      	ldr	r3, [sp, #16]
 8005a38:	3301      	adds	r3, #1
 8005a3a:	9304      	str	r3, [sp, #16]
 8005a3c:	e775      	b.n	800592a <_dtoa_r+0xa0a>
 8005a3e:	f001 fa25 	bl	8006e8c <__multadd>
 8005a42:	4639      	mov	r1, r7
 8005a44:	4680      	mov	r8, r0
 8005a46:	2300      	movs	r3, #0
 8005a48:	220a      	movs	r2, #10
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	f001 fa1e 	bl	8006e8c <__multadd>
 8005a50:	4607      	mov	r7, r0
 8005a52:	e7f0      	b.n	8005a36 <_dtoa_r+0xb16>
 8005a54:	9b04      	ldr	r3, [sp, #16]
 8005a56:	9301      	str	r3, [sp, #4]
 8005a58:	9d00      	ldr	r5, [sp, #0]
 8005a5a:	4631      	mov	r1, r6
 8005a5c:	4650      	mov	r0, sl
 8005a5e:	f7ff f9d5 	bl	8004e0c <quorem>
 8005a62:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005a66:	9b00      	ldr	r3, [sp, #0]
 8005a68:	f805 9b01 	strb.w	r9, [r5], #1
 8005a6c:	1aea      	subs	r2, r5, r3
 8005a6e:	9b01      	ldr	r3, [sp, #4]
 8005a70:	4293      	cmp	r3, r2
 8005a72:	dd07      	ble.n	8005a84 <_dtoa_r+0xb64>
 8005a74:	4651      	mov	r1, sl
 8005a76:	2300      	movs	r3, #0
 8005a78:	220a      	movs	r2, #10
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	f001 fa06 	bl	8006e8c <__multadd>
 8005a80:	4682      	mov	sl, r0
 8005a82:	e7ea      	b.n	8005a5a <_dtoa_r+0xb3a>
 8005a84:	9b01      	ldr	r3, [sp, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	bfc8      	it	gt
 8005a8a:	461d      	movgt	r5, r3
 8005a8c:	9b00      	ldr	r3, [sp, #0]
 8005a8e:	bfd8      	it	le
 8005a90:	2501      	movle	r5, #1
 8005a92:	441d      	add	r5, r3
 8005a94:	f04f 0800 	mov.w	r8, #0
 8005a98:	4651      	mov	r1, sl
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	f001 fbed 	bl	800727c <__lshift>
 8005aa2:	4631      	mov	r1, r6
 8005aa4:	4682      	mov	sl, r0
 8005aa6:	f001 fc55 	bl	8007354 <__mcmp>
 8005aaa:	2800      	cmp	r0, #0
 8005aac:	dc96      	bgt.n	80059dc <_dtoa_r+0xabc>
 8005aae:	d102      	bne.n	8005ab6 <_dtoa_r+0xb96>
 8005ab0:	f019 0f01 	tst.w	r9, #1
 8005ab4:	d192      	bne.n	80059dc <_dtoa_r+0xabc>
 8005ab6:	462b      	mov	r3, r5
 8005ab8:	461d      	mov	r5, r3
 8005aba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005abe:	2a30      	cmp	r2, #48	; 0x30
 8005ac0:	d0fa      	beq.n	8005ab8 <_dtoa_r+0xb98>
 8005ac2:	e6dd      	b.n	8005880 <_dtoa_r+0x960>
 8005ac4:	9a00      	ldr	r2, [sp, #0]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d189      	bne.n	80059de <_dtoa_r+0xabe>
 8005aca:	f10b 0b01 	add.w	fp, fp, #1
 8005ace:	2331      	movs	r3, #49	; 0x31
 8005ad0:	e796      	b.n	8005a00 <_dtoa_r+0xae0>
 8005ad2:	4b0a      	ldr	r3, [pc, #40]	; (8005afc <_dtoa_r+0xbdc>)
 8005ad4:	f7ff ba99 	b.w	800500a <_dtoa_r+0xea>
 8005ad8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f47f aa6d 	bne.w	8004fba <_dtoa_r+0x9a>
 8005ae0:	4b07      	ldr	r3, [pc, #28]	; (8005b00 <_dtoa_r+0xbe0>)
 8005ae2:	f7ff ba92 	b.w	800500a <_dtoa_r+0xea>
 8005ae6:	9b01      	ldr	r3, [sp, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	dcb5      	bgt.n	8005a58 <_dtoa_r+0xb38>
 8005aec:	9b07      	ldr	r3, [sp, #28]
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	f73f aeb1 	bgt.w	8005856 <_dtoa_r+0x936>
 8005af4:	e7b0      	b.n	8005a58 <_dtoa_r+0xb38>
 8005af6:	bf00      	nop
 8005af8:	0800854d 	.word	0x0800854d
 8005afc:	080085e5 	.word	0x080085e5
 8005b00:	080084d1 	.word	0x080084d1

08005b04 <rshift>:
 8005b04:	6903      	ldr	r3, [r0, #16]
 8005b06:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005b0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b0e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005b12:	f100 0414 	add.w	r4, r0, #20
 8005b16:	dd45      	ble.n	8005ba4 <rshift+0xa0>
 8005b18:	f011 011f 	ands.w	r1, r1, #31
 8005b1c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005b20:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005b24:	d10c      	bne.n	8005b40 <rshift+0x3c>
 8005b26:	f100 0710 	add.w	r7, r0, #16
 8005b2a:	4629      	mov	r1, r5
 8005b2c:	42b1      	cmp	r1, r6
 8005b2e:	d334      	bcc.n	8005b9a <rshift+0x96>
 8005b30:	1a9b      	subs	r3, r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	1eea      	subs	r2, r5, #3
 8005b36:	4296      	cmp	r6, r2
 8005b38:	bf38      	it	cc
 8005b3a:	2300      	movcc	r3, #0
 8005b3c:	4423      	add	r3, r4
 8005b3e:	e015      	b.n	8005b6c <rshift+0x68>
 8005b40:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005b44:	f1c1 0820 	rsb	r8, r1, #32
 8005b48:	40cf      	lsrs	r7, r1
 8005b4a:	f105 0e04 	add.w	lr, r5, #4
 8005b4e:	46a1      	mov	r9, r4
 8005b50:	4576      	cmp	r6, lr
 8005b52:	46f4      	mov	ip, lr
 8005b54:	d815      	bhi.n	8005b82 <rshift+0x7e>
 8005b56:	1a9a      	subs	r2, r3, r2
 8005b58:	0092      	lsls	r2, r2, #2
 8005b5a:	3a04      	subs	r2, #4
 8005b5c:	3501      	adds	r5, #1
 8005b5e:	42ae      	cmp	r6, r5
 8005b60:	bf38      	it	cc
 8005b62:	2200      	movcc	r2, #0
 8005b64:	18a3      	adds	r3, r4, r2
 8005b66:	50a7      	str	r7, [r4, r2]
 8005b68:	b107      	cbz	r7, 8005b6c <rshift+0x68>
 8005b6a:	3304      	adds	r3, #4
 8005b6c:	1b1a      	subs	r2, r3, r4
 8005b6e:	42a3      	cmp	r3, r4
 8005b70:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005b74:	bf08      	it	eq
 8005b76:	2300      	moveq	r3, #0
 8005b78:	6102      	str	r2, [r0, #16]
 8005b7a:	bf08      	it	eq
 8005b7c:	6143      	streq	r3, [r0, #20]
 8005b7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b82:	f8dc c000 	ldr.w	ip, [ip]
 8005b86:	fa0c fc08 	lsl.w	ip, ip, r8
 8005b8a:	ea4c 0707 	orr.w	r7, ip, r7
 8005b8e:	f849 7b04 	str.w	r7, [r9], #4
 8005b92:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005b96:	40cf      	lsrs	r7, r1
 8005b98:	e7da      	b.n	8005b50 <rshift+0x4c>
 8005b9a:	f851 cb04 	ldr.w	ip, [r1], #4
 8005b9e:	f847 cf04 	str.w	ip, [r7, #4]!
 8005ba2:	e7c3      	b.n	8005b2c <rshift+0x28>
 8005ba4:	4623      	mov	r3, r4
 8005ba6:	e7e1      	b.n	8005b6c <rshift+0x68>

08005ba8 <__hexdig_fun>:
 8005ba8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005bac:	2b09      	cmp	r3, #9
 8005bae:	d802      	bhi.n	8005bb6 <__hexdig_fun+0xe>
 8005bb0:	3820      	subs	r0, #32
 8005bb2:	b2c0      	uxtb	r0, r0
 8005bb4:	4770      	bx	lr
 8005bb6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005bba:	2b05      	cmp	r3, #5
 8005bbc:	d801      	bhi.n	8005bc2 <__hexdig_fun+0x1a>
 8005bbe:	3847      	subs	r0, #71	; 0x47
 8005bc0:	e7f7      	b.n	8005bb2 <__hexdig_fun+0xa>
 8005bc2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005bc6:	2b05      	cmp	r3, #5
 8005bc8:	d801      	bhi.n	8005bce <__hexdig_fun+0x26>
 8005bca:	3827      	subs	r0, #39	; 0x27
 8005bcc:	e7f1      	b.n	8005bb2 <__hexdig_fun+0xa>
 8005bce:	2000      	movs	r0, #0
 8005bd0:	4770      	bx	lr
	...

08005bd4 <__gethex>:
 8005bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bd8:	4617      	mov	r7, r2
 8005bda:	680a      	ldr	r2, [r1, #0]
 8005bdc:	b085      	sub	sp, #20
 8005bde:	f102 0b02 	add.w	fp, r2, #2
 8005be2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005be6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005bea:	4681      	mov	r9, r0
 8005bec:	468a      	mov	sl, r1
 8005bee:	9302      	str	r3, [sp, #8]
 8005bf0:	32fe      	adds	r2, #254	; 0xfe
 8005bf2:	eb02 030b 	add.w	r3, r2, fp
 8005bf6:	46d8      	mov	r8, fp
 8005bf8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8005bfc:	9301      	str	r3, [sp, #4]
 8005bfe:	2830      	cmp	r0, #48	; 0x30
 8005c00:	d0f7      	beq.n	8005bf2 <__gethex+0x1e>
 8005c02:	f7ff ffd1 	bl	8005ba8 <__hexdig_fun>
 8005c06:	4604      	mov	r4, r0
 8005c08:	2800      	cmp	r0, #0
 8005c0a:	d138      	bne.n	8005c7e <__gethex+0xaa>
 8005c0c:	49a7      	ldr	r1, [pc, #668]	; (8005eac <__gethex+0x2d8>)
 8005c0e:	2201      	movs	r2, #1
 8005c10:	4640      	mov	r0, r8
 8005c12:	f7ff f893 	bl	8004d3c <strncmp>
 8005c16:	4606      	mov	r6, r0
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	d169      	bne.n	8005cf0 <__gethex+0x11c>
 8005c1c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8005c20:	465d      	mov	r5, fp
 8005c22:	f7ff ffc1 	bl	8005ba8 <__hexdig_fun>
 8005c26:	2800      	cmp	r0, #0
 8005c28:	d064      	beq.n	8005cf4 <__gethex+0x120>
 8005c2a:	465a      	mov	r2, fp
 8005c2c:	7810      	ldrb	r0, [r2, #0]
 8005c2e:	2830      	cmp	r0, #48	; 0x30
 8005c30:	4690      	mov	r8, r2
 8005c32:	f102 0201 	add.w	r2, r2, #1
 8005c36:	d0f9      	beq.n	8005c2c <__gethex+0x58>
 8005c38:	f7ff ffb6 	bl	8005ba8 <__hexdig_fun>
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	fab0 f480 	clz	r4, r0
 8005c42:	0964      	lsrs	r4, r4, #5
 8005c44:	465e      	mov	r6, fp
 8005c46:	9301      	str	r3, [sp, #4]
 8005c48:	4642      	mov	r2, r8
 8005c4a:	4615      	mov	r5, r2
 8005c4c:	3201      	adds	r2, #1
 8005c4e:	7828      	ldrb	r0, [r5, #0]
 8005c50:	f7ff ffaa 	bl	8005ba8 <__hexdig_fun>
 8005c54:	2800      	cmp	r0, #0
 8005c56:	d1f8      	bne.n	8005c4a <__gethex+0x76>
 8005c58:	4994      	ldr	r1, [pc, #592]	; (8005eac <__gethex+0x2d8>)
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	4628      	mov	r0, r5
 8005c5e:	f7ff f86d 	bl	8004d3c <strncmp>
 8005c62:	b978      	cbnz	r0, 8005c84 <__gethex+0xb0>
 8005c64:	b946      	cbnz	r6, 8005c78 <__gethex+0xa4>
 8005c66:	1c6e      	adds	r6, r5, #1
 8005c68:	4632      	mov	r2, r6
 8005c6a:	4615      	mov	r5, r2
 8005c6c:	3201      	adds	r2, #1
 8005c6e:	7828      	ldrb	r0, [r5, #0]
 8005c70:	f7ff ff9a 	bl	8005ba8 <__hexdig_fun>
 8005c74:	2800      	cmp	r0, #0
 8005c76:	d1f8      	bne.n	8005c6a <__gethex+0x96>
 8005c78:	1b73      	subs	r3, r6, r5
 8005c7a:	009e      	lsls	r6, r3, #2
 8005c7c:	e004      	b.n	8005c88 <__gethex+0xb4>
 8005c7e:	2400      	movs	r4, #0
 8005c80:	4626      	mov	r6, r4
 8005c82:	e7e1      	b.n	8005c48 <__gethex+0x74>
 8005c84:	2e00      	cmp	r6, #0
 8005c86:	d1f7      	bne.n	8005c78 <__gethex+0xa4>
 8005c88:	782b      	ldrb	r3, [r5, #0]
 8005c8a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005c8e:	2b50      	cmp	r3, #80	; 0x50
 8005c90:	d13d      	bne.n	8005d0e <__gethex+0x13a>
 8005c92:	786b      	ldrb	r3, [r5, #1]
 8005c94:	2b2b      	cmp	r3, #43	; 0x2b
 8005c96:	d02f      	beq.n	8005cf8 <__gethex+0x124>
 8005c98:	2b2d      	cmp	r3, #45	; 0x2d
 8005c9a:	d031      	beq.n	8005d00 <__gethex+0x12c>
 8005c9c:	1c69      	adds	r1, r5, #1
 8005c9e:	f04f 0b00 	mov.w	fp, #0
 8005ca2:	7808      	ldrb	r0, [r1, #0]
 8005ca4:	f7ff ff80 	bl	8005ba8 <__hexdig_fun>
 8005ca8:	1e42      	subs	r2, r0, #1
 8005caa:	b2d2      	uxtb	r2, r2
 8005cac:	2a18      	cmp	r2, #24
 8005cae:	d82e      	bhi.n	8005d0e <__gethex+0x13a>
 8005cb0:	f1a0 0210 	sub.w	r2, r0, #16
 8005cb4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005cb8:	f7ff ff76 	bl	8005ba8 <__hexdig_fun>
 8005cbc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8005cc0:	fa5f fc8c 	uxtb.w	ip, ip
 8005cc4:	f1bc 0f18 	cmp.w	ip, #24
 8005cc8:	d91d      	bls.n	8005d06 <__gethex+0x132>
 8005cca:	f1bb 0f00 	cmp.w	fp, #0
 8005cce:	d000      	beq.n	8005cd2 <__gethex+0xfe>
 8005cd0:	4252      	negs	r2, r2
 8005cd2:	4416      	add	r6, r2
 8005cd4:	f8ca 1000 	str.w	r1, [sl]
 8005cd8:	b1dc      	cbz	r4, 8005d12 <__gethex+0x13e>
 8005cda:	9b01      	ldr	r3, [sp, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	bf14      	ite	ne
 8005ce0:	f04f 0800 	movne.w	r8, #0
 8005ce4:	f04f 0806 	moveq.w	r8, #6
 8005ce8:	4640      	mov	r0, r8
 8005cea:	b005      	add	sp, #20
 8005cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cf0:	4645      	mov	r5, r8
 8005cf2:	4626      	mov	r6, r4
 8005cf4:	2401      	movs	r4, #1
 8005cf6:	e7c7      	b.n	8005c88 <__gethex+0xb4>
 8005cf8:	f04f 0b00 	mov.w	fp, #0
 8005cfc:	1ca9      	adds	r1, r5, #2
 8005cfe:	e7d0      	b.n	8005ca2 <__gethex+0xce>
 8005d00:	f04f 0b01 	mov.w	fp, #1
 8005d04:	e7fa      	b.n	8005cfc <__gethex+0x128>
 8005d06:	230a      	movs	r3, #10
 8005d08:	fb03 0002 	mla	r0, r3, r2, r0
 8005d0c:	e7d0      	b.n	8005cb0 <__gethex+0xdc>
 8005d0e:	4629      	mov	r1, r5
 8005d10:	e7e0      	b.n	8005cd4 <__gethex+0x100>
 8005d12:	eba5 0308 	sub.w	r3, r5, r8
 8005d16:	3b01      	subs	r3, #1
 8005d18:	4621      	mov	r1, r4
 8005d1a:	2b07      	cmp	r3, #7
 8005d1c:	dc0a      	bgt.n	8005d34 <__gethex+0x160>
 8005d1e:	4648      	mov	r0, r9
 8005d20:	f001 f852 	bl	8006dc8 <_Balloc>
 8005d24:	4604      	mov	r4, r0
 8005d26:	b940      	cbnz	r0, 8005d3a <__gethex+0x166>
 8005d28:	4b61      	ldr	r3, [pc, #388]	; (8005eb0 <__gethex+0x2dc>)
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	21e4      	movs	r1, #228	; 0xe4
 8005d2e:	4861      	ldr	r0, [pc, #388]	; (8005eb4 <__gethex+0x2e0>)
 8005d30:	f001 ffa0 	bl	8007c74 <__assert_func>
 8005d34:	3101      	adds	r1, #1
 8005d36:	105b      	asrs	r3, r3, #1
 8005d38:	e7ef      	b.n	8005d1a <__gethex+0x146>
 8005d3a:	f100 0a14 	add.w	sl, r0, #20
 8005d3e:	2300      	movs	r3, #0
 8005d40:	495a      	ldr	r1, [pc, #360]	; (8005eac <__gethex+0x2d8>)
 8005d42:	f8cd a004 	str.w	sl, [sp, #4]
 8005d46:	469b      	mov	fp, r3
 8005d48:	45a8      	cmp	r8, r5
 8005d4a:	d342      	bcc.n	8005dd2 <__gethex+0x1fe>
 8005d4c:	9801      	ldr	r0, [sp, #4]
 8005d4e:	f840 bb04 	str.w	fp, [r0], #4
 8005d52:	eba0 000a 	sub.w	r0, r0, sl
 8005d56:	1080      	asrs	r0, r0, #2
 8005d58:	6120      	str	r0, [r4, #16]
 8005d5a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8005d5e:	4658      	mov	r0, fp
 8005d60:	f001 f924 	bl	8006fac <__hi0bits>
 8005d64:	683d      	ldr	r5, [r7, #0]
 8005d66:	eba8 0000 	sub.w	r0, r8, r0
 8005d6a:	42a8      	cmp	r0, r5
 8005d6c:	dd59      	ble.n	8005e22 <__gethex+0x24e>
 8005d6e:	eba0 0805 	sub.w	r8, r0, r5
 8005d72:	4641      	mov	r1, r8
 8005d74:	4620      	mov	r0, r4
 8005d76:	f001 fcb3 	bl	80076e0 <__any_on>
 8005d7a:	4683      	mov	fp, r0
 8005d7c:	b1b8      	cbz	r0, 8005dae <__gethex+0x1da>
 8005d7e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8005d82:	1159      	asrs	r1, r3, #5
 8005d84:	f003 021f 	and.w	r2, r3, #31
 8005d88:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8005d8c:	f04f 0b01 	mov.w	fp, #1
 8005d90:	fa0b f202 	lsl.w	r2, fp, r2
 8005d94:	420a      	tst	r2, r1
 8005d96:	d00a      	beq.n	8005dae <__gethex+0x1da>
 8005d98:	455b      	cmp	r3, fp
 8005d9a:	dd06      	ble.n	8005daa <__gethex+0x1d6>
 8005d9c:	f1a8 0102 	sub.w	r1, r8, #2
 8005da0:	4620      	mov	r0, r4
 8005da2:	f001 fc9d 	bl	80076e0 <__any_on>
 8005da6:	2800      	cmp	r0, #0
 8005da8:	d138      	bne.n	8005e1c <__gethex+0x248>
 8005daa:	f04f 0b02 	mov.w	fp, #2
 8005dae:	4641      	mov	r1, r8
 8005db0:	4620      	mov	r0, r4
 8005db2:	f7ff fea7 	bl	8005b04 <rshift>
 8005db6:	4446      	add	r6, r8
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	42b3      	cmp	r3, r6
 8005dbc:	da41      	bge.n	8005e42 <__gethex+0x26e>
 8005dbe:	4621      	mov	r1, r4
 8005dc0:	4648      	mov	r0, r9
 8005dc2:	f001 f841 	bl	8006e48 <_Bfree>
 8005dc6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005dc8:	2300      	movs	r3, #0
 8005dca:	6013      	str	r3, [r2, #0]
 8005dcc:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8005dd0:	e78a      	b.n	8005ce8 <__gethex+0x114>
 8005dd2:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8005dd6:	2a2e      	cmp	r2, #46	; 0x2e
 8005dd8:	d014      	beq.n	8005e04 <__gethex+0x230>
 8005dda:	2b20      	cmp	r3, #32
 8005ddc:	d106      	bne.n	8005dec <__gethex+0x218>
 8005dde:	9b01      	ldr	r3, [sp, #4]
 8005de0:	f843 bb04 	str.w	fp, [r3], #4
 8005de4:	f04f 0b00 	mov.w	fp, #0
 8005de8:	9301      	str	r3, [sp, #4]
 8005dea:	465b      	mov	r3, fp
 8005dec:	7828      	ldrb	r0, [r5, #0]
 8005dee:	9303      	str	r3, [sp, #12]
 8005df0:	f7ff feda 	bl	8005ba8 <__hexdig_fun>
 8005df4:	9b03      	ldr	r3, [sp, #12]
 8005df6:	f000 000f 	and.w	r0, r0, #15
 8005dfa:	4098      	lsls	r0, r3
 8005dfc:	ea4b 0b00 	orr.w	fp, fp, r0
 8005e00:	3304      	adds	r3, #4
 8005e02:	e7a1      	b.n	8005d48 <__gethex+0x174>
 8005e04:	45a8      	cmp	r8, r5
 8005e06:	d8e8      	bhi.n	8005dda <__gethex+0x206>
 8005e08:	2201      	movs	r2, #1
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	9303      	str	r3, [sp, #12]
 8005e0e:	f7fe ff95 	bl	8004d3c <strncmp>
 8005e12:	4926      	ldr	r1, [pc, #152]	; (8005eac <__gethex+0x2d8>)
 8005e14:	9b03      	ldr	r3, [sp, #12]
 8005e16:	2800      	cmp	r0, #0
 8005e18:	d1df      	bne.n	8005dda <__gethex+0x206>
 8005e1a:	e795      	b.n	8005d48 <__gethex+0x174>
 8005e1c:	f04f 0b03 	mov.w	fp, #3
 8005e20:	e7c5      	b.n	8005dae <__gethex+0x1da>
 8005e22:	da0b      	bge.n	8005e3c <__gethex+0x268>
 8005e24:	eba5 0800 	sub.w	r8, r5, r0
 8005e28:	4621      	mov	r1, r4
 8005e2a:	4642      	mov	r2, r8
 8005e2c:	4648      	mov	r0, r9
 8005e2e:	f001 fa25 	bl	800727c <__lshift>
 8005e32:	eba6 0608 	sub.w	r6, r6, r8
 8005e36:	4604      	mov	r4, r0
 8005e38:	f100 0a14 	add.w	sl, r0, #20
 8005e3c:	f04f 0b00 	mov.w	fp, #0
 8005e40:	e7ba      	b.n	8005db8 <__gethex+0x1e4>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	42b3      	cmp	r3, r6
 8005e46:	dd73      	ble.n	8005f30 <__gethex+0x35c>
 8005e48:	1b9e      	subs	r6, r3, r6
 8005e4a:	42b5      	cmp	r5, r6
 8005e4c:	dc34      	bgt.n	8005eb8 <__gethex+0x2e4>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d023      	beq.n	8005e9c <__gethex+0x2c8>
 8005e54:	2b03      	cmp	r3, #3
 8005e56:	d025      	beq.n	8005ea4 <__gethex+0x2d0>
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d115      	bne.n	8005e88 <__gethex+0x2b4>
 8005e5c:	42b5      	cmp	r5, r6
 8005e5e:	d113      	bne.n	8005e88 <__gethex+0x2b4>
 8005e60:	2d01      	cmp	r5, #1
 8005e62:	d10b      	bne.n	8005e7c <__gethex+0x2a8>
 8005e64:	9a02      	ldr	r2, [sp, #8]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6013      	str	r3, [r2, #0]
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	6123      	str	r3, [r4, #16]
 8005e6e:	f8ca 3000 	str.w	r3, [sl]
 8005e72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e74:	f04f 0862 	mov.w	r8, #98	; 0x62
 8005e78:	601c      	str	r4, [r3, #0]
 8005e7a:	e735      	b.n	8005ce8 <__gethex+0x114>
 8005e7c:	1e69      	subs	r1, r5, #1
 8005e7e:	4620      	mov	r0, r4
 8005e80:	f001 fc2e 	bl	80076e0 <__any_on>
 8005e84:	2800      	cmp	r0, #0
 8005e86:	d1ed      	bne.n	8005e64 <__gethex+0x290>
 8005e88:	4621      	mov	r1, r4
 8005e8a:	4648      	mov	r0, r9
 8005e8c:	f000 ffdc 	bl	8006e48 <_Bfree>
 8005e90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e92:	2300      	movs	r3, #0
 8005e94:	6013      	str	r3, [r2, #0]
 8005e96:	f04f 0850 	mov.w	r8, #80	; 0x50
 8005e9a:	e725      	b.n	8005ce8 <__gethex+0x114>
 8005e9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1f2      	bne.n	8005e88 <__gethex+0x2b4>
 8005ea2:	e7df      	b.n	8005e64 <__gethex+0x290>
 8005ea4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1dc      	bne.n	8005e64 <__gethex+0x290>
 8005eaa:	e7ed      	b.n	8005e88 <__gethex+0x2b4>
 8005eac:	0800836f 	.word	0x0800836f
 8005eb0:	0800854d 	.word	0x0800854d
 8005eb4:	0800855e 	.word	0x0800855e
 8005eb8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8005ebc:	f1bb 0f00 	cmp.w	fp, #0
 8005ec0:	d133      	bne.n	8005f2a <__gethex+0x356>
 8005ec2:	f1b8 0f00 	cmp.w	r8, #0
 8005ec6:	d004      	beq.n	8005ed2 <__gethex+0x2fe>
 8005ec8:	4641      	mov	r1, r8
 8005eca:	4620      	mov	r0, r4
 8005ecc:	f001 fc08 	bl	80076e0 <__any_on>
 8005ed0:	4683      	mov	fp, r0
 8005ed2:	ea4f 1268 	mov.w	r2, r8, asr #5
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8005edc:	f008 081f 	and.w	r8, r8, #31
 8005ee0:	fa03 f308 	lsl.w	r3, r3, r8
 8005ee4:	4213      	tst	r3, r2
 8005ee6:	4631      	mov	r1, r6
 8005ee8:	4620      	mov	r0, r4
 8005eea:	bf18      	it	ne
 8005eec:	f04b 0b02 	orrne.w	fp, fp, #2
 8005ef0:	1bad      	subs	r5, r5, r6
 8005ef2:	f7ff fe07 	bl	8005b04 <rshift>
 8005ef6:	687e      	ldr	r6, [r7, #4]
 8005ef8:	f04f 0802 	mov.w	r8, #2
 8005efc:	f1bb 0f00 	cmp.w	fp, #0
 8005f00:	d04a      	beq.n	8005f98 <__gethex+0x3c4>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d016      	beq.n	8005f36 <__gethex+0x362>
 8005f08:	2b03      	cmp	r3, #3
 8005f0a:	d018      	beq.n	8005f3e <__gethex+0x36a>
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d109      	bne.n	8005f24 <__gethex+0x350>
 8005f10:	f01b 0f02 	tst.w	fp, #2
 8005f14:	d006      	beq.n	8005f24 <__gethex+0x350>
 8005f16:	f8da 3000 	ldr.w	r3, [sl]
 8005f1a:	ea4b 0b03 	orr.w	fp, fp, r3
 8005f1e:	f01b 0f01 	tst.w	fp, #1
 8005f22:	d10f      	bne.n	8005f44 <__gethex+0x370>
 8005f24:	f048 0810 	orr.w	r8, r8, #16
 8005f28:	e036      	b.n	8005f98 <__gethex+0x3c4>
 8005f2a:	f04f 0b01 	mov.w	fp, #1
 8005f2e:	e7d0      	b.n	8005ed2 <__gethex+0x2fe>
 8005f30:	f04f 0801 	mov.w	r8, #1
 8005f34:	e7e2      	b.n	8005efc <__gethex+0x328>
 8005f36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f38:	f1c3 0301 	rsb	r3, r3, #1
 8005f3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005f3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d0ef      	beq.n	8005f24 <__gethex+0x350>
 8005f44:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005f48:	f104 0214 	add.w	r2, r4, #20
 8005f4c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8005f50:	9301      	str	r3, [sp, #4]
 8005f52:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8005f56:	2300      	movs	r3, #0
 8005f58:	4694      	mov	ip, r2
 8005f5a:	f852 1b04 	ldr.w	r1, [r2], #4
 8005f5e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8005f62:	d01e      	beq.n	8005fa2 <__gethex+0x3ce>
 8005f64:	3101      	adds	r1, #1
 8005f66:	f8cc 1000 	str.w	r1, [ip]
 8005f6a:	f1b8 0f02 	cmp.w	r8, #2
 8005f6e:	f104 0214 	add.w	r2, r4, #20
 8005f72:	d13d      	bne.n	8005ff0 <__gethex+0x41c>
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	3b01      	subs	r3, #1
 8005f78:	42ab      	cmp	r3, r5
 8005f7a:	d10b      	bne.n	8005f94 <__gethex+0x3c0>
 8005f7c:	1169      	asrs	r1, r5, #5
 8005f7e:	2301      	movs	r3, #1
 8005f80:	f005 051f 	and.w	r5, r5, #31
 8005f84:	fa03 f505 	lsl.w	r5, r3, r5
 8005f88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005f8c:	421d      	tst	r5, r3
 8005f8e:	bf18      	it	ne
 8005f90:	f04f 0801 	movne.w	r8, #1
 8005f94:	f048 0820 	orr.w	r8, r8, #32
 8005f98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f9a:	601c      	str	r4, [r3, #0]
 8005f9c:	9b02      	ldr	r3, [sp, #8]
 8005f9e:	601e      	str	r6, [r3, #0]
 8005fa0:	e6a2      	b.n	8005ce8 <__gethex+0x114>
 8005fa2:	4290      	cmp	r0, r2
 8005fa4:	f842 3c04 	str.w	r3, [r2, #-4]
 8005fa8:	d8d6      	bhi.n	8005f58 <__gethex+0x384>
 8005faa:	68a2      	ldr	r2, [r4, #8]
 8005fac:	4593      	cmp	fp, r2
 8005fae:	db17      	blt.n	8005fe0 <__gethex+0x40c>
 8005fb0:	6861      	ldr	r1, [r4, #4]
 8005fb2:	4648      	mov	r0, r9
 8005fb4:	3101      	adds	r1, #1
 8005fb6:	f000 ff07 	bl	8006dc8 <_Balloc>
 8005fba:	4682      	mov	sl, r0
 8005fbc:	b918      	cbnz	r0, 8005fc6 <__gethex+0x3f2>
 8005fbe:	4b1b      	ldr	r3, [pc, #108]	; (800602c <__gethex+0x458>)
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	2184      	movs	r1, #132	; 0x84
 8005fc4:	e6b3      	b.n	8005d2e <__gethex+0x15a>
 8005fc6:	6922      	ldr	r2, [r4, #16]
 8005fc8:	3202      	adds	r2, #2
 8005fca:	f104 010c 	add.w	r1, r4, #12
 8005fce:	0092      	lsls	r2, r2, #2
 8005fd0:	300c      	adds	r0, #12
 8005fd2:	f7fe fefe 	bl	8004dd2 <memcpy>
 8005fd6:	4621      	mov	r1, r4
 8005fd8:	4648      	mov	r0, r9
 8005fda:	f000 ff35 	bl	8006e48 <_Bfree>
 8005fde:	4654      	mov	r4, sl
 8005fe0:	6922      	ldr	r2, [r4, #16]
 8005fe2:	1c51      	adds	r1, r2, #1
 8005fe4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005fe8:	6121      	str	r1, [r4, #16]
 8005fea:	2101      	movs	r1, #1
 8005fec:	6151      	str	r1, [r2, #20]
 8005fee:	e7bc      	b.n	8005f6a <__gethex+0x396>
 8005ff0:	6921      	ldr	r1, [r4, #16]
 8005ff2:	4559      	cmp	r1, fp
 8005ff4:	dd0b      	ble.n	800600e <__gethex+0x43a>
 8005ff6:	2101      	movs	r1, #1
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	f7ff fd83 	bl	8005b04 <rshift>
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	3601      	adds	r6, #1
 8006002:	42b3      	cmp	r3, r6
 8006004:	f6ff aedb 	blt.w	8005dbe <__gethex+0x1ea>
 8006008:	f04f 0801 	mov.w	r8, #1
 800600c:	e7c2      	b.n	8005f94 <__gethex+0x3c0>
 800600e:	f015 051f 	ands.w	r5, r5, #31
 8006012:	d0f9      	beq.n	8006008 <__gethex+0x434>
 8006014:	9b01      	ldr	r3, [sp, #4]
 8006016:	441a      	add	r2, r3
 8006018:	f1c5 0520 	rsb	r5, r5, #32
 800601c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8006020:	f000 ffc4 	bl	8006fac <__hi0bits>
 8006024:	42a8      	cmp	r0, r5
 8006026:	dbe6      	blt.n	8005ff6 <__gethex+0x422>
 8006028:	e7ee      	b.n	8006008 <__gethex+0x434>
 800602a:	bf00      	nop
 800602c:	0800854d 	.word	0x0800854d

08006030 <L_shift>:
 8006030:	f1c2 0208 	rsb	r2, r2, #8
 8006034:	0092      	lsls	r2, r2, #2
 8006036:	b570      	push	{r4, r5, r6, lr}
 8006038:	f1c2 0620 	rsb	r6, r2, #32
 800603c:	6843      	ldr	r3, [r0, #4]
 800603e:	6804      	ldr	r4, [r0, #0]
 8006040:	fa03 f506 	lsl.w	r5, r3, r6
 8006044:	432c      	orrs	r4, r5
 8006046:	40d3      	lsrs	r3, r2
 8006048:	6004      	str	r4, [r0, #0]
 800604a:	f840 3f04 	str.w	r3, [r0, #4]!
 800604e:	4288      	cmp	r0, r1
 8006050:	d3f4      	bcc.n	800603c <L_shift+0xc>
 8006052:	bd70      	pop	{r4, r5, r6, pc}

08006054 <__match>:
 8006054:	b530      	push	{r4, r5, lr}
 8006056:	6803      	ldr	r3, [r0, #0]
 8006058:	3301      	adds	r3, #1
 800605a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800605e:	b914      	cbnz	r4, 8006066 <__match+0x12>
 8006060:	6003      	str	r3, [r0, #0]
 8006062:	2001      	movs	r0, #1
 8006064:	bd30      	pop	{r4, r5, pc}
 8006066:	f813 2b01 	ldrb.w	r2, [r3], #1
 800606a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800606e:	2d19      	cmp	r5, #25
 8006070:	bf98      	it	ls
 8006072:	3220      	addls	r2, #32
 8006074:	42a2      	cmp	r2, r4
 8006076:	d0f0      	beq.n	800605a <__match+0x6>
 8006078:	2000      	movs	r0, #0
 800607a:	e7f3      	b.n	8006064 <__match+0x10>

0800607c <__hexnan>:
 800607c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006080:	680b      	ldr	r3, [r1, #0]
 8006082:	6801      	ldr	r1, [r0, #0]
 8006084:	115e      	asrs	r6, r3, #5
 8006086:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800608a:	f013 031f 	ands.w	r3, r3, #31
 800608e:	b087      	sub	sp, #28
 8006090:	bf18      	it	ne
 8006092:	3604      	addne	r6, #4
 8006094:	2500      	movs	r5, #0
 8006096:	1f37      	subs	r7, r6, #4
 8006098:	4682      	mov	sl, r0
 800609a:	4690      	mov	r8, r2
 800609c:	9301      	str	r3, [sp, #4]
 800609e:	f846 5c04 	str.w	r5, [r6, #-4]
 80060a2:	46b9      	mov	r9, r7
 80060a4:	463c      	mov	r4, r7
 80060a6:	9502      	str	r5, [sp, #8]
 80060a8:	46ab      	mov	fp, r5
 80060aa:	784a      	ldrb	r2, [r1, #1]
 80060ac:	1c4b      	adds	r3, r1, #1
 80060ae:	9303      	str	r3, [sp, #12]
 80060b0:	b342      	cbz	r2, 8006104 <__hexnan+0x88>
 80060b2:	4610      	mov	r0, r2
 80060b4:	9105      	str	r1, [sp, #20]
 80060b6:	9204      	str	r2, [sp, #16]
 80060b8:	f7ff fd76 	bl	8005ba8 <__hexdig_fun>
 80060bc:	2800      	cmp	r0, #0
 80060be:	d14f      	bne.n	8006160 <__hexnan+0xe4>
 80060c0:	9a04      	ldr	r2, [sp, #16]
 80060c2:	9905      	ldr	r1, [sp, #20]
 80060c4:	2a20      	cmp	r2, #32
 80060c6:	d818      	bhi.n	80060fa <__hexnan+0x7e>
 80060c8:	9b02      	ldr	r3, [sp, #8]
 80060ca:	459b      	cmp	fp, r3
 80060cc:	dd13      	ble.n	80060f6 <__hexnan+0x7a>
 80060ce:	454c      	cmp	r4, r9
 80060d0:	d206      	bcs.n	80060e0 <__hexnan+0x64>
 80060d2:	2d07      	cmp	r5, #7
 80060d4:	dc04      	bgt.n	80060e0 <__hexnan+0x64>
 80060d6:	462a      	mov	r2, r5
 80060d8:	4649      	mov	r1, r9
 80060da:	4620      	mov	r0, r4
 80060dc:	f7ff ffa8 	bl	8006030 <L_shift>
 80060e0:	4544      	cmp	r4, r8
 80060e2:	d950      	bls.n	8006186 <__hexnan+0x10a>
 80060e4:	2300      	movs	r3, #0
 80060e6:	f1a4 0904 	sub.w	r9, r4, #4
 80060ea:	f844 3c04 	str.w	r3, [r4, #-4]
 80060ee:	f8cd b008 	str.w	fp, [sp, #8]
 80060f2:	464c      	mov	r4, r9
 80060f4:	461d      	mov	r5, r3
 80060f6:	9903      	ldr	r1, [sp, #12]
 80060f8:	e7d7      	b.n	80060aa <__hexnan+0x2e>
 80060fa:	2a29      	cmp	r2, #41	; 0x29
 80060fc:	d155      	bne.n	80061aa <__hexnan+0x12e>
 80060fe:	3102      	adds	r1, #2
 8006100:	f8ca 1000 	str.w	r1, [sl]
 8006104:	f1bb 0f00 	cmp.w	fp, #0
 8006108:	d04f      	beq.n	80061aa <__hexnan+0x12e>
 800610a:	454c      	cmp	r4, r9
 800610c:	d206      	bcs.n	800611c <__hexnan+0xa0>
 800610e:	2d07      	cmp	r5, #7
 8006110:	dc04      	bgt.n	800611c <__hexnan+0xa0>
 8006112:	462a      	mov	r2, r5
 8006114:	4649      	mov	r1, r9
 8006116:	4620      	mov	r0, r4
 8006118:	f7ff ff8a 	bl	8006030 <L_shift>
 800611c:	4544      	cmp	r4, r8
 800611e:	d934      	bls.n	800618a <__hexnan+0x10e>
 8006120:	f1a8 0204 	sub.w	r2, r8, #4
 8006124:	4623      	mov	r3, r4
 8006126:	f853 1b04 	ldr.w	r1, [r3], #4
 800612a:	f842 1f04 	str.w	r1, [r2, #4]!
 800612e:	429f      	cmp	r7, r3
 8006130:	d2f9      	bcs.n	8006126 <__hexnan+0xaa>
 8006132:	1b3b      	subs	r3, r7, r4
 8006134:	f023 0303 	bic.w	r3, r3, #3
 8006138:	3304      	adds	r3, #4
 800613a:	3e03      	subs	r6, #3
 800613c:	3401      	adds	r4, #1
 800613e:	42a6      	cmp	r6, r4
 8006140:	bf38      	it	cc
 8006142:	2304      	movcc	r3, #4
 8006144:	4443      	add	r3, r8
 8006146:	2200      	movs	r2, #0
 8006148:	f843 2b04 	str.w	r2, [r3], #4
 800614c:	429f      	cmp	r7, r3
 800614e:	d2fb      	bcs.n	8006148 <__hexnan+0xcc>
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	b91b      	cbnz	r3, 800615c <__hexnan+0xe0>
 8006154:	4547      	cmp	r7, r8
 8006156:	d126      	bne.n	80061a6 <__hexnan+0x12a>
 8006158:	2301      	movs	r3, #1
 800615a:	603b      	str	r3, [r7, #0]
 800615c:	2005      	movs	r0, #5
 800615e:	e025      	b.n	80061ac <__hexnan+0x130>
 8006160:	3501      	adds	r5, #1
 8006162:	2d08      	cmp	r5, #8
 8006164:	f10b 0b01 	add.w	fp, fp, #1
 8006168:	dd06      	ble.n	8006178 <__hexnan+0xfc>
 800616a:	4544      	cmp	r4, r8
 800616c:	d9c3      	bls.n	80060f6 <__hexnan+0x7a>
 800616e:	2300      	movs	r3, #0
 8006170:	f844 3c04 	str.w	r3, [r4, #-4]
 8006174:	2501      	movs	r5, #1
 8006176:	3c04      	subs	r4, #4
 8006178:	6822      	ldr	r2, [r4, #0]
 800617a:	f000 000f 	and.w	r0, r0, #15
 800617e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006182:	6020      	str	r0, [r4, #0]
 8006184:	e7b7      	b.n	80060f6 <__hexnan+0x7a>
 8006186:	2508      	movs	r5, #8
 8006188:	e7b5      	b.n	80060f6 <__hexnan+0x7a>
 800618a:	9b01      	ldr	r3, [sp, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d0df      	beq.n	8006150 <__hexnan+0xd4>
 8006190:	f1c3 0320 	rsb	r3, r3, #32
 8006194:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006198:	40da      	lsrs	r2, r3
 800619a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800619e:	4013      	ands	r3, r2
 80061a0:	f846 3c04 	str.w	r3, [r6, #-4]
 80061a4:	e7d4      	b.n	8006150 <__hexnan+0xd4>
 80061a6:	3f04      	subs	r7, #4
 80061a8:	e7d2      	b.n	8006150 <__hexnan+0xd4>
 80061aa:	2004      	movs	r0, #4
 80061ac:	b007      	add	sp, #28
 80061ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080061b2 <__ssputs_r>:
 80061b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061b6:	688e      	ldr	r6, [r1, #8]
 80061b8:	461f      	mov	r7, r3
 80061ba:	42be      	cmp	r6, r7
 80061bc:	680b      	ldr	r3, [r1, #0]
 80061be:	4682      	mov	sl, r0
 80061c0:	460c      	mov	r4, r1
 80061c2:	4690      	mov	r8, r2
 80061c4:	d82c      	bhi.n	8006220 <__ssputs_r+0x6e>
 80061c6:	898a      	ldrh	r2, [r1, #12]
 80061c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80061cc:	d026      	beq.n	800621c <__ssputs_r+0x6a>
 80061ce:	6965      	ldr	r5, [r4, #20]
 80061d0:	6909      	ldr	r1, [r1, #16]
 80061d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061d6:	eba3 0901 	sub.w	r9, r3, r1
 80061da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061de:	1c7b      	adds	r3, r7, #1
 80061e0:	444b      	add	r3, r9
 80061e2:	106d      	asrs	r5, r5, #1
 80061e4:	429d      	cmp	r5, r3
 80061e6:	bf38      	it	cc
 80061e8:	461d      	movcc	r5, r3
 80061ea:	0553      	lsls	r3, r2, #21
 80061ec:	d527      	bpl.n	800623e <__ssputs_r+0x8c>
 80061ee:	4629      	mov	r1, r5
 80061f0:	f000 f960 	bl	80064b4 <_malloc_r>
 80061f4:	4606      	mov	r6, r0
 80061f6:	b360      	cbz	r0, 8006252 <__ssputs_r+0xa0>
 80061f8:	6921      	ldr	r1, [r4, #16]
 80061fa:	464a      	mov	r2, r9
 80061fc:	f7fe fde9 	bl	8004dd2 <memcpy>
 8006200:	89a3      	ldrh	r3, [r4, #12]
 8006202:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800620a:	81a3      	strh	r3, [r4, #12]
 800620c:	6126      	str	r6, [r4, #16]
 800620e:	6165      	str	r5, [r4, #20]
 8006210:	444e      	add	r6, r9
 8006212:	eba5 0509 	sub.w	r5, r5, r9
 8006216:	6026      	str	r6, [r4, #0]
 8006218:	60a5      	str	r5, [r4, #8]
 800621a:	463e      	mov	r6, r7
 800621c:	42be      	cmp	r6, r7
 800621e:	d900      	bls.n	8006222 <__ssputs_r+0x70>
 8006220:	463e      	mov	r6, r7
 8006222:	6820      	ldr	r0, [r4, #0]
 8006224:	4632      	mov	r2, r6
 8006226:	4641      	mov	r1, r8
 8006228:	f001 fcb4 	bl	8007b94 <memmove>
 800622c:	68a3      	ldr	r3, [r4, #8]
 800622e:	1b9b      	subs	r3, r3, r6
 8006230:	60a3      	str	r3, [r4, #8]
 8006232:	6823      	ldr	r3, [r4, #0]
 8006234:	4433      	add	r3, r6
 8006236:	6023      	str	r3, [r4, #0]
 8006238:	2000      	movs	r0, #0
 800623a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800623e:	462a      	mov	r2, r5
 8006240:	f001 fb70 	bl	8007924 <_realloc_r>
 8006244:	4606      	mov	r6, r0
 8006246:	2800      	cmp	r0, #0
 8006248:	d1e0      	bne.n	800620c <__ssputs_r+0x5a>
 800624a:	6921      	ldr	r1, [r4, #16]
 800624c:	4650      	mov	r0, sl
 800624e:	f001 fd45 	bl	8007cdc <_free_r>
 8006252:	230c      	movs	r3, #12
 8006254:	f8ca 3000 	str.w	r3, [sl]
 8006258:	89a3      	ldrh	r3, [r4, #12]
 800625a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800625e:	81a3      	strh	r3, [r4, #12]
 8006260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006264:	e7e9      	b.n	800623a <__ssputs_r+0x88>
	...

08006268 <_svfiprintf_r>:
 8006268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800626c:	4698      	mov	r8, r3
 800626e:	898b      	ldrh	r3, [r1, #12]
 8006270:	061b      	lsls	r3, r3, #24
 8006272:	b09d      	sub	sp, #116	; 0x74
 8006274:	4607      	mov	r7, r0
 8006276:	460d      	mov	r5, r1
 8006278:	4614      	mov	r4, r2
 800627a:	d50e      	bpl.n	800629a <_svfiprintf_r+0x32>
 800627c:	690b      	ldr	r3, [r1, #16]
 800627e:	b963      	cbnz	r3, 800629a <_svfiprintf_r+0x32>
 8006280:	2140      	movs	r1, #64	; 0x40
 8006282:	f000 f917 	bl	80064b4 <_malloc_r>
 8006286:	6028      	str	r0, [r5, #0]
 8006288:	6128      	str	r0, [r5, #16]
 800628a:	b920      	cbnz	r0, 8006296 <_svfiprintf_r+0x2e>
 800628c:	230c      	movs	r3, #12
 800628e:	603b      	str	r3, [r7, #0]
 8006290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006294:	e0d0      	b.n	8006438 <_svfiprintf_r+0x1d0>
 8006296:	2340      	movs	r3, #64	; 0x40
 8006298:	616b      	str	r3, [r5, #20]
 800629a:	2300      	movs	r3, #0
 800629c:	9309      	str	r3, [sp, #36]	; 0x24
 800629e:	2320      	movs	r3, #32
 80062a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80062a8:	2330      	movs	r3, #48	; 0x30
 80062aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006450 <_svfiprintf_r+0x1e8>
 80062ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062b2:	f04f 0901 	mov.w	r9, #1
 80062b6:	4623      	mov	r3, r4
 80062b8:	469a      	mov	sl, r3
 80062ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062be:	b10a      	cbz	r2, 80062c4 <_svfiprintf_r+0x5c>
 80062c0:	2a25      	cmp	r2, #37	; 0x25
 80062c2:	d1f9      	bne.n	80062b8 <_svfiprintf_r+0x50>
 80062c4:	ebba 0b04 	subs.w	fp, sl, r4
 80062c8:	d00b      	beq.n	80062e2 <_svfiprintf_r+0x7a>
 80062ca:	465b      	mov	r3, fp
 80062cc:	4622      	mov	r2, r4
 80062ce:	4629      	mov	r1, r5
 80062d0:	4638      	mov	r0, r7
 80062d2:	f7ff ff6e 	bl	80061b2 <__ssputs_r>
 80062d6:	3001      	adds	r0, #1
 80062d8:	f000 80a9 	beq.w	800642e <_svfiprintf_r+0x1c6>
 80062dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062de:	445a      	add	r2, fp
 80062e0:	9209      	str	r2, [sp, #36]	; 0x24
 80062e2:	f89a 3000 	ldrb.w	r3, [sl]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	f000 80a1 	beq.w	800642e <_svfiprintf_r+0x1c6>
 80062ec:	2300      	movs	r3, #0
 80062ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062f6:	f10a 0a01 	add.w	sl, sl, #1
 80062fa:	9304      	str	r3, [sp, #16]
 80062fc:	9307      	str	r3, [sp, #28]
 80062fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006302:	931a      	str	r3, [sp, #104]	; 0x68
 8006304:	4654      	mov	r4, sl
 8006306:	2205      	movs	r2, #5
 8006308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800630c:	4850      	ldr	r0, [pc, #320]	; (8006450 <_svfiprintf_r+0x1e8>)
 800630e:	f7f9 ff7f 	bl	8000210 <memchr>
 8006312:	9a04      	ldr	r2, [sp, #16]
 8006314:	b9d8      	cbnz	r0, 800634e <_svfiprintf_r+0xe6>
 8006316:	06d0      	lsls	r0, r2, #27
 8006318:	bf44      	itt	mi
 800631a:	2320      	movmi	r3, #32
 800631c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006320:	0711      	lsls	r1, r2, #28
 8006322:	bf44      	itt	mi
 8006324:	232b      	movmi	r3, #43	; 0x2b
 8006326:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800632a:	f89a 3000 	ldrb.w	r3, [sl]
 800632e:	2b2a      	cmp	r3, #42	; 0x2a
 8006330:	d015      	beq.n	800635e <_svfiprintf_r+0xf6>
 8006332:	9a07      	ldr	r2, [sp, #28]
 8006334:	4654      	mov	r4, sl
 8006336:	2000      	movs	r0, #0
 8006338:	f04f 0c0a 	mov.w	ip, #10
 800633c:	4621      	mov	r1, r4
 800633e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006342:	3b30      	subs	r3, #48	; 0x30
 8006344:	2b09      	cmp	r3, #9
 8006346:	d94d      	bls.n	80063e4 <_svfiprintf_r+0x17c>
 8006348:	b1b0      	cbz	r0, 8006378 <_svfiprintf_r+0x110>
 800634a:	9207      	str	r2, [sp, #28]
 800634c:	e014      	b.n	8006378 <_svfiprintf_r+0x110>
 800634e:	eba0 0308 	sub.w	r3, r0, r8
 8006352:	fa09 f303 	lsl.w	r3, r9, r3
 8006356:	4313      	orrs	r3, r2
 8006358:	9304      	str	r3, [sp, #16]
 800635a:	46a2      	mov	sl, r4
 800635c:	e7d2      	b.n	8006304 <_svfiprintf_r+0x9c>
 800635e:	9b03      	ldr	r3, [sp, #12]
 8006360:	1d19      	adds	r1, r3, #4
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	9103      	str	r1, [sp, #12]
 8006366:	2b00      	cmp	r3, #0
 8006368:	bfbb      	ittet	lt
 800636a:	425b      	neglt	r3, r3
 800636c:	f042 0202 	orrlt.w	r2, r2, #2
 8006370:	9307      	strge	r3, [sp, #28]
 8006372:	9307      	strlt	r3, [sp, #28]
 8006374:	bfb8      	it	lt
 8006376:	9204      	strlt	r2, [sp, #16]
 8006378:	7823      	ldrb	r3, [r4, #0]
 800637a:	2b2e      	cmp	r3, #46	; 0x2e
 800637c:	d10c      	bne.n	8006398 <_svfiprintf_r+0x130>
 800637e:	7863      	ldrb	r3, [r4, #1]
 8006380:	2b2a      	cmp	r3, #42	; 0x2a
 8006382:	d134      	bne.n	80063ee <_svfiprintf_r+0x186>
 8006384:	9b03      	ldr	r3, [sp, #12]
 8006386:	1d1a      	adds	r2, r3, #4
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	9203      	str	r2, [sp, #12]
 800638c:	2b00      	cmp	r3, #0
 800638e:	bfb8      	it	lt
 8006390:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006394:	3402      	adds	r4, #2
 8006396:	9305      	str	r3, [sp, #20]
 8006398:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006460 <_svfiprintf_r+0x1f8>
 800639c:	7821      	ldrb	r1, [r4, #0]
 800639e:	2203      	movs	r2, #3
 80063a0:	4650      	mov	r0, sl
 80063a2:	f7f9 ff35 	bl	8000210 <memchr>
 80063a6:	b138      	cbz	r0, 80063b8 <_svfiprintf_r+0x150>
 80063a8:	9b04      	ldr	r3, [sp, #16]
 80063aa:	eba0 000a 	sub.w	r0, r0, sl
 80063ae:	2240      	movs	r2, #64	; 0x40
 80063b0:	4082      	lsls	r2, r0
 80063b2:	4313      	orrs	r3, r2
 80063b4:	3401      	adds	r4, #1
 80063b6:	9304      	str	r3, [sp, #16]
 80063b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063bc:	4825      	ldr	r0, [pc, #148]	; (8006454 <_svfiprintf_r+0x1ec>)
 80063be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063c2:	2206      	movs	r2, #6
 80063c4:	f7f9 ff24 	bl	8000210 <memchr>
 80063c8:	2800      	cmp	r0, #0
 80063ca:	d038      	beq.n	800643e <_svfiprintf_r+0x1d6>
 80063cc:	4b22      	ldr	r3, [pc, #136]	; (8006458 <_svfiprintf_r+0x1f0>)
 80063ce:	bb1b      	cbnz	r3, 8006418 <_svfiprintf_r+0x1b0>
 80063d0:	9b03      	ldr	r3, [sp, #12]
 80063d2:	3307      	adds	r3, #7
 80063d4:	f023 0307 	bic.w	r3, r3, #7
 80063d8:	3308      	adds	r3, #8
 80063da:	9303      	str	r3, [sp, #12]
 80063dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063de:	4433      	add	r3, r6
 80063e0:	9309      	str	r3, [sp, #36]	; 0x24
 80063e2:	e768      	b.n	80062b6 <_svfiprintf_r+0x4e>
 80063e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80063e8:	460c      	mov	r4, r1
 80063ea:	2001      	movs	r0, #1
 80063ec:	e7a6      	b.n	800633c <_svfiprintf_r+0xd4>
 80063ee:	2300      	movs	r3, #0
 80063f0:	3401      	adds	r4, #1
 80063f2:	9305      	str	r3, [sp, #20]
 80063f4:	4619      	mov	r1, r3
 80063f6:	f04f 0c0a 	mov.w	ip, #10
 80063fa:	4620      	mov	r0, r4
 80063fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006400:	3a30      	subs	r2, #48	; 0x30
 8006402:	2a09      	cmp	r2, #9
 8006404:	d903      	bls.n	800640e <_svfiprintf_r+0x1a6>
 8006406:	2b00      	cmp	r3, #0
 8006408:	d0c6      	beq.n	8006398 <_svfiprintf_r+0x130>
 800640a:	9105      	str	r1, [sp, #20]
 800640c:	e7c4      	b.n	8006398 <_svfiprintf_r+0x130>
 800640e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006412:	4604      	mov	r4, r0
 8006414:	2301      	movs	r3, #1
 8006416:	e7f0      	b.n	80063fa <_svfiprintf_r+0x192>
 8006418:	ab03      	add	r3, sp, #12
 800641a:	9300      	str	r3, [sp, #0]
 800641c:	462a      	mov	r2, r5
 800641e:	4b0f      	ldr	r3, [pc, #60]	; (800645c <_svfiprintf_r+0x1f4>)
 8006420:	a904      	add	r1, sp, #16
 8006422:	4638      	mov	r0, r7
 8006424:	f7fc ff28 	bl	8003278 <_printf_float>
 8006428:	1c42      	adds	r2, r0, #1
 800642a:	4606      	mov	r6, r0
 800642c:	d1d6      	bne.n	80063dc <_svfiprintf_r+0x174>
 800642e:	89ab      	ldrh	r3, [r5, #12]
 8006430:	065b      	lsls	r3, r3, #25
 8006432:	f53f af2d 	bmi.w	8006290 <_svfiprintf_r+0x28>
 8006436:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006438:	b01d      	add	sp, #116	; 0x74
 800643a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800643e:	ab03      	add	r3, sp, #12
 8006440:	9300      	str	r3, [sp, #0]
 8006442:	462a      	mov	r2, r5
 8006444:	4b05      	ldr	r3, [pc, #20]	; (800645c <_svfiprintf_r+0x1f4>)
 8006446:	a904      	add	r1, sp, #16
 8006448:	4638      	mov	r0, r7
 800644a:	f7fd f9b9 	bl	80037c0 <_printf_i>
 800644e:	e7eb      	b.n	8006428 <_svfiprintf_r+0x1c0>
 8006450:	080085be 	.word	0x080085be
 8006454:	080085c8 	.word	0x080085c8
 8006458:	08003279 	.word	0x08003279
 800645c:	080061b3 	.word	0x080061b3
 8006460:	080085c4 	.word	0x080085c4

08006464 <malloc>:
 8006464:	4b02      	ldr	r3, [pc, #8]	; (8006470 <malloc+0xc>)
 8006466:	4601      	mov	r1, r0
 8006468:	6818      	ldr	r0, [r3, #0]
 800646a:	f000 b823 	b.w	80064b4 <_malloc_r>
 800646e:	bf00      	nop
 8006470:	200001d0 	.word	0x200001d0

08006474 <sbrk_aligned>:
 8006474:	b570      	push	{r4, r5, r6, lr}
 8006476:	4e0e      	ldr	r6, [pc, #56]	; (80064b0 <sbrk_aligned+0x3c>)
 8006478:	460c      	mov	r4, r1
 800647a:	6831      	ldr	r1, [r6, #0]
 800647c:	4605      	mov	r5, r0
 800647e:	b911      	cbnz	r1, 8006486 <sbrk_aligned+0x12>
 8006480:	f001 fbd6 	bl	8007c30 <_sbrk_r>
 8006484:	6030      	str	r0, [r6, #0]
 8006486:	4621      	mov	r1, r4
 8006488:	4628      	mov	r0, r5
 800648a:	f001 fbd1 	bl	8007c30 <_sbrk_r>
 800648e:	1c43      	adds	r3, r0, #1
 8006490:	d00a      	beq.n	80064a8 <sbrk_aligned+0x34>
 8006492:	1cc4      	adds	r4, r0, #3
 8006494:	f024 0403 	bic.w	r4, r4, #3
 8006498:	42a0      	cmp	r0, r4
 800649a:	d007      	beq.n	80064ac <sbrk_aligned+0x38>
 800649c:	1a21      	subs	r1, r4, r0
 800649e:	4628      	mov	r0, r5
 80064a0:	f001 fbc6 	bl	8007c30 <_sbrk_r>
 80064a4:	3001      	adds	r0, #1
 80064a6:	d101      	bne.n	80064ac <sbrk_aligned+0x38>
 80064a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80064ac:	4620      	mov	r0, r4
 80064ae:	bd70      	pop	{r4, r5, r6, pc}
 80064b0:	20000384 	.word	0x20000384

080064b4 <_malloc_r>:
 80064b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064b8:	1ccd      	adds	r5, r1, #3
 80064ba:	f025 0503 	bic.w	r5, r5, #3
 80064be:	3508      	adds	r5, #8
 80064c0:	2d0c      	cmp	r5, #12
 80064c2:	bf38      	it	cc
 80064c4:	250c      	movcc	r5, #12
 80064c6:	2d00      	cmp	r5, #0
 80064c8:	4607      	mov	r7, r0
 80064ca:	db01      	blt.n	80064d0 <_malloc_r+0x1c>
 80064cc:	42a9      	cmp	r1, r5
 80064ce:	d905      	bls.n	80064dc <_malloc_r+0x28>
 80064d0:	230c      	movs	r3, #12
 80064d2:	603b      	str	r3, [r7, #0]
 80064d4:	2600      	movs	r6, #0
 80064d6:	4630      	mov	r0, r6
 80064d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80065b0 <_malloc_r+0xfc>
 80064e0:	f000 fc66 	bl	8006db0 <__malloc_lock>
 80064e4:	f8d8 3000 	ldr.w	r3, [r8]
 80064e8:	461c      	mov	r4, r3
 80064ea:	bb5c      	cbnz	r4, 8006544 <_malloc_r+0x90>
 80064ec:	4629      	mov	r1, r5
 80064ee:	4638      	mov	r0, r7
 80064f0:	f7ff ffc0 	bl	8006474 <sbrk_aligned>
 80064f4:	1c43      	adds	r3, r0, #1
 80064f6:	4604      	mov	r4, r0
 80064f8:	d155      	bne.n	80065a6 <_malloc_r+0xf2>
 80064fa:	f8d8 4000 	ldr.w	r4, [r8]
 80064fe:	4626      	mov	r6, r4
 8006500:	2e00      	cmp	r6, #0
 8006502:	d145      	bne.n	8006590 <_malloc_r+0xdc>
 8006504:	2c00      	cmp	r4, #0
 8006506:	d048      	beq.n	800659a <_malloc_r+0xe6>
 8006508:	6823      	ldr	r3, [r4, #0]
 800650a:	4631      	mov	r1, r6
 800650c:	4638      	mov	r0, r7
 800650e:	eb04 0903 	add.w	r9, r4, r3
 8006512:	f001 fb8d 	bl	8007c30 <_sbrk_r>
 8006516:	4581      	cmp	r9, r0
 8006518:	d13f      	bne.n	800659a <_malloc_r+0xe6>
 800651a:	6821      	ldr	r1, [r4, #0]
 800651c:	1a6d      	subs	r5, r5, r1
 800651e:	4629      	mov	r1, r5
 8006520:	4638      	mov	r0, r7
 8006522:	f7ff ffa7 	bl	8006474 <sbrk_aligned>
 8006526:	3001      	adds	r0, #1
 8006528:	d037      	beq.n	800659a <_malloc_r+0xe6>
 800652a:	6823      	ldr	r3, [r4, #0]
 800652c:	442b      	add	r3, r5
 800652e:	6023      	str	r3, [r4, #0]
 8006530:	f8d8 3000 	ldr.w	r3, [r8]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d038      	beq.n	80065aa <_malloc_r+0xf6>
 8006538:	685a      	ldr	r2, [r3, #4]
 800653a:	42a2      	cmp	r2, r4
 800653c:	d12b      	bne.n	8006596 <_malloc_r+0xe2>
 800653e:	2200      	movs	r2, #0
 8006540:	605a      	str	r2, [r3, #4]
 8006542:	e00f      	b.n	8006564 <_malloc_r+0xb0>
 8006544:	6822      	ldr	r2, [r4, #0]
 8006546:	1b52      	subs	r2, r2, r5
 8006548:	d41f      	bmi.n	800658a <_malloc_r+0xd6>
 800654a:	2a0b      	cmp	r2, #11
 800654c:	d917      	bls.n	800657e <_malloc_r+0xca>
 800654e:	1961      	adds	r1, r4, r5
 8006550:	42a3      	cmp	r3, r4
 8006552:	6025      	str	r5, [r4, #0]
 8006554:	bf18      	it	ne
 8006556:	6059      	strne	r1, [r3, #4]
 8006558:	6863      	ldr	r3, [r4, #4]
 800655a:	bf08      	it	eq
 800655c:	f8c8 1000 	streq.w	r1, [r8]
 8006560:	5162      	str	r2, [r4, r5]
 8006562:	604b      	str	r3, [r1, #4]
 8006564:	4638      	mov	r0, r7
 8006566:	f104 060b 	add.w	r6, r4, #11
 800656a:	f000 fc27 	bl	8006dbc <__malloc_unlock>
 800656e:	f026 0607 	bic.w	r6, r6, #7
 8006572:	1d23      	adds	r3, r4, #4
 8006574:	1af2      	subs	r2, r6, r3
 8006576:	d0ae      	beq.n	80064d6 <_malloc_r+0x22>
 8006578:	1b9b      	subs	r3, r3, r6
 800657a:	50a3      	str	r3, [r4, r2]
 800657c:	e7ab      	b.n	80064d6 <_malloc_r+0x22>
 800657e:	42a3      	cmp	r3, r4
 8006580:	6862      	ldr	r2, [r4, #4]
 8006582:	d1dd      	bne.n	8006540 <_malloc_r+0x8c>
 8006584:	f8c8 2000 	str.w	r2, [r8]
 8006588:	e7ec      	b.n	8006564 <_malloc_r+0xb0>
 800658a:	4623      	mov	r3, r4
 800658c:	6864      	ldr	r4, [r4, #4]
 800658e:	e7ac      	b.n	80064ea <_malloc_r+0x36>
 8006590:	4634      	mov	r4, r6
 8006592:	6876      	ldr	r6, [r6, #4]
 8006594:	e7b4      	b.n	8006500 <_malloc_r+0x4c>
 8006596:	4613      	mov	r3, r2
 8006598:	e7cc      	b.n	8006534 <_malloc_r+0x80>
 800659a:	230c      	movs	r3, #12
 800659c:	603b      	str	r3, [r7, #0]
 800659e:	4638      	mov	r0, r7
 80065a0:	f000 fc0c 	bl	8006dbc <__malloc_unlock>
 80065a4:	e797      	b.n	80064d6 <_malloc_r+0x22>
 80065a6:	6025      	str	r5, [r4, #0]
 80065a8:	e7dc      	b.n	8006564 <_malloc_r+0xb0>
 80065aa:	605b      	str	r3, [r3, #4]
 80065ac:	deff      	udf	#255	; 0xff
 80065ae:	bf00      	nop
 80065b0:	20000380 	.word	0x20000380

080065b4 <__ascii_mbtowc>:
 80065b4:	b082      	sub	sp, #8
 80065b6:	b901      	cbnz	r1, 80065ba <__ascii_mbtowc+0x6>
 80065b8:	a901      	add	r1, sp, #4
 80065ba:	b142      	cbz	r2, 80065ce <__ascii_mbtowc+0x1a>
 80065bc:	b14b      	cbz	r3, 80065d2 <__ascii_mbtowc+0x1e>
 80065be:	7813      	ldrb	r3, [r2, #0]
 80065c0:	600b      	str	r3, [r1, #0]
 80065c2:	7812      	ldrb	r2, [r2, #0]
 80065c4:	1e10      	subs	r0, r2, #0
 80065c6:	bf18      	it	ne
 80065c8:	2001      	movne	r0, #1
 80065ca:	b002      	add	sp, #8
 80065cc:	4770      	bx	lr
 80065ce:	4610      	mov	r0, r2
 80065d0:	e7fb      	b.n	80065ca <__ascii_mbtowc+0x16>
 80065d2:	f06f 0001 	mvn.w	r0, #1
 80065d6:	e7f8      	b.n	80065ca <__ascii_mbtowc+0x16>

080065d8 <__svfiscanf_r>:
 80065d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065dc:	461d      	mov	r5, r3
 80065de:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80065e0:	07df      	lsls	r7, r3, #31
 80065e2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80065e6:	4606      	mov	r6, r0
 80065e8:	460c      	mov	r4, r1
 80065ea:	4692      	mov	sl, r2
 80065ec:	d405      	bmi.n	80065fa <__svfiscanf_r+0x22>
 80065ee:	898b      	ldrh	r3, [r1, #12]
 80065f0:	0598      	lsls	r0, r3, #22
 80065f2:	d402      	bmi.n	80065fa <__svfiscanf_r+0x22>
 80065f4:	6d88      	ldr	r0, [r1, #88]	; 0x58
 80065f6:	f7fe fbea 	bl	8004dce <__retarget_lock_acquire_recursive>
 80065fa:	2300      	movs	r3, #0
 80065fc:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 8006600:	4baa      	ldr	r3, [pc, #680]	; (80068ac <__svfiscanf_r+0x2d4>)
 8006602:	93a0      	str	r3, [sp, #640]	; 0x280
 8006604:	f10d 0804 	add.w	r8, sp, #4
 8006608:	4ba9      	ldr	r3, [pc, #676]	; (80068b0 <__svfiscanf_r+0x2d8>)
 800660a:	4faa      	ldr	r7, [pc, #680]	; (80068b4 <__svfiscanf_r+0x2dc>)
 800660c:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 80068b8 <__svfiscanf_r+0x2e0>
 8006610:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8006614:	93a1      	str	r3, [sp, #644]	; 0x284
 8006616:	9500      	str	r5, [sp, #0]
 8006618:	f89a 3000 	ldrb.w	r3, [sl]
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 8170 	beq.w	8006902 <__svfiscanf_r+0x32a>
 8006622:	5cf9      	ldrb	r1, [r7, r3]
 8006624:	f011 0108 	ands.w	r1, r1, #8
 8006628:	f10a 0501 	add.w	r5, sl, #1
 800662c:	d019      	beq.n	8006662 <__svfiscanf_r+0x8a>
 800662e:	6863      	ldr	r3, [r4, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	dd0f      	ble.n	8006654 <__svfiscanf_r+0x7c>
 8006634:	6823      	ldr	r3, [r4, #0]
 8006636:	781a      	ldrb	r2, [r3, #0]
 8006638:	5cba      	ldrb	r2, [r7, r2]
 800663a:	0711      	lsls	r1, r2, #28
 800663c:	d401      	bmi.n	8006642 <__svfiscanf_r+0x6a>
 800663e:	46aa      	mov	sl, r5
 8006640:	e7ea      	b.n	8006618 <__svfiscanf_r+0x40>
 8006642:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006644:	3201      	adds	r2, #1
 8006646:	9245      	str	r2, [sp, #276]	; 0x114
 8006648:	6862      	ldr	r2, [r4, #4]
 800664a:	3301      	adds	r3, #1
 800664c:	3a01      	subs	r2, #1
 800664e:	6062      	str	r2, [r4, #4]
 8006650:	6023      	str	r3, [r4, #0]
 8006652:	e7ec      	b.n	800662e <__svfiscanf_r+0x56>
 8006654:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006656:	4621      	mov	r1, r4
 8006658:	4630      	mov	r0, r6
 800665a:	4798      	blx	r3
 800665c:	2800      	cmp	r0, #0
 800665e:	d0e9      	beq.n	8006634 <__svfiscanf_r+0x5c>
 8006660:	e7ed      	b.n	800663e <__svfiscanf_r+0x66>
 8006662:	2b25      	cmp	r3, #37	; 0x25
 8006664:	d012      	beq.n	800668c <__svfiscanf_r+0xb4>
 8006666:	469a      	mov	sl, r3
 8006668:	6863      	ldr	r3, [r4, #4]
 800666a:	2b00      	cmp	r3, #0
 800666c:	f340 8093 	ble.w	8006796 <__svfiscanf_r+0x1be>
 8006670:	6822      	ldr	r2, [r4, #0]
 8006672:	7813      	ldrb	r3, [r2, #0]
 8006674:	4553      	cmp	r3, sl
 8006676:	f040 8144 	bne.w	8006902 <__svfiscanf_r+0x32a>
 800667a:	6863      	ldr	r3, [r4, #4]
 800667c:	3b01      	subs	r3, #1
 800667e:	6063      	str	r3, [r4, #4]
 8006680:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006682:	3201      	adds	r2, #1
 8006684:	3301      	adds	r3, #1
 8006686:	6022      	str	r2, [r4, #0]
 8006688:	9345      	str	r3, [sp, #276]	; 0x114
 800668a:	e7d8      	b.n	800663e <__svfiscanf_r+0x66>
 800668c:	9141      	str	r1, [sp, #260]	; 0x104
 800668e:	9143      	str	r1, [sp, #268]	; 0x10c
 8006690:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8006694:	2b2a      	cmp	r3, #42	; 0x2a
 8006696:	bf02      	ittt	eq
 8006698:	2310      	moveq	r3, #16
 800669a:	9341      	streq	r3, [sp, #260]	; 0x104
 800669c:	f10a 0502 	addeq.w	r5, sl, #2
 80066a0:	220a      	movs	r2, #10
 80066a2:	46aa      	mov	sl, r5
 80066a4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80066a8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80066ac:	2b09      	cmp	r3, #9
 80066ae:	d91d      	bls.n	80066ec <__svfiscanf_r+0x114>
 80066b0:	4881      	ldr	r0, [pc, #516]	; (80068b8 <__svfiscanf_r+0x2e0>)
 80066b2:	2203      	movs	r2, #3
 80066b4:	f7f9 fdac 	bl	8000210 <memchr>
 80066b8:	b138      	cbz	r0, 80066ca <__svfiscanf_r+0xf2>
 80066ba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80066bc:	eba0 0009 	sub.w	r0, r0, r9
 80066c0:	2301      	movs	r3, #1
 80066c2:	4083      	lsls	r3, r0
 80066c4:	4313      	orrs	r3, r2
 80066c6:	9341      	str	r3, [sp, #260]	; 0x104
 80066c8:	4655      	mov	r5, sl
 80066ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80066ce:	2b78      	cmp	r3, #120	; 0x78
 80066d0:	d807      	bhi.n	80066e2 <__svfiscanf_r+0x10a>
 80066d2:	2b57      	cmp	r3, #87	; 0x57
 80066d4:	d811      	bhi.n	80066fa <__svfiscanf_r+0x122>
 80066d6:	2b25      	cmp	r3, #37	; 0x25
 80066d8:	d0c5      	beq.n	8006666 <__svfiscanf_r+0x8e>
 80066da:	d857      	bhi.n	800678c <__svfiscanf_r+0x1b4>
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f000 80c6 	beq.w	800686e <__svfiscanf_r+0x296>
 80066e2:	2303      	movs	r3, #3
 80066e4:	9347      	str	r3, [sp, #284]	; 0x11c
 80066e6:	230a      	movs	r3, #10
 80066e8:	9342      	str	r3, [sp, #264]	; 0x108
 80066ea:	e07f      	b.n	80067ec <__svfiscanf_r+0x214>
 80066ec:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80066ee:	fb02 1103 	mla	r1, r2, r3, r1
 80066f2:	3930      	subs	r1, #48	; 0x30
 80066f4:	9143      	str	r1, [sp, #268]	; 0x10c
 80066f6:	4655      	mov	r5, sl
 80066f8:	e7d3      	b.n	80066a2 <__svfiscanf_r+0xca>
 80066fa:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80066fe:	2a20      	cmp	r2, #32
 8006700:	d8ef      	bhi.n	80066e2 <__svfiscanf_r+0x10a>
 8006702:	a101      	add	r1, pc, #4	; (adr r1, 8006708 <__svfiscanf_r+0x130>)
 8006704:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006708:	080067cf 	.word	0x080067cf
 800670c:	080066e3 	.word	0x080066e3
 8006710:	080066e3 	.word	0x080066e3
 8006714:	0800682d 	.word	0x0800682d
 8006718:	080066e3 	.word	0x080066e3
 800671c:	080066e3 	.word	0x080066e3
 8006720:	080066e3 	.word	0x080066e3
 8006724:	080066e3 	.word	0x080066e3
 8006728:	080066e3 	.word	0x080066e3
 800672c:	080066e3 	.word	0x080066e3
 8006730:	080066e3 	.word	0x080066e3
 8006734:	08006843 	.word	0x08006843
 8006738:	08006829 	.word	0x08006829
 800673c:	08006793 	.word	0x08006793
 8006740:	08006793 	.word	0x08006793
 8006744:	08006793 	.word	0x08006793
 8006748:	080066e3 	.word	0x080066e3
 800674c:	080067e5 	.word	0x080067e5
 8006750:	080066e3 	.word	0x080066e3
 8006754:	080066e3 	.word	0x080066e3
 8006758:	080066e3 	.word	0x080066e3
 800675c:	080066e3 	.word	0x080066e3
 8006760:	08006853 	.word	0x08006853
 8006764:	08006821 	.word	0x08006821
 8006768:	080067c7 	.word	0x080067c7
 800676c:	080066e3 	.word	0x080066e3
 8006770:	080066e3 	.word	0x080066e3
 8006774:	0800684f 	.word	0x0800684f
 8006778:	080066e3 	.word	0x080066e3
 800677c:	08006829 	.word	0x08006829
 8006780:	080066e3 	.word	0x080066e3
 8006784:	080066e3 	.word	0x080066e3
 8006788:	080067cf 	.word	0x080067cf
 800678c:	3b45      	subs	r3, #69	; 0x45
 800678e:	2b02      	cmp	r3, #2
 8006790:	d8a7      	bhi.n	80066e2 <__svfiscanf_r+0x10a>
 8006792:	2305      	movs	r3, #5
 8006794:	e029      	b.n	80067ea <__svfiscanf_r+0x212>
 8006796:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006798:	4621      	mov	r1, r4
 800679a:	4630      	mov	r0, r6
 800679c:	4798      	blx	r3
 800679e:	2800      	cmp	r0, #0
 80067a0:	f43f af66 	beq.w	8006670 <__svfiscanf_r+0x98>
 80067a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067a6:	07da      	lsls	r2, r3, #31
 80067a8:	f140 80a3 	bpl.w	80068f2 <__svfiscanf_r+0x31a>
 80067ac:	9844      	ldr	r0, [sp, #272]	; 0x110
 80067ae:	2800      	cmp	r0, #0
 80067b0:	d066      	beq.n	8006880 <__svfiscanf_r+0x2a8>
 80067b2:	89a3      	ldrh	r3, [r4, #12]
 80067b4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80067b8:	bf18      	it	ne
 80067ba:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80067be:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80067c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067c6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80067c8:	f042 0220 	orr.w	r2, r2, #32
 80067cc:	9241      	str	r2, [sp, #260]	; 0x104
 80067ce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80067d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067d4:	9241      	str	r2, [sp, #260]	; 0x104
 80067d6:	2210      	movs	r2, #16
 80067d8:	2b6f      	cmp	r3, #111	; 0x6f
 80067da:	9242      	str	r2, [sp, #264]	; 0x108
 80067dc:	bf34      	ite	cc
 80067de:	2303      	movcc	r3, #3
 80067e0:	2304      	movcs	r3, #4
 80067e2:	e002      	b.n	80067ea <__svfiscanf_r+0x212>
 80067e4:	2300      	movs	r3, #0
 80067e6:	9342      	str	r3, [sp, #264]	; 0x108
 80067e8:	2303      	movs	r3, #3
 80067ea:	9347      	str	r3, [sp, #284]	; 0x11c
 80067ec:	6863      	ldr	r3, [r4, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	dd49      	ble.n	8006886 <__svfiscanf_r+0x2ae>
 80067f2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80067f4:	065b      	lsls	r3, r3, #25
 80067f6:	d404      	bmi.n	8006802 <__svfiscanf_r+0x22a>
 80067f8:	6823      	ldr	r3, [r4, #0]
 80067fa:	781a      	ldrb	r2, [r3, #0]
 80067fc:	5cba      	ldrb	r2, [r7, r2]
 80067fe:	0710      	lsls	r0, r2, #28
 8006800:	d448      	bmi.n	8006894 <__svfiscanf_r+0x2bc>
 8006802:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006804:	2b02      	cmp	r3, #2
 8006806:	dc60      	bgt.n	80068ca <__svfiscanf_r+0x2f2>
 8006808:	466b      	mov	r3, sp
 800680a:	4622      	mov	r2, r4
 800680c:	a941      	add	r1, sp, #260	; 0x104
 800680e:	4630      	mov	r0, r6
 8006810:	f000 f898 	bl	8006944 <_scanf_chars>
 8006814:	2801      	cmp	r0, #1
 8006816:	d074      	beq.n	8006902 <__svfiscanf_r+0x32a>
 8006818:	2802      	cmp	r0, #2
 800681a:	f47f af10 	bne.w	800663e <__svfiscanf_r+0x66>
 800681e:	e7c1      	b.n	80067a4 <__svfiscanf_r+0x1cc>
 8006820:	2308      	movs	r3, #8
 8006822:	9342      	str	r3, [sp, #264]	; 0x108
 8006824:	2304      	movs	r3, #4
 8006826:	e7e0      	b.n	80067ea <__svfiscanf_r+0x212>
 8006828:	220a      	movs	r2, #10
 800682a:	e7d5      	b.n	80067d8 <__svfiscanf_r+0x200>
 800682c:	4629      	mov	r1, r5
 800682e:	4640      	mov	r0, r8
 8006830:	f000 f9d6 	bl	8006be0 <__sccl>
 8006834:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800683a:	9341      	str	r3, [sp, #260]	; 0x104
 800683c:	4605      	mov	r5, r0
 800683e:	2301      	movs	r3, #1
 8006840:	e7d3      	b.n	80067ea <__svfiscanf_r+0x212>
 8006842:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006848:	9341      	str	r3, [sp, #260]	; 0x104
 800684a:	2300      	movs	r3, #0
 800684c:	e7cd      	b.n	80067ea <__svfiscanf_r+0x212>
 800684e:	2302      	movs	r3, #2
 8006850:	e7cb      	b.n	80067ea <__svfiscanf_r+0x212>
 8006852:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006854:	06c3      	lsls	r3, r0, #27
 8006856:	f53f aef2 	bmi.w	800663e <__svfiscanf_r+0x66>
 800685a:	9b00      	ldr	r3, [sp, #0]
 800685c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800685e:	1d19      	adds	r1, r3, #4
 8006860:	9100      	str	r1, [sp, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	07c0      	lsls	r0, r0, #31
 8006866:	bf4c      	ite	mi
 8006868:	801a      	strhmi	r2, [r3, #0]
 800686a:	601a      	strpl	r2, [r3, #0]
 800686c:	e6e7      	b.n	800663e <__svfiscanf_r+0x66>
 800686e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006870:	07d8      	lsls	r0, r3, #31
 8006872:	d405      	bmi.n	8006880 <__svfiscanf_r+0x2a8>
 8006874:	89a3      	ldrh	r3, [r4, #12]
 8006876:	0599      	lsls	r1, r3, #22
 8006878:	d402      	bmi.n	8006880 <__svfiscanf_r+0x2a8>
 800687a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800687c:	f7fe faa8 	bl	8004dd0 <__retarget_lock_release_recursive>
 8006880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006884:	e79b      	b.n	80067be <__svfiscanf_r+0x1e6>
 8006886:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006888:	4621      	mov	r1, r4
 800688a:	4630      	mov	r0, r6
 800688c:	4798      	blx	r3
 800688e:	2800      	cmp	r0, #0
 8006890:	d0af      	beq.n	80067f2 <__svfiscanf_r+0x21a>
 8006892:	e787      	b.n	80067a4 <__svfiscanf_r+0x1cc>
 8006894:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006896:	3201      	adds	r2, #1
 8006898:	9245      	str	r2, [sp, #276]	; 0x114
 800689a:	6862      	ldr	r2, [r4, #4]
 800689c:	3a01      	subs	r2, #1
 800689e:	2a00      	cmp	r2, #0
 80068a0:	6062      	str	r2, [r4, #4]
 80068a2:	dd0b      	ble.n	80068bc <__svfiscanf_r+0x2e4>
 80068a4:	3301      	adds	r3, #1
 80068a6:	6023      	str	r3, [r4, #0]
 80068a8:	e7a6      	b.n	80067f8 <__svfiscanf_r+0x220>
 80068aa:	bf00      	nop
 80068ac:	0800781d 	.word	0x0800781d
 80068b0:	08007aa5 	.word	0x08007aa5
 80068b4:	080083d1 	.word	0x080083d1
 80068b8:	080085c4 	.word	0x080085c4
 80068bc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80068be:	4621      	mov	r1, r4
 80068c0:	4630      	mov	r0, r6
 80068c2:	4798      	blx	r3
 80068c4:	2800      	cmp	r0, #0
 80068c6:	d097      	beq.n	80067f8 <__svfiscanf_r+0x220>
 80068c8:	e76c      	b.n	80067a4 <__svfiscanf_r+0x1cc>
 80068ca:	2b04      	cmp	r3, #4
 80068cc:	dc06      	bgt.n	80068dc <__svfiscanf_r+0x304>
 80068ce:	466b      	mov	r3, sp
 80068d0:	4622      	mov	r2, r4
 80068d2:	a941      	add	r1, sp, #260	; 0x104
 80068d4:	4630      	mov	r0, r6
 80068d6:	f000 f88f 	bl	80069f8 <_scanf_i>
 80068da:	e79b      	b.n	8006814 <__svfiscanf_r+0x23c>
 80068dc:	4b0e      	ldr	r3, [pc, #56]	; (8006918 <__svfiscanf_r+0x340>)
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f43f aead 	beq.w	800663e <__svfiscanf_r+0x66>
 80068e4:	466b      	mov	r3, sp
 80068e6:	4622      	mov	r2, r4
 80068e8:	a941      	add	r1, sp, #260	; 0x104
 80068ea:	4630      	mov	r0, r6
 80068ec:	f7fd f88a 	bl	8003a04 <_scanf_float>
 80068f0:	e790      	b.n	8006814 <__svfiscanf_r+0x23c>
 80068f2:	89a3      	ldrh	r3, [r4, #12]
 80068f4:	0599      	lsls	r1, r3, #22
 80068f6:	f53f af59 	bmi.w	80067ac <__svfiscanf_r+0x1d4>
 80068fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068fc:	f7fe fa68 	bl	8004dd0 <__retarget_lock_release_recursive>
 8006900:	e754      	b.n	80067ac <__svfiscanf_r+0x1d4>
 8006902:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006904:	07da      	lsls	r2, r3, #31
 8006906:	d405      	bmi.n	8006914 <__svfiscanf_r+0x33c>
 8006908:	89a3      	ldrh	r3, [r4, #12]
 800690a:	059b      	lsls	r3, r3, #22
 800690c:	d402      	bmi.n	8006914 <__svfiscanf_r+0x33c>
 800690e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006910:	f7fe fa5e 	bl	8004dd0 <__retarget_lock_release_recursive>
 8006914:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006916:	e752      	b.n	80067be <__svfiscanf_r+0x1e6>
 8006918:	08003a05 	.word	0x08003a05

0800691c <_vfiscanf_r>:
 800691c:	b530      	push	{r4, r5, lr}
 800691e:	4604      	mov	r4, r0
 8006920:	b085      	sub	sp, #20
 8006922:	b148      	cbz	r0, 8006938 <_vfiscanf_r+0x1c>
 8006924:	6a05      	ldr	r5, [r0, #32]
 8006926:	b93d      	cbnz	r5, 8006938 <_vfiscanf_r+0x1c>
 8006928:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800692c:	9101      	str	r1, [sp, #4]
 800692e:	f7fd fb25 	bl	8003f7c <__sinit>
 8006932:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006936:	9901      	ldr	r1, [sp, #4]
 8006938:	4620      	mov	r0, r4
 800693a:	b005      	add	sp, #20
 800693c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006940:	f7ff be4a 	b.w	80065d8 <__svfiscanf_r>

08006944 <_scanf_chars>:
 8006944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006948:	4615      	mov	r5, r2
 800694a:	688a      	ldr	r2, [r1, #8]
 800694c:	4680      	mov	r8, r0
 800694e:	460c      	mov	r4, r1
 8006950:	b932      	cbnz	r2, 8006960 <_scanf_chars+0x1c>
 8006952:	698a      	ldr	r2, [r1, #24]
 8006954:	2a00      	cmp	r2, #0
 8006956:	bf0c      	ite	eq
 8006958:	2201      	moveq	r2, #1
 800695a:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800695e:	608a      	str	r2, [r1, #8]
 8006960:	6822      	ldr	r2, [r4, #0]
 8006962:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80069f4 <_scanf_chars+0xb0>
 8006966:	06d1      	lsls	r1, r2, #27
 8006968:	bf5f      	itttt	pl
 800696a:	681a      	ldrpl	r2, [r3, #0]
 800696c:	1d11      	addpl	r1, r2, #4
 800696e:	6019      	strpl	r1, [r3, #0]
 8006970:	6816      	ldrpl	r6, [r2, #0]
 8006972:	2700      	movs	r7, #0
 8006974:	69a0      	ldr	r0, [r4, #24]
 8006976:	b188      	cbz	r0, 800699c <_scanf_chars+0x58>
 8006978:	2801      	cmp	r0, #1
 800697a:	d107      	bne.n	800698c <_scanf_chars+0x48>
 800697c:	682a      	ldr	r2, [r5, #0]
 800697e:	7811      	ldrb	r1, [r2, #0]
 8006980:	6962      	ldr	r2, [r4, #20]
 8006982:	5c52      	ldrb	r2, [r2, r1]
 8006984:	b952      	cbnz	r2, 800699c <_scanf_chars+0x58>
 8006986:	2f00      	cmp	r7, #0
 8006988:	d031      	beq.n	80069ee <_scanf_chars+0xaa>
 800698a:	e022      	b.n	80069d2 <_scanf_chars+0x8e>
 800698c:	2802      	cmp	r0, #2
 800698e:	d120      	bne.n	80069d2 <_scanf_chars+0x8e>
 8006990:	682b      	ldr	r3, [r5, #0]
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	f819 3003 	ldrb.w	r3, [r9, r3]
 8006998:	071b      	lsls	r3, r3, #28
 800699a:	d41a      	bmi.n	80069d2 <_scanf_chars+0x8e>
 800699c:	6823      	ldr	r3, [r4, #0]
 800699e:	06da      	lsls	r2, r3, #27
 80069a0:	bf5e      	ittt	pl
 80069a2:	682b      	ldrpl	r3, [r5, #0]
 80069a4:	781b      	ldrbpl	r3, [r3, #0]
 80069a6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80069aa:	682a      	ldr	r2, [r5, #0]
 80069ac:	686b      	ldr	r3, [r5, #4]
 80069ae:	3201      	adds	r2, #1
 80069b0:	602a      	str	r2, [r5, #0]
 80069b2:	68a2      	ldr	r2, [r4, #8]
 80069b4:	3b01      	subs	r3, #1
 80069b6:	3a01      	subs	r2, #1
 80069b8:	606b      	str	r3, [r5, #4]
 80069ba:	3701      	adds	r7, #1
 80069bc:	60a2      	str	r2, [r4, #8]
 80069be:	b142      	cbz	r2, 80069d2 <_scanf_chars+0x8e>
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	dcd7      	bgt.n	8006974 <_scanf_chars+0x30>
 80069c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80069c8:	4629      	mov	r1, r5
 80069ca:	4640      	mov	r0, r8
 80069cc:	4798      	blx	r3
 80069ce:	2800      	cmp	r0, #0
 80069d0:	d0d0      	beq.n	8006974 <_scanf_chars+0x30>
 80069d2:	6823      	ldr	r3, [r4, #0]
 80069d4:	f013 0310 	ands.w	r3, r3, #16
 80069d8:	d105      	bne.n	80069e6 <_scanf_chars+0xa2>
 80069da:	68e2      	ldr	r2, [r4, #12]
 80069dc:	3201      	adds	r2, #1
 80069de:	60e2      	str	r2, [r4, #12]
 80069e0:	69a2      	ldr	r2, [r4, #24]
 80069e2:	b102      	cbz	r2, 80069e6 <_scanf_chars+0xa2>
 80069e4:	7033      	strb	r3, [r6, #0]
 80069e6:	6923      	ldr	r3, [r4, #16]
 80069e8:	443b      	add	r3, r7
 80069ea:	6123      	str	r3, [r4, #16]
 80069ec:	2000      	movs	r0, #0
 80069ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069f2:	bf00      	nop
 80069f4:	080083d1 	.word	0x080083d1

080069f8 <_scanf_i>:
 80069f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069fc:	4698      	mov	r8, r3
 80069fe:	4b74      	ldr	r3, [pc, #464]	; (8006bd0 <_scanf_i+0x1d8>)
 8006a00:	460c      	mov	r4, r1
 8006a02:	4682      	mov	sl, r0
 8006a04:	4616      	mov	r6, r2
 8006a06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006a0a:	b087      	sub	sp, #28
 8006a0c:	ab03      	add	r3, sp, #12
 8006a0e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006a12:	4b70      	ldr	r3, [pc, #448]	; (8006bd4 <_scanf_i+0x1dc>)
 8006a14:	69a1      	ldr	r1, [r4, #24]
 8006a16:	4a70      	ldr	r2, [pc, #448]	; (8006bd8 <_scanf_i+0x1e0>)
 8006a18:	2903      	cmp	r1, #3
 8006a1a:	bf18      	it	ne
 8006a1c:	461a      	movne	r2, r3
 8006a1e:	68a3      	ldr	r3, [r4, #8]
 8006a20:	9201      	str	r2, [sp, #4]
 8006a22:	1e5a      	subs	r2, r3, #1
 8006a24:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006a28:	bf88      	it	hi
 8006a2a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006a2e:	4627      	mov	r7, r4
 8006a30:	bf82      	ittt	hi
 8006a32:	eb03 0905 	addhi.w	r9, r3, r5
 8006a36:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006a3a:	60a3      	strhi	r3, [r4, #8]
 8006a3c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006a40:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8006a44:	bf98      	it	ls
 8006a46:	f04f 0900 	movls.w	r9, #0
 8006a4a:	6023      	str	r3, [r4, #0]
 8006a4c:	463d      	mov	r5, r7
 8006a4e:	f04f 0b00 	mov.w	fp, #0
 8006a52:	6831      	ldr	r1, [r6, #0]
 8006a54:	ab03      	add	r3, sp, #12
 8006a56:	7809      	ldrb	r1, [r1, #0]
 8006a58:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006a5c:	2202      	movs	r2, #2
 8006a5e:	f7f9 fbd7 	bl	8000210 <memchr>
 8006a62:	b328      	cbz	r0, 8006ab0 <_scanf_i+0xb8>
 8006a64:	f1bb 0f01 	cmp.w	fp, #1
 8006a68:	d159      	bne.n	8006b1e <_scanf_i+0x126>
 8006a6a:	6862      	ldr	r2, [r4, #4]
 8006a6c:	b92a      	cbnz	r2, 8006a7a <_scanf_i+0x82>
 8006a6e:	6822      	ldr	r2, [r4, #0]
 8006a70:	2308      	movs	r3, #8
 8006a72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a76:	6063      	str	r3, [r4, #4]
 8006a78:	6022      	str	r2, [r4, #0]
 8006a7a:	6822      	ldr	r2, [r4, #0]
 8006a7c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8006a80:	6022      	str	r2, [r4, #0]
 8006a82:	68a2      	ldr	r2, [r4, #8]
 8006a84:	1e51      	subs	r1, r2, #1
 8006a86:	60a1      	str	r1, [r4, #8]
 8006a88:	b192      	cbz	r2, 8006ab0 <_scanf_i+0xb8>
 8006a8a:	6832      	ldr	r2, [r6, #0]
 8006a8c:	1c51      	adds	r1, r2, #1
 8006a8e:	6031      	str	r1, [r6, #0]
 8006a90:	7812      	ldrb	r2, [r2, #0]
 8006a92:	f805 2b01 	strb.w	r2, [r5], #1
 8006a96:	6872      	ldr	r2, [r6, #4]
 8006a98:	3a01      	subs	r2, #1
 8006a9a:	2a00      	cmp	r2, #0
 8006a9c:	6072      	str	r2, [r6, #4]
 8006a9e:	dc07      	bgt.n	8006ab0 <_scanf_i+0xb8>
 8006aa0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8006aa4:	4631      	mov	r1, r6
 8006aa6:	4650      	mov	r0, sl
 8006aa8:	4790      	blx	r2
 8006aaa:	2800      	cmp	r0, #0
 8006aac:	f040 8085 	bne.w	8006bba <_scanf_i+0x1c2>
 8006ab0:	f10b 0b01 	add.w	fp, fp, #1
 8006ab4:	f1bb 0f03 	cmp.w	fp, #3
 8006ab8:	d1cb      	bne.n	8006a52 <_scanf_i+0x5a>
 8006aba:	6863      	ldr	r3, [r4, #4]
 8006abc:	b90b      	cbnz	r3, 8006ac2 <_scanf_i+0xca>
 8006abe:	230a      	movs	r3, #10
 8006ac0:	6063      	str	r3, [r4, #4]
 8006ac2:	6863      	ldr	r3, [r4, #4]
 8006ac4:	4945      	ldr	r1, [pc, #276]	; (8006bdc <_scanf_i+0x1e4>)
 8006ac6:	6960      	ldr	r0, [r4, #20]
 8006ac8:	1ac9      	subs	r1, r1, r3
 8006aca:	f000 f889 	bl	8006be0 <__sccl>
 8006ace:	f04f 0b00 	mov.w	fp, #0
 8006ad2:	68a3      	ldr	r3, [r4, #8]
 8006ad4:	6822      	ldr	r2, [r4, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d03d      	beq.n	8006b56 <_scanf_i+0x15e>
 8006ada:	6831      	ldr	r1, [r6, #0]
 8006adc:	6960      	ldr	r0, [r4, #20]
 8006ade:	f891 c000 	ldrb.w	ip, [r1]
 8006ae2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	d035      	beq.n	8006b56 <_scanf_i+0x15e>
 8006aea:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8006aee:	d124      	bne.n	8006b3a <_scanf_i+0x142>
 8006af0:	0510      	lsls	r0, r2, #20
 8006af2:	d522      	bpl.n	8006b3a <_scanf_i+0x142>
 8006af4:	f10b 0b01 	add.w	fp, fp, #1
 8006af8:	f1b9 0f00 	cmp.w	r9, #0
 8006afc:	d003      	beq.n	8006b06 <_scanf_i+0x10e>
 8006afe:	3301      	adds	r3, #1
 8006b00:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8006b04:	60a3      	str	r3, [r4, #8]
 8006b06:	6873      	ldr	r3, [r6, #4]
 8006b08:	3b01      	subs	r3, #1
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	6073      	str	r3, [r6, #4]
 8006b0e:	dd1b      	ble.n	8006b48 <_scanf_i+0x150>
 8006b10:	6833      	ldr	r3, [r6, #0]
 8006b12:	3301      	adds	r3, #1
 8006b14:	6033      	str	r3, [r6, #0]
 8006b16:	68a3      	ldr	r3, [r4, #8]
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	60a3      	str	r3, [r4, #8]
 8006b1c:	e7d9      	b.n	8006ad2 <_scanf_i+0xda>
 8006b1e:	f1bb 0f02 	cmp.w	fp, #2
 8006b22:	d1ae      	bne.n	8006a82 <_scanf_i+0x8a>
 8006b24:	6822      	ldr	r2, [r4, #0]
 8006b26:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006b2a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006b2e:	d1bf      	bne.n	8006ab0 <_scanf_i+0xb8>
 8006b30:	2310      	movs	r3, #16
 8006b32:	6063      	str	r3, [r4, #4]
 8006b34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b38:	e7a2      	b.n	8006a80 <_scanf_i+0x88>
 8006b3a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8006b3e:	6022      	str	r2, [r4, #0]
 8006b40:	780b      	ldrb	r3, [r1, #0]
 8006b42:	f805 3b01 	strb.w	r3, [r5], #1
 8006b46:	e7de      	b.n	8006b06 <_scanf_i+0x10e>
 8006b48:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006b4c:	4631      	mov	r1, r6
 8006b4e:	4650      	mov	r0, sl
 8006b50:	4798      	blx	r3
 8006b52:	2800      	cmp	r0, #0
 8006b54:	d0df      	beq.n	8006b16 <_scanf_i+0x11e>
 8006b56:	6823      	ldr	r3, [r4, #0]
 8006b58:	05d9      	lsls	r1, r3, #23
 8006b5a:	d50d      	bpl.n	8006b78 <_scanf_i+0x180>
 8006b5c:	42bd      	cmp	r5, r7
 8006b5e:	d909      	bls.n	8006b74 <_scanf_i+0x17c>
 8006b60:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006b64:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b68:	4632      	mov	r2, r6
 8006b6a:	4650      	mov	r0, sl
 8006b6c:	4798      	blx	r3
 8006b6e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8006b72:	464d      	mov	r5, r9
 8006b74:	42bd      	cmp	r5, r7
 8006b76:	d028      	beq.n	8006bca <_scanf_i+0x1d2>
 8006b78:	6822      	ldr	r2, [r4, #0]
 8006b7a:	f012 0210 	ands.w	r2, r2, #16
 8006b7e:	d113      	bne.n	8006ba8 <_scanf_i+0x1b0>
 8006b80:	702a      	strb	r2, [r5, #0]
 8006b82:	6863      	ldr	r3, [r4, #4]
 8006b84:	9e01      	ldr	r6, [sp, #4]
 8006b86:	4639      	mov	r1, r7
 8006b88:	4650      	mov	r0, sl
 8006b8a:	47b0      	blx	r6
 8006b8c:	f8d8 3000 	ldr.w	r3, [r8]
 8006b90:	6821      	ldr	r1, [r4, #0]
 8006b92:	1d1a      	adds	r2, r3, #4
 8006b94:	f8c8 2000 	str.w	r2, [r8]
 8006b98:	f011 0f20 	tst.w	r1, #32
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	d00f      	beq.n	8006bc0 <_scanf_i+0x1c8>
 8006ba0:	6018      	str	r0, [r3, #0]
 8006ba2:	68e3      	ldr	r3, [r4, #12]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	60e3      	str	r3, [r4, #12]
 8006ba8:	6923      	ldr	r3, [r4, #16]
 8006baa:	1bed      	subs	r5, r5, r7
 8006bac:	445d      	add	r5, fp
 8006bae:	442b      	add	r3, r5
 8006bb0:	6123      	str	r3, [r4, #16]
 8006bb2:	2000      	movs	r0, #0
 8006bb4:	b007      	add	sp, #28
 8006bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bba:	f04f 0b00 	mov.w	fp, #0
 8006bbe:	e7ca      	b.n	8006b56 <_scanf_i+0x15e>
 8006bc0:	07ca      	lsls	r2, r1, #31
 8006bc2:	bf4c      	ite	mi
 8006bc4:	8018      	strhmi	r0, [r3, #0]
 8006bc6:	6018      	strpl	r0, [r3, #0]
 8006bc8:	e7eb      	b.n	8006ba2 <_scanf_i+0x1aa>
 8006bca:	2001      	movs	r0, #1
 8006bcc:	e7f2      	b.n	8006bb4 <_scanf_i+0x1bc>
 8006bce:	bf00      	nop
 8006bd0:	08008314 	.word	0x08008314
 8006bd4:	08007a69 	.word	0x08007a69
 8006bd8:	08004cd9 	.word	0x08004cd9
 8006bdc:	080085df 	.word	0x080085df

08006be0 <__sccl>:
 8006be0:	b570      	push	{r4, r5, r6, lr}
 8006be2:	780b      	ldrb	r3, [r1, #0]
 8006be4:	4604      	mov	r4, r0
 8006be6:	2b5e      	cmp	r3, #94	; 0x5e
 8006be8:	bf0b      	itete	eq
 8006bea:	784b      	ldrbeq	r3, [r1, #1]
 8006bec:	1c4a      	addne	r2, r1, #1
 8006bee:	1c8a      	addeq	r2, r1, #2
 8006bf0:	2100      	movne	r1, #0
 8006bf2:	bf08      	it	eq
 8006bf4:	2101      	moveq	r1, #1
 8006bf6:	3801      	subs	r0, #1
 8006bf8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8006bfc:	f800 1f01 	strb.w	r1, [r0, #1]!
 8006c00:	42a8      	cmp	r0, r5
 8006c02:	d1fb      	bne.n	8006bfc <__sccl+0x1c>
 8006c04:	b90b      	cbnz	r3, 8006c0a <__sccl+0x2a>
 8006c06:	1e50      	subs	r0, r2, #1
 8006c08:	bd70      	pop	{r4, r5, r6, pc}
 8006c0a:	f081 0101 	eor.w	r1, r1, #1
 8006c0e:	54e1      	strb	r1, [r4, r3]
 8006c10:	4610      	mov	r0, r2
 8006c12:	4602      	mov	r2, r0
 8006c14:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006c18:	2d2d      	cmp	r5, #45	; 0x2d
 8006c1a:	d005      	beq.n	8006c28 <__sccl+0x48>
 8006c1c:	2d5d      	cmp	r5, #93	; 0x5d
 8006c1e:	d016      	beq.n	8006c4e <__sccl+0x6e>
 8006c20:	2d00      	cmp	r5, #0
 8006c22:	d0f1      	beq.n	8006c08 <__sccl+0x28>
 8006c24:	462b      	mov	r3, r5
 8006c26:	e7f2      	b.n	8006c0e <__sccl+0x2e>
 8006c28:	7846      	ldrb	r6, [r0, #1]
 8006c2a:	2e5d      	cmp	r6, #93	; 0x5d
 8006c2c:	d0fa      	beq.n	8006c24 <__sccl+0x44>
 8006c2e:	42b3      	cmp	r3, r6
 8006c30:	dcf8      	bgt.n	8006c24 <__sccl+0x44>
 8006c32:	3002      	adds	r0, #2
 8006c34:	461a      	mov	r2, r3
 8006c36:	3201      	adds	r2, #1
 8006c38:	4296      	cmp	r6, r2
 8006c3a:	54a1      	strb	r1, [r4, r2]
 8006c3c:	dcfb      	bgt.n	8006c36 <__sccl+0x56>
 8006c3e:	1af2      	subs	r2, r6, r3
 8006c40:	3a01      	subs	r2, #1
 8006c42:	1c5d      	adds	r5, r3, #1
 8006c44:	42b3      	cmp	r3, r6
 8006c46:	bfa8      	it	ge
 8006c48:	2200      	movge	r2, #0
 8006c4a:	18ab      	adds	r3, r5, r2
 8006c4c:	e7e1      	b.n	8006c12 <__sccl+0x32>
 8006c4e:	4610      	mov	r0, r2
 8006c50:	e7da      	b.n	8006c08 <__sccl+0x28>
	...

08006c54 <__sflush_r>:
 8006c54:	898a      	ldrh	r2, [r1, #12]
 8006c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c5a:	4605      	mov	r5, r0
 8006c5c:	0710      	lsls	r0, r2, #28
 8006c5e:	460c      	mov	r4, r1
 8006c60:	d458      	bmi.n	8006d14 <__sflush_r+0xc0>
 8006c62:	684b      	ldr	r3, [r1, #4]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	dc05      	bgt.n	8006c74 <__sflush_r+0x20>
 8006c68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	dc02      	bgt.n	8006c74 <__sflush_r+0x20>
 8006c6e:	2000      	movs	r0, #0
 8006c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c76:	2e00      	cmp	r6, #0
 8006c78:	d0f9      	beq.n	8006c6e <__sflush_r+0x1a>
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006c80:	682f      	ldr	r7, [r5, #0]
 8006c82:	6a21      	ldr	r1, [r4, #32]
 8006c84:	602b      	str	r3, [r5, #0]
 8006c86:	d032      	beq.n	8006cee <__sflush_r+0x9a>
 8006c88:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006c8a:	89a3      	ldrh	r3, [r4, #12]
 8006c8c:	075a      	lsls	r2, r3, #29
 8006c8e:	d505      	bpl.n	8006c9c <__sflush_r+0x48>
 8006c90:	6863      	ldr	r3, [r4, #4]
 8006c92:	1ac0      	subs	r0, r0, r3
 8006c94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c96:	b10b      	cbz	r3, 8006c9c <__sflush_r+0x48>
 8006c98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c9a:	1ac0      	subs	r0, r0, r3
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ca2:	6a21      	ldr	r1, [r4, #32]
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	47b0      	blx	r6
 8006ca8:	1c43      	adds	r3, r0, #1
 8006caa:	89a3      	ldrh	r3, [r4, #12]
 8006cac:	d106      	bne.n	8006cbc <__sflush_r+0x68>
 8006cae:	6829      	ldr	r1, [r5, #0]
 8006cb0:	291d      	cmp	r1, #29
 8006cb2:	d82b      	bhi.n	8006d0c <__sflush_r+0xb8>
 8006cb4:	4a29      	ldr	r2, [pc, #164]	; (8006d5c <__sflush_r+0x108>)
 8006cb6:	410a      	asrs	r2, r1
 8006cb8:	07d6      	lsls	r6, r2, #31
 8006cba:	d427      	bmi.n	8006d0c <__sflush_r+0xb8>
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	6062      	str	r2, [r4, #4]
 8006cc0:	04d9      	lsls	r1, r3, #19
 8006cc2:	6922      	ldr	r2, [r4, #16]
 8006cc4:	6022      	str	r2, [r4, #0]
 8006cc6:	d504      	bpl.n	8006cd2 <__sflush_r+0x7e>
 8006cc8:	1c42      	adds	r2, r0, #1
 8006cca:	d101      	bne.n	8006cd0 <__sflush_r+0x7c>
 8006ccc:	682b      	ldr	r3, [r5, #0]
 8006cce:	b903      	cbnz	r3, 8006cd2 <__sflush_r+0x7e>
 8006cd0:	6560      	str	r0, [r4, #84]	; 0x54
 8006cd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cd4:	602f      	str	r7, [r5, #0]
 8006cd6:	2900      	cmp	r1, #0
 8006cd8:	d0c9      	beq.n	8006c6e <__sflush_r+0x1a>
 8006cda:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cde:	4299      	cmp	r1, r3
 8006ce0:	d002      	beq.n	8006ce8 <__sflush_r+0x94>
 8006ce2:	4628      	mov	r0, r5
 8006ce4:	f000 fffa 	bl	8007cdc <_free_r>
 8006ce8:	2000      	movs	r0, #0
 8006cea:	6360      	str	r0, [r4, #52]	; 0x34
 8006cec:	e7c0      	b.n	8006c70 <__sflush_r+0x1c>
 8006cee:	2301      	movs	r3, #1
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	47b0      	blx	r6
 8006cf4:	1c41      	adds	r1, r0, #1
 8006cf6:	d1c8      	bne.n	8006c8a <__sflush_r+0x36>
 8006cf8:	682b      	ldr	r3, [r5, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d0c5      	beq.n	8006c8a <__sflush_r+0x36>
 8006cfe:	2b1d      	cmp	r3, #29
 8006d00:	d001      	beq.n	8006d06 <__sflush_r+0xb2>
 8006d02:	2b16      	cmp	r3, #22
 8006d04:	d101      	bne.n	8006d0a <__sflush_r+0xb6>
 8006d06:	602f      	str	r7, [r5, #0]
 8006d08:	e7b1      	b.n	8006c6e <__sflush_r+0x1a>
 8006d0a:	89a3      	ldrh	r3, [r4, #12]
 8006d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d10:	81a3      	strh	r3, [r4, #12]
 8006d12:	e7ad      	b.n	8006c70 <__sflush_r+0x1c>
 8006d14:	690f      	ldr	r7, [r1, #16]
 8006d16:	2f00      	cmp	r7, #0
 8006d18:	d0a9      	beq.n	8006c6e <__sflush_r+0x1a>
 8006d1a:	0793      	lsls	r3, r2, #30
 8006d1c:	680e      	ldr	r6, [r1, #0]
 8006d1e:	bf08      	it	eq
 8006d20:	694b      	ldreq	r3, [r1, #20]
 8006d22:	600f      	str	r7, [r1, #0]
 8006d24:	bf18      	it	ne
 8006d26:	2300      	movne	r3, #0
 8006d28:	eba6 0807 	sub.w	r8, r6, r7
 8006d2c:	608b      	str	r3, [r1, #8]
 8006d2e:	f1b8 0f00 	cmp.w	r8, #0
 8006d32:	dd9c      	ble.n	8006c6e <__sflush_r+0x1a>
 8006d34:	6a21      	ldr	r1, [r4, #32]
 8006d36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d38:	4643      	mov	r3, r8
 8006d3a:	463a      	mov	r2, r7
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	47b0      	blx	r6
 8006d40:	2800      	cmp	r0, #0
 8006d42:	dc06      	bgt.n	8006d52 <__sflush_r+0xfe>
 8006d44:	89a3      	ldrh	r3, [r4, #12]
 8006d46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d4a:	81a3      	strh	r3, [r4, #12]
 8006d4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d50:	e78e      	b.n	8006c70 <__sflush_r+0x1c>
 8006d52:	4407      	add	r7, r0
 8006d54:	eba8 0800 	sub.w	r8, r8, r0
 8006d58:	e7e9      	b.n	8006d2e <__sflush_r+0xda>
 8006d5a:	bf00      	nop
 8006d5c:	dfbffffe 	.word	0xdfbffffe

08006d60 <_fflush_r>:
 8006d60:	b538      	push	{r3, r4, r5, lr}
 8006d62:	690b      	ldr	r3, [r1, #16]
 8006d64:	4605      	mov	r5, r0
 8006d66:	460c      	mov	r4, r1
 8006d68:	b913      	cbnz	r3, 8006d70 <_fflush_r+0x10>
 8006d6a:	2500      	movs	r5, #0
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	bd38      	pop	{r3, r4, r5, pc}
 8006d70:	b118      	cbz	r0, 8006d7a <_fflush_r+0x1a>
 8006d72:	6a03      	ldr	r3, [r0, #32]
 8006d74:	b90b      	cbnz	r3, 8006d7a <_fflush_r+0x1a>
 8006d76:	f7fd f901 	bl	8003f7c <__sinit>
 8006d7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d0f3      	beq.n	8006d6a <_fflush_r+0xa>
 8006d82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006d84:	07d0      	lsls	r0, r2, #31
 8006d86:	d404      	bmi.n	8006d92 <_fflush_r+0x32>
 8006d88:	0599      	lsls	r1, r3, #22
 8006d8a:	d402      	bmi.n	8006d92 <_fflush_r+0x32>
 8006d8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d8e:	f7fe f81e 	bl	8004dce <__retarget_lock_acquire_recursive>
 8006d92:	4628      	mov	r0, r5
 8006d94:	4621      	mov	r1, r4
 8006d96:	f7ff ff5d 	bl	8006c54 <__sflush_r>
 8006d9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d9c:	07da      	lsls	r2, r3, #31
 8006d9e:	4605      	mov	r5, r0
 8006da0:	d4e4      	bmi.n	8006d6c <_fflush_r+0xc>
 8006da2:	89a3      	ldrh	r3, [r4, #12]
 8006da4:	059b      	lsls	r3, r3, #22
 8006da6:	d4e1      	bmi.n	8006d6c <_fflush_r+0xc>
 8006da8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006daa:	f7fe f811 	bl	8004dd0 <__retarget_lock_release_recursive>
 8006dae:	e7dd      	b.n	8006d6c <_fflush_r+0xc>

08006db0 <__malloc_lock>:
 8006db0:	4801      	ldr	r0, [pc, #4]	; (8006db8 <__malloc_lock+0x8>)
 8006db2:	f7fe b80c 	b.w	8004dce <__retarget_lock_acquire_recursive>
 8006db6:	bf00      	nop
 8006db8:	2000037c 	.word	0x2000037c

08006dbc <__malloc_unlock>:
 8006dbc:	4801      	ldr	r0, [pc, #4]	; (8006dc4 <__malloc_unlock+0x8>)
 8006dbe:	f7fe b807 	b.w	8004dd0 <__retarget_lock_release_recursive>
 8006dc2:	bf00      	nop
 8006dc4:	2000037c 	.word	0x2000037c

08006dc8 <_Balloc>:
 8006dc8:	b570      	push	{r4, r5, r6, lr}
 8006dca:	69c6      	ldr	r6, [r0, #28]
 8006dcc:	4604      	mov	r4, r0
 8006dce:	460d      	mov	r5, r1
 8006dd0:	b976      	cbnz	r6, 8006df0 <_Balloc+0x28>
 8006dd2:	2010      	movs	r0, #16
 8006dd4:	f7ff fb46 	bl	8006464 <malloc>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	61e0      	str	r0, [r4, #28]
 8006ddc:	b920      	cbnz	r0, 8006de8 <_Balloc+0x20>
 8006dde:	4b18      	ldr	r3, [pc, #96]	; (8006e40 <_Balloc+0x78>)
 8006de0:	4818      	ldr	r0, [pc, #96]	; (8006e44 <_Balloc+0x7c>)
 8006de2:	216b      	movs	r1, #107	; 0x6b
 8006de4:	f000 ff46 	bl	8007c74 <__assert_func>
 8006de8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006dec:	6006      	str	r6, [r0, #0]
 8006dee:	60c6      	str	r6, [r0, #12]
 8006df0:	69e6      	ldr	r6, [r4, #28]
 8006df2:	68f3      	ldr	r3, [r6, #12]
 8006df4:	b183      	cbz	r3, 8006e18 <_Balloc+0x50>
 8006df6:	69e3      	ldr	r3, [r4, #28]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006dfe:	b9b8      	cbnz	r0, 8006e30 <_Balloc+0x68>
 8006e00:	2101      	movs	r1, #1
 8006e02:	fa01 f605 	lsl.w	r6, r1, r5
 8006e06:	1d72      	adds	r2, r6, #5
 8006e08:	0092      	lsls	r2, r2, #2
 8006e0a:	4620      	mov	r0, r4
 8006e0c:	f000 ff50 	bl	8007cb0 <_calloc_r>
 8006e10:	b160      	cbz	r0, 8006e2c <_Balloc+0x64>
 8006e12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006e16:	e00e      	b.n	8006e36 <_Balloc+0x6e>
 8006e18:	2221      	movs	r2, #33	; 0x21
 8006e1a:	2104      	movs	r1, #4
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	f000 ff47 	bl	8007cb0 <_calloc_r>
 8006e22:	69e3      	ldr	r3, [r4, #28]
 8006e24:	60f0      	str	r0, [r6, #12]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d1e4      	bne.n	8006df6 <_Balloc+0x2e>
 8006e2c:	2000      	movs	r0, #0
 8006e2e:	bd70      	pop	{r4, r5, r6, pc}
 8006e30:	6802      	ldr	r2, [r0, #0]
 8006e32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e36:	2300      	movs	r3, #0
 8006e38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e3c:	e7f7      	b.n	8006e2e <_Balloc+0x66>
 8006e3e:	bf00      	nop
 8006e40:	080084de 	.word	0x080084de
 8006e44:	080085ea 	.word	0x080085ea

08006e48 <_Bfree>:
 8006e48:	b570      	push	{r4, r5, r6, lr}
 8006e4a:	69c6      	ldr	r6, [r0, #28]
 8006e4c:	4605      	mov	r5, r0
 8006e4e:	460c      	mov	r4, r1
 8006e50:	b976      	cbnz	r6, 8006e70 <_Bfree+0x28>
 8006e52:	2010      	movs	r0, #16
 8006e54:	f7ff fb06 	bl	8006464 <malloc>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	61e8      	str	r0, [r5, #28]
 8006e5c:	b920      	cbnz	r0, 8006e68 <_Bfree+0x20>
 8006e5e:	4b09      	ldr	r3, [pc, #36]	; (8006e84 <_Bfree+0x3c>)
 8006e60:	4809      	ldr	r0, [pc, #36]	; (8006e88 <_Bfree+0x40>)
 8006e62:	218f      	movs	r1, #143	; 0x8f
 8006e64:	f000 ff06 	bl	8007c74 <__assert_func>
 8006e68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e6c:	6006      	str	r6, [r0, #0]
 8006e6e:	60c6      	str	r6, [r0, #12]
 8006e70:	b13c      	cbz	r4, 8006e82 <_Bfree+0x3a>
 8006e72:	69eb      	ldr	r3, [r5, #28]
 8006e74:	6862      	ldr	r2, [r4, #4]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e7c:	6021      	str	r1, [r4, #0]
 8006e7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e82:	bd70      	pop	{r4, r5, r6, pc}
 8006e84:	080084de 	.word	0x080084de
 8006e88:	080085ea 	.word	0x080085ea

08006e8c <__multadd>:
 8006e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e90:	690d      	ldr	r5, [r1, #16]
 8006e92:	4607      	mov	r7, r0
 8006e94:	460c      	mov	r4, r1
 8006e96:	461e      	mov	r6, r3
 8006e98:	f101 0c14 	add.w	ip, r1, #20
 8006e9c:	2000      	movs	r0, #0
 8006e9e:	f8dc 3000 	ldr.w	r3, [ip]
 8006ea2:	b299      	uxth	r1, r3
 8006ea4:	fb02 6101 	mla	r1, r2, r1, r6
 8006ea8:	0c1e      	lsrs	r6, r3, #16
 8006eaa:	0c0b      	lsrs	r3, r1, #16
 8006eac:	fb02 3306 	mla	r3, r2, r6, r3
 8006eb0:	b289      	uxth	r1, r1
 8006eb2:	3001      	adds	r0, #1
 8006eb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006eb8:	4285      	cmp	r5, r0
 8006eba:	f84c 1b04 	str.w	r1, [ip], #4
 8006ebe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006ec2:	dcec      	bgt.n	8006e9e <__multadd+0x12>
 8006ec4:	b30e      	cbz	r6, 8006f0a <__multadd+0x7e>
 8006ec6:	68a3      	ldr	r3, [r4, #8]
 8006ec8:	42ab      	cmp	r3, r5
 8006eca:	dc19      	bgt.n	8006f00 <__multadd+0x74>
 8006ecc:	6861      	ldr	r1, [r4, #4]
 8006ece:	4638      	mov	r0, r7
 8006ed0:	3101      	adds	r1, #1
 8006ed2:	f7ff ff79 	bl	8006dc8 <_Balloc>
 8006ed6:	4680      	mov	r8, r0
 8006ed8:	b928      	cbnz	r0, 8006ee6 <__multadd+0x5a>
 8006eda:	4602      	mov	r2, r0
 8006edc:	4b0c      	ldr	r3, [pc, #48]	; (8006f10 <__multadd+0x84>)
 8006ede:	480d      	ldr	r0, [pc, #52]	; (8006f14 <__multadd+0x88>)
 8006ee0:	21ba      	movs	r1, #186	; 0xba
 8006ee2:	f000 fec7 	bl	8007c74 <__assert_func>
 8006ee6:	6922      	ldr	r2, [r4, #16]
 8006ee8:	3202      	adds	r2, #2
 8006eea:	f104 010c 	add.w	r1, r4, #12
 8006eee:	0092      	lsls	r2, r2, #2
 8006ef0:	300c      	adds	r0, #12
 8006ef2:	f7fd ff6e 	bl	8004dd2 <memcpy>
 8006ef6:	4621      	mov	r1, r4
 8006ef8:	4638      	mov	r0, r7
 8006efa:	f7ff ffa5 	bl	8006e48 <_Bfree>
 8006efe:	4644      	mov	r4, r8
 8006f00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006f04:	3501      	adds	r5, #1
 8006f06:	615e      	str	r6, [r3, #20]
 8006f08:	6125      	str	r5, [r4, #16]
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f10:	0800854d 	.word	0x0800854d
 8006f14:	080085ea 	.word	0x080085ea

08006f18 <__s2b>:
 8006f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f1c:	460c      	mov	r4, r1
 8006f1e:	4615      	mov	r5, r2
 8006f20:	461f      	mov	r7, r3
 8006f22:	2209      	movs	r2, #9
 8006f24:	3308      	adds	r3, #8
 8006f26:	4606      	mov	r6, r0
 8006f28:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f2c:	2100      	movs	r1, #0
 8006f2e:	2201      	movs	r2, #1
 8006f30:	429a      	cmp	r2, r3
 8006f32:	db09      	blt.n	8006f48 <__s2b+0x30>
 8006f34:	4630      	mov	r0, r6
 8006f36:	f7ff ff47 	bl	8006dc8 <_Balloc>
 8006f3a:	b940      	cbnz	r0, 8006f4e <__s2b+0x36>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	4b19      	ldr	r3, [pc, #100]	; (8006fa4 <__s2b+0x8c>)
 8006f40:	4819      	ldr	r0, [pc, #100]	; (8006fa8 <__s2b+0x90>)
 8006f42:	21d3      	movs	r1, #211	; 0xd3
 8006f44:	f000 fe96 	bl	8007c74 <__assert_func>
 8006f48:	0052      	lsls	r2, r2, #1
 8006f4a:	3101      	adds	r1, #1
 8006f4c:	e7f0      	b.n	8006f30 <__s2b+0x18>
 8006f4e:	9b08      	ldr	r3, [sp, #32]
 8006f50:	6143      	str	r3, [r0, #20]
 8006f52:	2d09      	cmp	r5, #9
 8006f54:	f04f 0301 	mov.w	r3, #1
 8006f58:	6103      	str	r3, [r0, #16]
 8006f5a:	dd16      	ble.n	8006f8a <__s2b+0x72>
 8006f5c:	f104 0909 	add.w	r9, r4, #9
 8006f60:	46c8      	mov	r8, r9
 8006f62:	442c      	add	r4, r5
 8006f64:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006f68:	4601      	mov	r1, r0
 8006f6a:	3b30      	subs	r3, #48	; 0x30
 8006f6c:	220a      	movs	r2, #10
 8006f6e:	4630      	mov	r0, r6
 8006f70:	f7ff ff8c 	bl	8006e8c <__multadd>
 8006f74:	45a0      	cmp	r8, r4
 8006f76:	d1f5      	bne.n	8006f64 <__s2b+0x4c>
 8006f78:	f1a5 0408 	sub.w	r4, r5, #8
 8006f7c:	444c      	add	r4, r9
 8006f7e:	1b2d      	subs	r5, r5, r4
 8006f80:	1963      	adds	r3, r4, r5
 8006f82:	42bb      	cmp	r3, r7
 8006f84:	db04      	blt.n	8006f90 <__s2b+0x78>
 8006f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f8a:	340a      	adds	r4, #10
 8006f8c:	2509      	movs	r5, #9
 8006f8e:	e7f6      	b.n	8006f7e <__s2b+0x66>
 8006f90:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006f94:	4601      	mov	r1, r0
 8006f96:	3b30      	subs	r3, #48	; 0x30
 8006f98:	220a      	movs	r2, #10
 8006f9a:	4630      	mov	r0, r6
 8006f9c:	f7ff ff76 	bl	8006e8c <__multadd>
 8006fa0:	e7ee      	b.n	8006f80 <__s2b+0x68>
 8006fa2:	bf00      	nop
 8006fa4:	0800854d 	.word	0x0800854d
 8006fa8:	080085ea 	.word	0x080085ea

08006fac <__hi0bits>:
 8006fac:	0c03      	lsrs	r3, r0, #16
 8006fae:	041b      	lsls	r3, r3, #16
 8006fb0:	b9d3      	cbnz	r3, 8006fe8 <__hi0bits+0x3c>
 8006fb2:	0400      	lsls	r0, r0, #16
 8006fb4:	2310      	movs	r3, #16
 8006fb6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006fba:	bf04      	itt	eq
 8006fbc:	0200      	lsleq	r0, r0, #8
 8006fbe:	3308      	addeq	r3, #8
 8006fc0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006fc4:	bf04      	itt	eq
 8006fc6:	0100      	lsleq	r0, r0, #4
 8006fc8:	3304      	addeq	r3, #4
 8006fca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006fce:	bf04      	itt	eq
 8006fd0:	0080      	lsleq	r0, r0, #2
 8006fd2:	3302      	addeq	r3, #2
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	db05      	blt.n	8006fe4 <__hi0bits+0x38>
 8006fd8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006fdc:	f103 0301 	add.w	r3, r3, #1
 8006fe0:	bf08      	it	eq
 8006fe2:	2320      	moveq	r3, #32
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	4770      	bx	lr
 8006fe8:	2300      	movs	r3, #0
 8006fea:	e7e4      	b.n	8006fb6 <__hi0bits+0xa>

08006fec <__lo0bits>:
 8006fec:	6803      	ldr	r3, [r0, #0]
 8006fee:	f013 0207 	ands.w	r2, r3, #7
 8006ff2:	d00c      	beq.n	800700e <__lo0bits+0x22>
 8006ff4:	07d9      	lsls	r1, r3, #31
 8006ff6:	d422      	bmi.n	800703e <__lo0bits+0x52>
 8006ff8:	079a      	lsls	r2, r3, #30
 8006ffa:	bf49      	itett	mi
 8006ffc:	085b      	lsrmi	r3, r3, #1
 8006ffe:	089b      	lsrpl	r3, r3, #2
 8007000:	6003      	strmi	r3, [r0, #0]
 8007002:	2201      	movmi	r2, #1
 8007004:	bf5c      	itt	pl
 8007006:	6003      	strpl	r3, [r0, #0]
 8007008:	2202      	movpl	r2, #2
 800700a:	4610      	mov	r0, r2
 800700c:	4770      	bx	lr
 800700e:	b299      	uxth	r1, r3
 8007010:	b909      	cbnz	r1, 8007016 <__lo0bits+0x2a>
 8007012:	0c1b      	lsrs	r3, r3, #16
 8007014:	2210      	movs	r2, #16
 8007016:	b2d9      	uxtb	r1, r3
 8007018:	b909      	cbnz	r1, 800701e <__lo0bits+0x32>
 800701a:	3208      	adds	r2, #8
 800701c:	0a1b      	lsrs	r3, r3, #8
 800701e:	0719      	lsls	r1, r3, #28
 8007020:	bf04      	itt	eq
 8007022:	091b      	lsreq	r3, r3, #4
 8007024:	3204      	addeq	r2, #4
 8007026:	0799      	lsls	r1, r3, #30
 8007028:	bf04      	itt	eq
 800702a:	089b      	lsreq	r3, r3, #2
 800702c:	3202      	addeq	r2, #2
 800702e:	07d9      	lsls	r1, r3, #31
 8007030:	d403      	bmi.n	800703a <__lo0bits+0x4e>
 8007032:	085b      	lsrs	r3, r3, #1
 8007034:	f102 0201 	add.w	r2, r2, #1
 8007038:	d003      	beq.n	8007042 <__lo0bits+0x56>
 800703a:	6003      	str	r3, [r0, #0]
 800703c:	e7e5      	b.n	800700a <__lo0bits+0x1e>
 800703e:	2200      	movs	r2, #0
 8007040:	e7e3      	b.n	800700a <__lo0bits+0x1e>
 8007042:	2220      	movs	r2, #32
 8007044:	e7e1      	b.n	800700a <__lo0bits+0x1e>
	...

08007048 <__i2b>:
 8007048:	b510      	push	{r4, lr}
 800704a:	460c      	mov	r4, r1
 800704c:	2101      	movs	r1, #1
 800704e:	f7ff febb 	bl	8006dc8 <_Balloc>
 8007052:	4602      	mov	r2, r0
 8007054:	b928      	cbnz	r0, 8007062 <__i2b+0x1a>
 8007056:	4b05      	ldr	r3, [pc, #20]	; (800706c <__i2b+0x24>)
 8007058:	4805      	ldr	r0, [pc, #20]	; (8007070 <__i2b+0x28>)
 800705a:	f240 1145 	movw	r1, #325	; 0x145
 800705e:	f000 fe09 	bl	8007c74 <__assert_func>
 8007062:	2301      	movs	r3, #1
 8007064:	6144      	str	r4, [r0, #20]
 8007066:	6103      	str	r3, [r0, #16]
 8007068:	bd10      	pop	{r4, pc}
 800706a:	bf00      	nop
 800706c:	0800854d 	.word	0x0800854d
 8007070:	080085ea 	.word	0x080085ea

08007074 <__multiply>:
 8007074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007078:	4691      	mov	r9, r2
 800707a:	690a      	ldr	r2, [r1, #16]
 800707c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007080:	429a      	cmp	r2, r3
 8007082:	bfb8      	it	lt
 8007084:	460b      	movlt	r3, r1
 8007086:	460c      	mov	r4, r1
 8007088:	bfbc      	itt	lt
 800708a:	464c      	movlt	r4, r9
 800708c:	4699      	movlt	r9, r3
 800708e:	6927      	ldr	r7, [r4, #16]
 8007090:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007094:	68a3      	ldr	r3, [r4, #8]
 8007096:	6861      	ldr	r1, [r4, #4]
 8007098:	eb07 060a 	add.w	r6, r7, sl
 800709c:	42b3      	cmp	r3, r6
 800709e:	b085      	sub	sp, #20
 80070a0:	bfb8      	it	lt
 80070a2:	3101      	addlt	r1, #1
 80070a4:	f7ff fe90 	bl	8006dc8 <_Balloc>
 80070a8:	b930      	cbnz	r0, 80070b8 <__multiply+0x44>
 80070aa:	4602      	mov	r2, r0
 80070ac:	4b44      	ldr	r3, [pc, #272]	; (80071c0 <__multiply+0x14c>)
 80070ae:	4845      	ldr	r0, [pc, #276]	; (80071c4 <__multiply+0x150>)
 80070b0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80070b4:	f000 fdde 	bl	8007c74 <__assert_func>
 80070b8:	f100 0514 	add.w	r5, r0, #20
 80070bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80070c0:	462b      	mov	r3, r5
 80070c2:	2200      	movs	r2, #0
 80070c4:	4543      	cmp	r3, r8
 80070c6:	d321      	bcc.n	800710c <__multiply+0x98>
 80070c8:	f104 0314 	add.w	r3, r4, #20
 80070cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80070d0:	f109 0314 	add.w	r3, r9, #20
 80070d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80070d8:	9202      	str	r2, [sp, #8]
 80070da:	1b3a      	subs	r2, r7, r4
 80070dc:	3a15      	subs	r2, #21
 80070de:	f022 0203 	bic.w	r2, r2, #3
 80070e2:	3204      	adds	r2, #4
 80070e4:	f104 0115 	add.w	r1, r4, #21
 80070e8:	428f      	cmp	r7, r1
 80070ea:	bf38      	it	cc
 80070ec:	2204      	movcc	r2, #4
 80070ee:	9201      	str	r2, [sp, #4]
 80070f0:	9a02      	ldr	r2, [sp, #8]
 80070f2:	9303      	str	r3, [sp, #12]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d80c      	bhi.n	8007112 <__multiply+0x9e>
 80070f8:	2e00      	cmp	r6, #0
 80070fa:	dd03      	ble.n	8007104 <__multiply+0x90>
 80070fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007100:	2b00      	cmp	r3, #0
 8007102:	d05b      	beq.n	80071bc <__multiply+0x148>
 8007104:	6106      	str	r6, [r0, #16]
 8007106:	b005      	add	sp, #20
 8007108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800710c:	f843 2b04 	str.w	r2, [r3], #4
 8007110:	e7d8      	b.n	80070c4 <__multiply+0x50>
 8007112:	f8b3 a000 	ldrh.w	sl, [r3]
 8007116:	f1ba 0f00 	cmp.w	sl, #0
 800711a:	d024      	beq.n	8007166 <__multiply+0xf2>
 800711c:	f104 0e14 	add.w	lr, r4, #20
 8007120:	46a9      	mov	r9, r5
 8007122:	f04f 0c00 	mov.w	ip, #0
 8007126:	f85e 2b04 	ldr.w	r2, [lr], #4
 800712a:	f8d9 1000 	ldr.w	r1, [r9]
 800712e:	fa1f fb82 	uxth.w	fp, r2
 8007132:	b289      	uxth	r1, r1
 8007134:	fb0a 110b 	mla	r1, sl, fp, r1
 8007138:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800713c:	f8d9 2000 	ldr.w	r2, [r9]
 8007140:	4461      	add	r1, ip
 8007142:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007146:	fb0a c20b 	mla	r2, sl, fp, ip
 800714a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800714e:	b289      	uxth	r1, r1
 8007150:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007154:	4577      	cmp	r7, lr
 8007156:	f849 1b04 	str.w	r1, [r9], #4
 800715a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800715e:	d8e2      	bhi.n	8007126 <__multiply+0xb2>
 8007160:	9a01      	ldr	r2, [sp, #4]
 8007162:	f845 c002 	str.w	ip, [r5, r2]
 8007166:	9a03      	ldr	r2, [sp, #12]
 8007168:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800716c:	3304      	adds	r3, #4
 800716e:	f1b9 0f00 	cmp.w	r9, #0
 8007172:	d021      	beq.n	80071b8 <__multiply+0x144>
 8007174:	6829      	ldr	r1, [r5, #0]
 8007176:	f104 0c14 	add.w	ip, r4, #20
 800717a:	46ae      	mov	lr, r5
 800717c:	f04f 0a00 	mov.w	sl, #0
 8007180:	f8bc b000 	ldrh.w	fp, [ip]
 8007184:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007188:	fb09 220b 	mla	r2, r9, fp, r2
 800718c:	4452      	add	r2, sl
 800718e:	b289      	uxth	r1, r1
 8007190:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007194:	f84e 1b04 	str.w	r1, [lr], #4
 8007198:	f85c 1b04 	ldr.w	r1, [ip], #4
 800719c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80071a0:	f8be 1000 	ldrh.w	r1, [lr]
 80071a4:	fb09 110a 	mla	r1, r9, sl, r1
 80071a8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80071ac:	4567      	cmp	r7, ip
 80071ae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80071b2:	d8e5      	bhi.n	8007180 <__multiply+0x10c>
 80071b4:	9a01      	ldr	r2, [sp, #4]
 80071b6:	50a9      	str	r1, [r5, r2]
 80071b8:	3504      	adds	r5, #4
 80071ba:	e799      	b.n	80070f0 <__multiply+0x7c>
 80071bc:	3e01      	subs	r6, #1
 80071be:	e79b      	b.n	80070f8 <__multiply+0x84>
 80071c0:	0800854d 	.word	0x0800854d
 80071c4:	080085ea 	.word	0x080085ea

080071c8 <__pow5mult>:
 80071c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071cc:	4615      	mov	r5, r2
 80071ce:	f012 0203 	ands.w	r2, r2, #3
 80071d2:	4606      	mov	r6, r0
 80071d4:	460f      	mov	r7, r1
 80071d6:	d007      	beq.n	80071e8 <__pow5mult+0x20>
 80071d8:	4c25      	ldr	r4, [pc, #148]	; (8007270 <__pow5mult+0xa8>)
 80071da:	3a01      	subs	r2, #1
 80071dc:	2300      	movs	r3, #0
 80071de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80071e2:	f7ff fe53 	bl	8006e8c <__multadd>
 80071e6:	4607      	mov	r7, r0
 80071e8:	10ad      	asrs	r5, r5, #2
 80071ea:	d03d      	beq.n	8007268 <__pow5mult+0xa0>
 80071ec:	69f4      	ldr	r4, [r6, #28]
 80071ee:	b97c      	cbnz	r4, 8007210 <__pow5mult+0x48>
 80071f0:	2010      	movs	r0, #16
 80071f2:	f7ff f937 	bl	8006464 <malloc>
 80071f6:	4602      	mov	r2, r0
 80071f8:	61f0      	str	r0, [r6, #28]
 80071fa:	b928      	cbnz	r0, 8007208 <__pow5mult+0x40>
 80071fc:	4b1d      	ldr	r3, [pc, #116]	; (8007274 <__pow5mult+0xac>)
 80071fe:	481e      	ldr	r0, [pc, #120]	; (8007278 <__pow5mult+0xb0>)
 8007200:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007204:	f000 fd36 	bl	8007c74 <__assert_func>
 8007208:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800720c:	6004      	str	r4, [r0, #0]
 800720e:	60c4      	str	r4, [r0, #12]
 8007210:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007214:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007218:	b94c      	cbnz	r4, 800722e <__pow5mult+0x66>
 800721a:	f240 2171 	movw	r1, #625	; 0x271
 800721e:	4630      	mov	r0, r6
 8007220:	f7ff ff12 	bl	8007048 <__i2b>
 8007224:	2300      	movs	r3, #0
 8007226:	f8c8 0008 	str.w	r0, [r8, #8]
 800722a:	4604      	mov	r4, r0
 800722c:	6003      	str	r3, [r0, #0]
 800722e:	f04f 0900 	mov.w	r9, #0
 8007232:	07eb      	lsls	r3, r5, #31
 8007234:	d50a      	bpl.n	800724c <__pow5mult+0x84>
 8007236:	4639      	mov	r1, r7
 8007238:	4622      	mov	r2, r4
 800723a:	4630      	mov	r0, r6
 800723c:	f7ff ff1a 	bl	8007074 <__multiply>
 8007240:	4639      	mov	r1, r7
 8007242:	4680      	mov	r8, r0
 8007244:	4630      	mov	r0, r6
 8007246:	f7ff fdff 	bl	8006e48 <_Bfree>
 800724a:	4647      	mov	r7, r8
 800724c:	106d      	asrs	r5, r5, #1
 800724e:	d00b      	beq.n	8007268 <__pow5mult+0xa0>
 8007250:	6820      	ldr	r0, [r4, #0]
 8007252:	b938      	cbnz	r0, 8007264 <__pow5mult+0x9c>
 8007254:	4622      	mov	r2, r4
 8007256:	4621      	mov	r1, r4
 8007258:	4630      	mov	r0, r6
 800725a:	f7ff ff0b 	bl	8007074 <__multiply>
 800725e:	6020      	str	r0, [r4, #0]
 8007260:	f8c0 9000 	str.w	r9, [r0]
 8007264:	4604      	mov	r4, r0
 8007266:	e7e4      	b.n	8007232 <__pow5mult+0x6a>
 8007268:	4638      	mov	r0, r7
 800726a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800726e:	bf00      	nop
 8007270:	08008738 	.word	0x08008738
 8007274:	080084de 	.word	0x080084de
 8007278:	080085ea 	.word	0x080085ea

0800727c <__lshift>:
 800727c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007280:	460c      	mov	r4, r1
 8007282:	6849      	ldr	r1, [r1, #4]
 8007284:	6923      	ldr	r3, [r4, #16]
 8007286:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800728a:	68a3      	ldr	r3, [r4, #8]
 800728c:	4607      	mov	r7, r0
 800728e:	4691      	mov	r9, r2
 8007290:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007294:	f108 0601 	add.w	r6, r8, #1
 8007298:	42b3      	cmp	r3, r6
 800729a:	db0b      	blt.n	80072b4 <__lshift+0x38>
 800729c:	4638      	mov	r0, r7
 800729e:	f7ff fd93 	bl	8006dc8 <_Balloc>
 80072a2:	4605      	mov	r5, r0
 80072a4:	b948      	cbnz	r0, 80072ba <__lshift+0x3e>
 80072a6:	4602      	mov	r2, r0
 80072a8:	4b28      	ldr	r3, [pc, #160]	; (800734c <__lshift+0xd0>)
 80072aa:	4829      	ldr	r0, [pc, #164]	; (8007350 <__lshift+0xd4>)
 80072ac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80072b0:	f000 fce0 	bl	8007c74 <__assert_func>
 80072b4:	3101      	adds	r1, #1
 80072b6:	005b      	lsls	r3, r3, #1
 80072b8:	e7ee      	b.n	8007298 <__lshift+0x1c>
 80072ba:	2300      	movs	r3, #0
 80072bc:	f100 0114 	add.w	r1, r0, #20
 80072c0:	f100 0210 	add.w	r2, r0, #16
 80072c4:	4618      	mov	r0, r3
 80072c6:	4553      	cmp	r3, sl
 80072c8:	db33      	blt.n	8007332 <__lshift+0xb6>
 80072ca:	6920      	ldr	r0, [r4, #16]
 80072cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80072d0:	f104 0314 	add.w	r3, r4, #20
 80072d4:	f019 091f 	ands.w	r9, r9, #31
 80072d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80072dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80072e0:	d02b      	beq.n	800733a <__lshift+0xbe>
 80072e2:	f1c9 0e20 	rsb	lr, r9, #32
 80072e6:	468a      	mov	sl, r1
 80072e8:	2200      	movs	r2, #0
 80072ea:	6818      	ldr	r0, [r3, #0]
 80072ec:	fa00 f009 	lsl.w	r0, r0, r9
 80072f0:	4310      	orrs	r0, r2
 80072f2:	f84a 0b04 	str.w	r0, [sl], #4
 80072f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80072fa:	459c      	cmp	ip, r3
 80072fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8007300:	d8f3      	bhi.n	80072ea <__lshift+0x6e>
 8007302:	ebac 0304 	sub.w	r3, ip, r4
 8007306:	3b15      	subs	r3, #21
 8007308:	f023 0303 	bic.w	r3, r3, #3
 800730c:	3304      	adds	r3, #4
 800730e:	f104 0015 	add.w	r0, r4, #21
 8007312:	4584      	cmp	ip, r0
 8007314:	bf38      	it	cc
 8007316:	2304      	movcc	r3, #4
 8007318:	50ca      	str	r2, [r1, r3]
 800731a:	b10a      	cbz	r2, 8007320 <__lshift+0xa4>
 800731c:	f108 0602 	add.w	r6, r8, #2
 8007320:	3e01      	subs	r6, #1
 8007322:	4638      	mov	r0, r7
 8007324:	612e      	str	r6, [r5, #16]
 8007326:	4621      	mov	r1, r4
 8007328:	f7ff fd8e 	bl	8006e48 <_Bfree>
 800732c:	4628      	mov	r0, r5
 800732e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007332:	f842 0f04 	str.w	r0, [r2, #4]!
 8007336:	3301      	adds	r3, #1
 8007338:	e7c5      	b.n	80072c6 <__lshift+0x4a>
 800733a:	3904      	subs	r1, #4
 800733c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007340:	f841 2f04 	str.w	r2, [r1, #4]!
 8007344:	459c      	cmp	ip, r3
 8007346:	d8f9      	bhi.n	800733c <__lshift+0xc0>
 8007348:	e7ea      	b.n	8007320 <__lshift+0xa4>
 800734a:	bf00      	nop
 800734c:	0800854d 	.word	0x0800854d
 8007350:	080085ea 	.word	0x080085ea

08007354 <__mcmp>:
 8007354:	b530      	push	{r4, r5, lr}
 8007356:	6902      	ldr	r2, [r0, #16]
 8007358:	690c      	ldr	r4, [r1, #16]
 800735a:	1b12      	subs	r2, r2, r4
 800735c:	d10e      	bne.n	800737c <__mcmp+0x28>
 800735e:	f100 0314 	add.w	r3, r0, #20
 8007362:	3114      	adds	r1, #20
 8007364:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007368:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800736c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007370:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007374:	42a5      	cmp	r5, r4
 8007376:	d003      	beq.n	8007380 <__mcmp+0x2c>
 8007378:	d305      	bcc.n	8007386 <__mcmp+0x32>
 800737a:	2201      	movs	r2, #1
 800737c:	4610      	mov	r0, r2
 800737e:	bd30      	pop	{r4, r5, pc}
 8007380:	4283      	cmp	r3, r0
 8007382:	d3f3      	bcc.n	800736c <__mcmp+0x18>
 8007384:	e7fa      	b.n	800737c <__mcmp+0x28>
 8007386:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800738a:	e7f7      	b.n	800737c <__mcmp+0x28>

0800738c <__mdiff>:
 800738c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007390:	460c      	mov	r4, r1
 8007392:	4606      	mov	r6, r0
 8007394:	4611      	mov	r1, r2
 8007396:	4620      	mov	r0, r4
 8007398:	4690      	mov	r8, r2
 800739a:	f7ff ffdb 	bl	8007354 <__mcmp>
 800739e:	1e05      	subs	r5, r0, #0
 80073a0:	d110      	bne.n	80073c4 <__mdiff+0x38>
 80073a2:	4629      	mov	r1, r5
 80073a4:	4630      	mov	r0, r6
 80073a6:	f7ff fd0f 	bl	8006dc8 <_Balloc>
 80073aa:	b930      	cbnz	r0, 80073ba <__mdiff+0x2e>
 80073ac:	4b3a      	ldr	r3, [pc, #232]	; (8007498 <__mdiff+0x10c>)
 80073ae:	4602      	mov	r2, r0
 80073b0:	f240 2137 	movw	r1, #567	; 0x237
 80073b4:	4839      	ldr	r0, [pc, #228]	; (800749c <__mdiff+0x110>)
 80073b6:	f000 fc5d 	bl	8007c74 <__assert_func>
 80073ba:	2301      	movs	r3, #1
 80073bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80073c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073c4:	bfa4      	itt	ge
 80073c6:	4643      	movge	r3, r8
 80073c8:	46a0      	movge	r8, r4
 80073ca:	4630      	mov	r0, r6
 80073cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80073d0:	bfa6      	itte	ge
 80073d2:	461c      	movge	r4, r3
 80073d4:	2500      	movge	r5, #0
 80073d6:	2501      	movlt	r5, #1
 80073d8:	f7ff fcf6 	bl	8006dc8 <_Balloc>
 80073dc:	b920      	cbnz	r0, 80073e8 <__mdiff+0x5c>
 80073de:	4b2e      	ldr	r3, [pc, #184]	; (8007498 <__mdiff+0x10c>)
 80073e0:	4602      	mov	r2, r0
 80073e2:	f240 2145 	movw	r1, #581	; 0x245
 80073e6:	e7e5      	b.n	80073b4 <__mdiff+0x28>
 80073e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80073ec:	6926      	ldr	r6, [r4, #16]
 80073ee:	60c5      	str	r5, [r0, #12]
 80073f0:	f104 0914 	add.w	r9, r4, #20
 80073f4:	f108 0514 	add.w	r5, r8, #20
 80073f8:	f100 0e14 	add.w	lr, r0, #20
 80073fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007400:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007404:	f108 0210 	add.w	r2, r8, #16
 8007408:	46f2      	mov	sl, lr
 800740a:	2100      	movs	r1, #0
 800740c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007410:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007414:	fa11 f88b 	uxtah	r8, r1, fp
 8007418:	b299      	uxth	r1, r3
 800741a:	0c1b      	lsrs	r3, r3, #16
 800741c:	eba8 0801 	sub.w	r8, r8, r1
 8007420:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007424:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007428:	fa1f f888 	uxth.w	r8, r8
 800742c:	1419      	asrs	r1, r3, #16
 800742e:	454e      	cmp	r6, r9
 8007430:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007434:	f84a 3b04 	str.w	r3, [sl], #4
 8007438:	d8e8      	bhi.n	800740c <__mdiff+0x80>
 800743a:	1b33      	subs	r3, r6, r4
 800743c:	3b15      	subs	r3, #21
 800743e:	f023 0303 	bic.w	r3, r3, #3
 8007442:	3304      	adds	r3, #4
 8007444:	3415      	adds	r4, #21
 8007446:	42a6      	cmp	r6, r4
 8007448:	bf38      	it	cc
 800744a:	2304      	movcc	r3, #4
 800744c:	441d      	add	r5, r3
 800744e:	4473      	add	r3, lr
 8007450:	469e      	mov	lr, r3
 8007452:	462e      	mov	r6, r5
 8007454:	4566      	cmp	r6, ip
 8007456:	d30e      	bcc.n	8007476 <__mdiff+0xea>
 8007458:	f10c 0203 	add.w	r2, ip, #3
 800745c:	1b52      	subs	r2, r2, r5
 800745e:	f022 0203 	bic.w	r2, r2, #3
 8007462:	3d03      	subs	r5, #3
 8007464:	45ac      	cmp	ip, r5
 8007466:	bf38      	it	cc
 8007468:	2200      	movcc	r2, #0
 800746a:	4413      	add	r3, r2
 800746c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007470:	b17a      	cbz	r2, 8007492 <__mdiff+0x106>
 8007472:	6107      	str	r7, [r0, #16]
 8007474:	e7a4      	b.n	80073c0 <__mdiff+0x34>
 8007476:	f856 8b04 	ldr.w	r8, [r6], #4
 800747a:	fa11 f288 	uxtah	r2, r1, r8
 800747e:	1414      	asrs	r4, r2, #16
 8007480:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007484:	b292      	uxth	r2, r2
 8007486:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800748a:	f84e 2b04 	str.w	r2, [lr], #4
 800748e:	1421      	asrs	r1, r4, #16
 8007490:	e7e0      	b.n	8007454 <__mdiff+0xc8>
 8007492:	3f01      	subs	r7, #1
 8007494:	e7ea      	b.n	800746c <__mdiff+0xe0>
 8007496:	bf00      	nop
 8007498:	0800854d 	.word	0x0800854d
 800749c:	080085ea 	.word	0x080085ea

080074a0 <__ulp>:
 80074a0:	b082      	sub	sp, #8
 80074a2:	ed8d 0b00 	vstr	d0, [sp]
 80074a6:	9a01      	ldr	r2, [sp, #4]
 80074a8:	4b0f      	ldr	r3, [pc, #60]	; (80074e8 <__ulp+0x48>)
 80074aa:	4013      	ands	r3, r2
 80074ac:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	dc08      	bgt.n	80074c6 <__ulp+0x26>
 80074b4:	425b      	negs	r3, r3
 80074b6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80074ba:	ea4f 5223 	mov.w	r2, r3, asr #20
 80074be:	da04      	bge.n	80074ca <__ulp+0x2a>
 80074c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80074c4:	4113      	asrs	r3, r2
 80074c6:	2200      	movs	r2, #0
 80074c8:	e008      	b.n	80074dc <__ulp+0x3c>
 80074ca:	f1a2 0314 	sub.w	r3, r2, #20
 80074ce:	2b1e      	cmp	r3, #30
 80074d0:	bfda      	itte	le
 80074d2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80074d6:	40da      	lsrle	r2, r3
 80074d8:	2201      	movgt	r2, #1
 80074da:	2300      	movs	r3, #0
 80074dc:	4619      	mov	r1, r3
 80074de:	4610      	mov	r0, r2
 80074e0:	ec41 0b10 	vmov	d0, r0, r1
 80074e4:	b002      	add	sp, #8
 80074e6:	4770      	bx	lr
 80074e8:	7ff00000 	.word	0x7ff00000

080074ec <__b2d>:
 80074ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074f0:	6906      	ldr	r6, [r0, #16]
 80074f2:	f100 0814 	add.w	r8, r0, #20
 80074f6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80074fa:	1f37      	subs	r7, r6, #4
 80074fc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007500:	4610      	mov	r0, r2
 8007502:	f7ff fd53 	bl	8006fac <__hi0bits>
 8007506:	f1c0 0320 	rsb	r3, r0, #32
 800750a:	280a      	cmp	r0, #10
 800750c:	600b      	str	r3, [r1, #0]
 800750e:	491b      	ldr	r1, [pc, #108]	; (800757c <__b2d+0x90>)
 8007510:	dc15      	bgt.n	800753e <__b2d+0x52>
 8007512:	f1c0 0c0b 	rsb	ip, r0, #11
 8007516:	fa22 f30c 	lsr.w	r3, r2, ip
 800751a:	45b8      	cmp	r8, r7
 800751c:	ea43 0501 	orr.w	r5, r3, r1
 8007520:	bf34      	ite	cc
 8007522:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007526:	2300      	movcs	r3, #0
 8007528:	3015      	adds	r0, #21
 800752a:	fa02 f000 	lsl.w	r0, r2, r0
 800752e:	fa23 f30c 	lsr.w	r3, r3, ip
 8007532:	4303      	orrs	r3, r0
 8007534:	461c      	mov	r4, r3
 8007536:	ec45 4b10 	vmov	d0, r4, r5
 800753a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800753e:	45b8      	cmp	r8, r7
 8007540:	bf3a      	itte	cc
 8007542:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007546:	f1a6 0708 	subcc.w	r7, r6, #8
 800754a:	2300      	movcs	r3, #0
 800754c:	380b      	subs	r0, #11
 800754e:	d012      	beq.n	8007576 <__b2d+0x8a>
 8007550:	f1c0 0120 	rsb	r1, r0, #32
 8007554:	fa23 f401 	lsr.w	r4, r3, r1
 8007558:	4082      	lsls	r2, r0
 800755a:	4322      	orrs	r2, r4
 800755c:	4547      	cmp	r7, r8
 800755e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8007562:	bf8c      	ite	hi
 8007564:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007568:	2200      	movls	r2, #0
 800756a:	4083      	lsls	r3, r0
 800756c:	40ca      	lsrs	r2, r1
 800756e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007572:	4313      	orrs	r3, r2
 8007574:	e7de      	b.n	8007534 <__b2d+0x48>
 8007576:	ea42 0501 	orr.w	r5, r2, r1
 800757a:	e7db      	b.n	8007534 <__b2d+0x48>
 800757c:	3ff00000 	.word	0x3ff00000

08007580 <__d2b>:
 8007580:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007584:	460f      	mov	r7, r1
 8007586:	2101      	movs	r1, #1
 8007588:	ec59 8b10 	vmov	r8, r9, d0
 800758c:	4616      	mov	r6, r2
 800758e:	f7ff fc1b 	bl	8006dc8 <_Balloc>
 8007592:	4604      	mov	r4, r0
 8007594:	b930      	cbnz	r0, 80075a4 <__d2b+0x24>
 8007596:	4602      	mov	r2, r0
 8007598:	4b24      	ldr	r3, [pc, #144]	; (800762c <__d2b+0xac>)
 800759a:	4825      	ldr	r0, [pc, #148]	; (8007630 <__d2b+0xb0>)
 800759c:	f240 310f 	movw	r1, #783	; 0x30f
 80075a0:	f000 fb68 	bl	8007c74 <__assert_func>
 80075a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80075a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075ac:	bb2d      	cbnz	r5, 80075fa <__d2b+0x7a>
 80075ae:	9301      	str	r3, [sp, #4]
 80075b0:	f1b8 0300 	subs.w	r3, r8, #0
 80075b4:	d026      	beq.n	8007604 <__d2b+0x84>
 80075b6:	4668      	mov	r0, sp
 80075b8:	9300      	str	r3, [sp, #0]
 80075ba:	f7ff fd17 	bl	8006fec <__lo0bits>
 80075be:	e9dd 1200 	ldrd	r1, r2, [sp]
 80075c2:	b1e8      	cbz	r0, 8007600 <__d2b+0x80>
 80075c4:	f1c0 0320 	rsb	r3, r0, #32
 80075c8:	fa02 f303 	lsl.w	r3, r2, r3
 80075cc:	430b      	orrs	r3, r1
 80075ce:	40c2      	lsrs	r2, r0
 80075d0:	6163      	str	r3, [r4, #20]
 80075d2:	9201      	str	r2, [sp, #4]
 80075d4:	9b01      	ldr	r3, [sp, #4]
 80075d6:	61a3      	str	r3, [r4, #24]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	bf14      	ite	ne
 80075dc:	2202      	movne	r2, #2
 80075de:	2201      	moveq	r2, #1
 80075e0:	6122      	str	r2, [r4, #16]
 80075e2:	b1bd      	cbz	r5, 8007614 <__d2b+0x94>
 80075e4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80075e8:	4405      	add	r5, r0
 80075ea:	603d      	str	r5, [r7, #0]
 80075ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80075f0:	6030      	str	r0, [r6, #0]
 80075f2:	4620      	mov	r0, r4
 80075f4:	b003      	add	sp, #12
 80075f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075fe:	e7d6      	b.n	80075ae <__d2b+0x2e>
 8007600:	6161      	str	r1, [r4, #20]
 8007602:	e7e7      	b.n	80075d4 <__d2b+0x54>
 8007604:	a801      	add	r0, sp, #4
 8007606:	f7ff fcf1 	bl	8006fec <__lo0bits>
 800760a:	9b01      	ldr	r3, [sp, #4]
 800760c:	6163      	str	r3, [r4, #20]
 800760e:	3020      	adds	r0, #32
 8007610:	2201      	movs	r2, #1
 8007612:	e7e5      	b.n	80075e0 <__d2b+0x60>
 8007614:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007618:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800761c:	6038      	str	r0, [r7, #0]
 800761e:	6918      	ldr	r0, [r3, #16]
 8007620:	f7ff fcc4 	bl	8006fac <__hi0bits>
 8007624:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007628:	e7e2      	b.n	80075f0 <__d2b+0x70>
 800762a:	bf00      	nop
 800762c:	0800854d 	.word	0x0800854d
 8007630:	080085ea 	.word	0x080085ea

08007634 <__ratio>:
 8007634:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007638:	4688      	mov	r8, r1
 800763a:	4669      	mov	r1, sp
 800763c:	4681      	mov	r9, r0
 800763e:	f7ff ff55 	bl	80074ec <__b2d>
 8007642:	a901      	add	r1, sp, #4
 8007644:	4640      	mov	r0, r8
 8007646:	ec55 4b10 	vmov	r4, r5, d0
 800764a:	f7ff ff4f 	bl	80074ec <__b2d>
 800764e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007652:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007656:	eba3 0c02 	sub.w	ip, r3, r2
 800765a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800765e:	1a9b      	subs	r3, r3, r2
 8007660:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007664:	ec51 0b10 	vmov	r0, r1, d0
 8007668:	2b00      	cmp	r3, #0
 800766a:	bfd6      	itet	le
 800766c:	460a      	movle	r2, r1
 800766e:	462a      	movgt	r2, r5
 8007670:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007674:	468b      	mov	fp, r1
 8007676:	462f      	mov	r7, r5
 8007678:	bfd4      	ite	le
 800767a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800767e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007682:	4620      	mov	r0, r4
 8007684:	ee10 2a10 	vmov	r2, s0
 8007688:	465b      	mov	r3, fp
 800768a:	4639      	mov	r1, r7
 800768c:	f7f9 f8fe 	bl	800088c <__aeabi_ddiv>
 8007690:	ec41 0b10 	vmov	d0, r0, r1
 8007694:	b003      	add	sp, #12
 8007696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800769a <__copybits>:
 800769a:	3901      	subs	r1, #1
 800769c:	b570      	push	{r4, r5, r6, lr}
 800769e:	1149      	asrs	r1, r1, #5
 80076a0:	6914      	ldr	r4, [r2, #16]
 80076a2:	3101      	adds	r1, #1
 80076a4:	f102 0314 	add.w	r3, r2, #20
 80076a8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80076ac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80076b0:	1f05      	subs	r5, r0, #4
 80076b2:	42a3      	cmp	r3, r4
 80076b4:	d30c      	bcc.n	80076d0 <__copybits+0x36>
 80076b6:	1aa3      	subs	r3, r4, r2
 80076b8:	3b11      	subs	r3, #17
 80076ba:	f023 0303 	bic.w	r3, r3, #3
 80076be:	3211      	adds	r2, #17
 80076c0:	42a2      	cmp	r2, r4
 80076c2:	bf88      	it	hi
 80076c4:	2300      	movhi	r3, #0
 80076c6:	4418      	add	r0, r3
 80076c8:	2300      	movs	r3, #0
 80076ca:	4288      	cmp	r0, r1
 80076cc:	d305      	bcc.n	80076da <__copybits+0x40>
 80076ce:	bd70      	pop	{r4, r5, r6, pc}
 80076d0:	f853 6b04 	ldr.w	r6, [r3], #4
 80076d4:	f845 6f04 	str.w	r6, [r5, #4]!
 80076d8:	e7eb      	b.n	80076b2 <__copybits+0x18>
 80076da:	f840 3b04 	str.w	r3, [r0], #4
 80076de:	e7f4      	b.n	80076ca <__copybits+0x30>

080076e0 <__any_on>:
 80076e0:	f100 0214 	add.w	r2, r0, #20
 80076e4:	6900      	ldr	r0, [r0, #16]
 80076e6:	114b      	asrs	r3, r1, #5
 80076e8:	4298      	cmp	r0, r3
 80076ea:	b510      	push	{r4, lr}
 80076ec:	db11      	blt.n	8007712 <__any_on+0x32>
 80076ee:	dd0a      	ble.n	8007706 <__any_on+0x26>
 80076f0:	f011 011f 	ands.w	r1, r1, #31
 80076f4:	d007      	beq.n	8007706 <__any_on+0x26>
 80076f6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80076fa:	fa24 f001 	lsr.w	r0, r4, r1
 80076fe:	fa00 f101 	lsl.w	r1, r0, r1
 8007702:	428c      	cmp	r4, r1
 8007704:	d10b      	bne.n	800771e <__any_on+0x3e>
 8007706:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800770a:	4293      	cmp	r3, r2
 800770c:	d803      	bhi.n	8007716 <__any_on+0x36>
 800770e:	2000      	movs	r0, #0
 8007710:	bd10      	pop	{r4, pc}
 8007712:	4603      	mov	r3, r0
 8007714:	e7f7      	b.n	8007706 <__any_on+0x26>
 8007716:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800771a:	2900      	cmp	r1, #0
 800771c:	d0f5      	beq.n	800770a <__any_on+0x2a>
 800771e:	2001      	movs	r0, #1
 8007720:	e7f6      	b.n	8007710 <__any_on+0x30>

08007722 <__sread>:
 8007722:	b510      	push	{r4, lr}
 8007724:	460c      	mov	r4, r1
 8007726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800772a:	f000 fa6f 	bl	8007c0c <_read_r>
 800772e:	2800      	cmp	r0, #0
 8007730:	bfab      	itete	ge
 8007732:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007734:	89a3      	ldrhlt	r3, [r4, #12]
 8007736:	181b      	addge	r3, r3, r0
 8007738:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800773c:	bfac      	ite	ge
 800773e:	6563      	strge	r3, [r4, #84]	; 0x54
 8007740:	81a3      	strhlt	r3, [r4, #12]
 8007742:	bd10      	pop	{r4, pc}

08007744 <__swrite>:
 8007744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007748:	461f      	mov	r7, r3
 800774a:	898b      	ldrh	r3, [r1, #12]
 800774c:	05db      	lsls	r3, r3, #23
 800774e:	4605      	mov	r5, r0
 8007750:	460c      	mov	r4, r1
 8007752:	4616      	mov	r6, r2
 8007754:	d505      	bpl.n	8007762 <__swrite+0x1e>
 8007756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800775a:	2302      	movs	r3, #2
 800775c:	2200      	movs	r2, #0
 800775e:	f000 fa43 	bl	8007be8 <_lseek_r>
 8007762:	89a3      	ldrh	r3, [r4, #12]
 8007764:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007768:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800776c:	81a3      	strh	r3, [r4, #12]
 800776e:	4632      	mov	r2, r6
 8007770:	463b      	mov	r3, r7
 8007772:	4628      	mov	r0, r5
 8007774:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007778:	f000 ba6a 	b.w	8007c50 <_write_r>

0800777c <__sseek>:
 800777c:	b510      	push	{r4, lr}
 800777e:	460c      	mov	r4, r1
 8007780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007784:	f000 fa30 	bl	8007be8 <_lseek_r>
 8007788:	1c43      	adds	r3, r0, #1
 800778a:	89a3      	ldrh	r3, [r4, #12]
 800778c:	bf15      	itete	ne
 800778e:	6560      	strne	r0, [r4, #84]	; 0x54
 8007790:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007794:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007798:	81a3      	strheq	r3, [r4, #12]
 800779a:	bf18      	it	ne
 800779c:	81a3      	strhne	r3, [r4, #12]
 800779e:	bd10      	pop	{r4, pc}

080077a0 <__sclose>:
 80077a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077a4:	f000 ba10 	b.w	8007bc8 <_close_r>

080077a8 <__submore>:
 80077a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077ac:	460c      	mov	r4, r1
 80077ae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80077b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077b4:	4299      	cmp	r1, r3
 80077b6:	d11d      	bne.n	80077f4 <__submore+0x4c>
 80077b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80077bc:	f7fe fe7a 	bl	80064b4 <_malloc_r>
 80077c0:	b918      	cbnz	r0, 80077ca <__submore+0x22>
 80077c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077ce:	63a3      	str	r3, [r4, #56]	; 0x38
 80077d0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80077d4:	6360      	str	r0, [r4, #52]	; 0x34
 80077d6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80077da:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80077de:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80077e2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80077e6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80077ea:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80077ee:	6020      	str	r0, [r4, #0]
 80077f0:	2000      	movs	r0, #0
 80077f2:	e7e8      	b.n	80077c6 <__submore+0x1e>
 80077f4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80077f6:	0077      	lsls	r7, r6, #1
 80077f8:	463a      	mov	r2, r7
 80077fa:	f000 f893 	bl	8007924 <_realloc_r>
 80077fe:	4605      	mov	r5, r0
 8007800:	2800      	cmp	r0, #0
 8007802:	d0de      	beq.n	80077c2 <__submore+0x1a>
 8007804:	eb00 0806 	add.w	r8, r0, r6
 8007808:	4601      	mov	r1, r0
 800780a:	4632      	mov	r2, r6
 800780c:	4640      	mov	r0, r8
 800780e:	f7fd fae0 	bl	8004dd2 <memcpy>
 8007812:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8007816:	f8c4 8000 	str.w	r8, [r4]
 800781a:	e7e9      	b.n	80077f0 <__submore+0x48>

0800781c <_ungetc_r>:
 800781c:	b570      	push	{r4, r5, r6, lr}
 800781e:	4614      	mov	r4, r2
 8007820:	1c4a      	adds	r2, r1, #1
 8007822:	4606      	mov	r6, r0
 8007824:	460d      	mov	r5, r1
 8007826:	d103      	bne.n	8007830 <_ungetc_r+0x14>
 8007828:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800782c:	4628      	mov	r0, r5
 800782e:	bd70      	pop	{r4, r5, r6, pc}
 8007830:	b118      	cbz	r0, 800783a <_ungetc_r+0x1e>
 8007832:	6a03      	ldr	r3, [r0, #32]
 8007834:	b90b      	cbnz	r3, 800783a <_ungetc_r+0x1e>
 8007836:	f7fc fba1 	bl	8003f7c <__sinit>
 800783a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800783c:	07db      	lsls	r3, r3, #31
 800783e:	d405      	bmi.n	800784c <_ungetc_r+0x30>
 8007840:	89a3      	ldrh	r3, [r4, #12]
 8007842:	0598      	lsls	r0, r3, #22
 8007844:	d402      	bmi.n	800784c <_ungetc_r+0x30>
 8007846:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007848:	f7fd fac1 	bl	8004dce <__retarget_lock_acquire_recursive>
 800784c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007850:	f023 0320 	bic.w	r3, r3, #32
 8007854:	0759      	lsls	r1, r3, #29
 8007856:	81a3      	strh	r3, [r4, #12]
 8007858:	b29a      	uxth	r2, r3
 800785a:	d423      	bmi.n	80078a4 <_ungetc_r+0x88>
 800785c:	06d3      	lsls	r3, r2, #27
 800785e:	d409      	bmi.n	8007874 <_ungetc_r+0x58>
 8007860:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007862:	07dd      	lsls	r5, r3, #31
 8007864:	d4e0      	bmi.n	8007828 <_ungetc_r+0xc>
 8007866:	f412 7f00 	tst.w	r2, #512	; 0x200
 800786a:	d1dd      	bne.n	8007828 <_ungetc_r+0xc>
 800786c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800786e:	f7fd faaf 	bl	8004dd0 <__retarget_lock_release_recursive>
 8007872:	e7d9      	b.n	8007828 <_ungetc_r+0xc>
 8007874:	0710      	lsls	r0, r2, #28
 8007876:	d511      	bpl.n	800789c <_ungetc_r+0x80>
 8007878:	4621      	mov	r1, r4
 800787a:	4630      	mov	r0, r6
 800787c:	f7ff fa70 	bl	8006d60 <_fflush_r>
 8007880:	b130      	cbz	r0, 8007890 <_ungetc_r+0x74>
 8007882:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007884:	07d9      	lsls	r1, r3, #31
 8007886:	d4cf      	bmi.n	8007828 <_ungetc_r+0xc>
 8007888:	89a3      	ldrh	r3, [r4, #12]
 800788a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800788e:	e7ec      	b.n	800786a <_ungetc_r+0x4e>
 8007890:	89a3      	ldrh	r3, [r4, #12]
 8007892:	60a0      	str	r0, [r4, #8]
 8007894:	f023 0308 	bic.w	r3, r3, #8
 8007898:	81a3      	strh	r3, [r4, #12]
 800789a:	61a0      	str	r0, [r4, #24]
 800789c:	89a3      	ldrh	r3, [r4, #12]
 800789e:	f043 0304 	orr.w	r3, r3, #4
 80078a2:	81a3      	strh	r3, [r4, #12]
 80078a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80078a6:	6862      	ldr	r2, [r4, #4]
 80078a8:	b2ed      	uxtb	r5, r5
 80078aa:	b1d3      	cbz	r3, 80078e2 <_ungetc_r+0xc6>
 80078ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80078ae:	4293      	cmp	r3, r2
 80078b0:	dc05      	bgt.n	80078be <_ungetc_r+0xa2>
 80078b2:	4621      	mov	r1, r4
 80078b4:	4630      	mov	r0, r6
 80078b6:	f7ff ff77 	bl	80077a8 <__submore>
 80078ba:	2800      	cmp	r0, #0
 80078bc:	d1e1      	bne.n	8007882 <_ungetc_r+0x66>
 80078be:	6823      	ldr	r3, [r4, #0]
 80078c0:	1e5a      	subs	r2, r3, #1
 80078c2:	6022      	str	r2, [r4, #0]
 80078c4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80078c8:	6863      	ldr	r3, [r4, #4]
 80078ca:	3301      	adds	r3, #1
 80078cc:	6063      	str	r3, [r4, #4]
 80078ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078d0:	07da      	lsls	r2, r3, #31
 80078d2:	d4ab      	bmi.n	800782c <_ungetc_r+0x10>
 80078d4:	89a3      	ldrh	r3, [r4, #12]
 80078d6:	059b      	lsls	r3, r3, #22
 80078d8:	d4a8      	bmi.n	800782c <_ungetc_r+0x10>
 80078da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078dc:	f7fd fa78 	bl	8004dd0 <__retarget_lock_release_recursive>
 80078e0:	e7a4      	b.n	800782c <_ungetc_r+0x10>
 80078e2:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80078e4:	6920      	ldr	r0, [r4, #16]
 80078e6:	6823      	ldr	r3, [r4, #0]
 80078e8:	f001 0101 	and.w	r1, r1, #1
 80078ec:	b160      	cbz	r0, 8007908 <_ungetc_r+0xec>
 80078ee:	4298      	cmp	r0, r3
 80078f0:	d20a      	bcs.n	8007908 <_ungetc_r+0xec>
 80078f2:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 80078f6:	42a8      	cmp	r0, r5
 80078f8:	d106      	bne.n	8007908 <_ungetc_r+0xec>
 80078fa:	3b01      	subs	r3, #1
 80078fc:	3201      	adds	r2, #1
 80078fe:	6023      	str	r3, [r4, #0]
 8007900:	6062      	str	r2, [r4, #4]
 8007902:	2900      	cmp	r1, #0
 8007904:	d192      	bne.n	800782c <_ungetc_r+0x10>
 8007906:	e7e5      	b.n	80078d4 <_ungetc_r+0xb8>
 8007908:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800790c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007910:	6363      	str	r3, [r4, #52]	; 0x34
 8007912:	2303      	movs	r3, #3
 8007914:	63a3      	str	r3, [r4, #56]	; 0x38
 8007916:	4623      	mov	r3, r4
 8007918:	f803 5f46 	strb.w	r5, [r3, #70]!
 800791c:	6023      	str	r3, [r4, #0]
 800791e:	2301      	movs	r3, #1
 8007920:	6063      	str	r3, [r4, #4]
 8007922:	e7ee      	b.n	8007902 <_ungetc_r+0xe6>

08007924 <_realloc_r>:
 8007924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007928:	4680      	mov	r8, r0
 800792a:	4614      	mov	r4, r2
 800792c:	460e      	mov	r6, r1
 800792e:	b921      	cbnz	r1, 800793a <_realloc_r+0x16>
 8007930:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007934:	4611      	mov	r1, r2
 8007936:	f7fe bdbd 	b.w	80064b4 <_malloc_r>
 800793a:	b92a      	cbnz	r2, 8007948 <_realloc_r+0x24>
 800793c:	f000 f9ce 	bl	8007cdc <_free_r>
 8007940:	4625      	mov	r5, r4
 8007942:	4628      	mov	r0, r5
 8007944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007948:	f000 fa14 	bl	8007d74 <_malloc_usable_size_r>
 800794c:	4284      	cmp	r4, r0
 800794e:	4607      	mov	r7, r0
 8007950:	d802      	bhi.n	8007958 <_realloc_r+0x34>
 8007952:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007956:	d812      	bhi.n	800797e <_realloc_r+0x5a>
 8007958:	4621      	mov	r1, r4
 800795a:	4640      	mov	r0, r8
 800795c:	f7fe fdaa 	bl	80064b4 <_malloc_r>
 8007960:	4605      	mov	r5, r0
 8007962:	2800      	cmp	r0, #0
 8007964:	d0ed      	beq.n	8007942 <_realloc_r+0x1e>
 8007966:	42bc      	cmp	r4, r7
 8007968:	4622      	mov	r2, r4
 800796a:	4631      	mov	r1, r6
 800796c:	bf28      	it	cs
 800796e:	463a      	movcs	r2, r7
 8007970:	f7fd fa2f 	bl	8004dd2 <memcpy>
 8007974:	4631      	mov	r1, r6
 8007976:	4640      	mov	r0, r8
 8007978:	f000 f9b0 	bl	8007cdc <_free_r>
 800797c:	e7e1      	b.n	8007942 <_realloc_r+0x1e>
 800797e:	4635      	mov	r5, r6
 8007980:	e7df      	b.n	8007942 <_realloc_r+0x1e>
	...

08007984 <_strtoul_l.constprop.0>:
 8007984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007988:	4f36      	ldr	r7, [pc, #216]	; (8007a64 <_strtoul_l.constprop.0+0xe0>)
 800798a:	4686      	mov	lr, r0
 800798c:	460d      	mov	r5, r1
 800798e:	4628      	mov	r0, r5
 8007990:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007994:	5d3e      	ldrb	r6, [r7, r4]
 8007996:	f016 0608 	ands.w	r6, r6, #8
 800799a:	d1f8      	bne.n	800798e <_strtoul_l.constprop.0+0xa>
 800799c:	2c2d      	cmp	r4, #45	; 0x2d
 800799e:	d130      	bne.n	8007a02 <_strtoul_l.constprop.0+0x7e>
 80079a0:	782c      	ldrb	r4, [r5, #0]
 80079a2:	2601      	movs	r6, #1
 80079a4:	1c85      	adds	r5, r0, #2
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d057      	beq.n	8007a5a <_strtoul_l.constprop.0+0xd6>
 80079aa:	2b10      	cmp	r3, #16
 80079ac:	d109      	bne.n	80079c2 <_strtoul_l.constprop.0+0x3e>
 80079ae:	2c30      	cmp	r4, #48	; 0x30
 80079b0:	d107      	bne.n	80079c2 <_strtoul_l.constprop.0+0x3e>
 80079b2:	7828      	ldrb	r0, [r5, #0]
 80079b4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80079b8:	2858      	cmp	r0, #88	; 0x58
 80079ba:	d149      	bne.n	8007a50 <_strtoul_l.constprop.0+0xcc>
 80079bc:	786c      	ldrb	r4, [r5, #1]
 80079be:	2310      	movs	r3, #16
 80079c0:	3502      	adds	r5, #2
 80079c2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80079c6:	2700      	movs	r7, #0
 80079c8:	fbb8 f8f3 	udiv	r8, r8, r3
 80079cc:	fb03 f908 	mul.w	r9, r3, r8
 80079d0:	ea6f 0909 	mvn.w	r9, r9
 80079d4:	4638      	mov	r0, r7
 80079d6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80079da:	f1bc 0f09 	cmp.w	ip, #9
 80079de:	d815      	bhi.n	8007a0c <_strtoul_l.constprop.0+0x88>
 80079e0:	4664      	mov	r4, ip
 80079e2:	42a3      	cmp	r3, r4
 80079e4:	dd23      	ble.n	8007a2e <_strtoul_l.constprop.0+0xaa>
 80079e6:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80079ea:	d007      	beq.n	80079fc <_strtoul_l.constprop.0+0x78>
 80079ec:	4580      	cmp	r8, r0
 80079ee:	d31b      	bcc.n	8007a28 <_strtoul_l.constprop.0+0xa4>
 80079f0:	d101      	bne.n	80079f6 <_strtoul_l.constprop.0+0x72>
 80079f2:	45a1      	cmp	r9, r4
 80079f4:	db18      	blt.n	8007a28 <_strtoul_l.constprop.0+0xa4>
 80079f6:	fb00 4003 	mla	r0, r0, r3, r4
 80079fa:	2701      	movs	r7, #1
 80079fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a00:	e7e9      	b.n	80079d6 <_strtoul_l.constprop.0+0x52>
 8007a02:	2c2b      	cmp	r4, #43	; 0x2b
 8007a04:	bf04      	itt	eq
 8007a06:	782c      	ldrbeq	r4, [r5, #0]
 8007a08:	1c85      	addeq	r5, r0, #2
 8007a0a:	e7cc      	b.n	80079a6 <_strtoul_l.constprop.0+0x22>
 8007a0c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007a10:	f1bc 0f19 	cmp.w	ip, #25
 8007a14:	d801      	bhi.n	8007a1a <_strtoul_l.constprop.0+0x96>
 8007a16:	3c37      	subs	r4, #55	; 0x37
 8007a18:	e7e3      	b.n	80079e2 <_strtoul_l.constprop.0+0x5e>
 8007a1a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007a1e:	f1bc 0f19 	cmp.w	ip, #25
 8007a22:	d804      	bhi.n	8007a2e <_strtoul_l.constprop.0+0xaa>
 8007a24:	3c57      	subs	r4, #87	; 0x57
 8007a26:	e7dc      	b.n	80079e2 <_strtoul_l.constprop.0+0x5e>
 8007a28:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007a2c:	e7e6      	b.n	80079fc <_strtoul_l.constprop.0+0x78>
 8007a2e:	1c7b      	adds	r3, r7, #1
 8007a30:	d106      	bne.n	8007a40 <_strtoul_l.constprop.0+0xbc>
 8007a32:	2322      	movs	r3, #34	; 0x22
 8007a34:	f8ce 3000 	str.w	r3, [lr]
 8007a38:	4638      	mov	r0, r7
 8007a3a:	b932      	cbnz	r2, 8007a4a <_strtoul_l.constprop.0+0xc6>
 8007a3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a40:	b106      	cbz	r6, 8007a44 <_strtoul_l.constprop.0+0xc0>
 8007a42:	4240      	negs	r0, r0
 8007a44:	2a00      	cmp	r2, #0
 8007a46:	d0f9      	beq.n	8007a3c <_strtoul_l.constprop.0+0xb8>
 8007a48:	b107      	cbz	r7, 8007a4c <_strtoul_l.constprop.0+0xc8>
 8007a4a:	1e69      	subs	r1, r5, #1
 8007a4c:	6011      	str	r1, [r2, #0]
 8007a4e:	e7f5      	b.n	8007a3c <_strtoul_l.constprop.0+0xb8>
 8007a50:	2430      	movs	r4, #48	; 0x30
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d1b5      	bne.n	80079c2 <_strtoul_l.constprop.0+0x3e>
 8007a56:	2308      	movs	r3, #8
 8007a58:	e7b3      	b.n	80079c2 <_strtoul_l.constprop.0+0x3e>
 8007a5a:	2c30      	cmp	r4, #48	; 0x30
 8007a5c:	d0a9      	beq.n	80079b2 <_strtoul_l.constprop.0+0x2e>
 8007a5e:	230a      	movs	r3, #10
 8007a60:	e7af      	b.n	80079c2 <_strtoul_l.constprop.0+0x3e>
 8007a62:	bf00      	nop
 8007a64:	080083d1 	.word	0x080083d1

08007a68 <_strtoul_r>:
 8007a68:	f7ff bf8c 	b.w	8007984 <_strtoul_l.constprop.0>

08007a6c <__ascii_wctomb>:
 8007a6c:	b149      	cbz	r1, 8007a82 <__ascii_wctomb+0x16>
 8007a6e:	2aff      	cmp	r2, #255	; 0xff
 8007a70:	bf85      	ittet	hi
 8007a72:	238a      	movhi	r3, #138	; 0x8a
 8007a74:	6003      	strhi	r3, [r0, #0]
 8007a76:	700a      	strbls	r2, [r1, #0]
 8007a78:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007a7c:	bf98      	it	ls
 8007a7e:	2001      	movls	r0, #1
 8007a80:	4770      	bx	lr
 8007a82:	4608      	mov	r0, r1
 8007a84:	4770      	bx	lr
	...

08007a88 <lflush>:
 8007a88:	898b      	ldrh	r3, [r1, #12]
 8007a8a:	f003 0309 	and.w	r3, r3, #9
 8007a8e:	2b09      	cmp	r3, #9
 8007a90:	d103      	bne.n	8007a9a <lflush+0x12>
 8007a92:	4b03      	ldr	r3, [pc, #12]	; (8007aa0 <lflush+0x18>)
 8007a94:	6818      	ldr	r0, [r3, #0]
 8007a96:	f7ff b963 	b.w	8006d60 <_fflush_r>
 8007a9a:	2000      	movs	r0, #0
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop
 8007aa0:	200001d0 	.word	0x200001d0

08007aa4 <__srefill_r>:
 8007aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aa6:	460c      	mov	r4, r1
 8007aa8:	4605      	mov	r5, r0
 8007aaa:	b118      	cbz	r0, 8007ab4 <__srefill_r+0x10>
 8007aac:	6a03      	ldr	r3, [r0, #32]
 8007aae:	b90b      	cbnz	r3, 8007ab4 <__srefill_r+0x10>
 8007ab0:	f7fc fa64 	bl	8003f7c <__sinit>
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	6063      	str	r3, [r4, #4]
 8007ab8:	89a3      	ldrh	r3, [r4, #12]
 8007aba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007abe:	069e      	lsls	r6, r3, #26
 8007ac0:	d502      	bpl.n	8007ac8 <__srefill_r+0x24>
 8007ac2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ac6:	e05c      	b.n	8007b82 <__srefill_r+0xde>
 8007ac8:	0758      	lsls	r0, r3, #29
 8007aca:	d448      	bmi.n	8007b5e <__srefill_r+0xba>
 8007acc:	06d9      	lsls	r1, r3, #27
 8007ace:	d405      	bmi.n	8007adc <__srefill_r+0x38>
 8007ad0:	2309      	movs	r3, #9
 8007ad2:	602b      	str	r3, [r5, #0]
 8007ad4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ad8:	81a3      	strh	r3, [r4, #12]
 8007ada:	e7f2      	b.n	8007ac2 <__srefill_r+0x1e>
 8007adc:	071a      	lsls	r2, r3, #28
 8007ade:	d50b      	bpl.n	8007af8 <__srefill_r+0x54>
 8007ae0:	4621      	mov	r1, r4
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	f7ff f93c 	bl	8006d60 <_fflush_r>
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	d1ea      	bne.n	8007ac2 <__srefill_r+0x1e>
 8007aec:	89a3      	ldrh	r3, [r4, #12]
 8007aee:	60a0      	str	r0, [r4, #8]
 8007af0:	f023 0308 	bic.w	r3, r3, #8
 8007af4:	81a3      	strh	r3, [r4, #12]
 8007af6:	61a0      	str	r0, [r4, #24]
 8007af8:	89a3      	ldrh	r3, [r4, #12]
 8007afa:	f043 0304 	orr.w	r3, r3, #4
 8007afe:	81a3      	strh	r3, [r4, #12]
 8007b00:	6923      	ldr	r3, [r4, #16]
 8007b02:	b91b      	cbnz	r3, 8007b0c <__srefill_r+0x68>
 8007b04:	4621      	mov	r1, r4
 8007b06:	4628      	mov	r0, r5
 8007b08:	f000 f974 	bl	8007df4 <__smakebuf_r>
 8007b0c:	89a6      	ldrh	r6, [r4, #12]
 8007b0e:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8007b12:	07b3      	lsls	r3, r6, #30
 8007b14:	d00f      	beq.n	8007b36 <__srefill_r+0x92>
 8007b16:	2301      	movs	r3, #1
 8007b18:	4a1b      	ldr	r2, [pc, #108]	; (8007b88 <__srefill_r+0xe4>)
 8007b1a:	491c      	ldr	r1, [pc, #112]	; (8007b8c <__srefill_r+0xe8>)
 8007b1c:	481c      	ldr	r0, [pc, #112]	; (8007b90 <__srefill_r+0xec>)
 8007b1e:	81a3      	strh	r3, [r4, #12]
 8007b20:	f006 0609 	and.w	r6, r6, #9
 8007b24:	f7fd f8da 	bl	8004cdc <_fwalk_sglue>
 8007b28:	2e09      	cmp	r6, #9
 8007b2a:	81a7      	strh	r7, [r4, #12]
 8007b2c:	d103      	bne.n	8007b36 <__srefill_r+0x92>
 8007b2e:	4621      	mov	r1, r4
 8007b30:	4628      	mov	r0, r5
 8007b32:	f7ff f88f 	bl	8006c54 <__sflush_r>
 8007b36:	6922      	ldr	r2, [r4, #16]
 8007b38:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007b3a:	6963      	ldr	r3, [r4, #20]
 8007b3c:	6a21      	ldr	r1, [r4, #32]
 8007b3e:	6022      	str	r2, [r4, #0]
 8007b40:	4628      	mov	r0, r5
 8007b42:	47b0      	blx	r6
 8007b44:	2800      	cmp	r0, #0
 8007b46:	6060      	str	r0, [r4, #4]
 8007b48:	dc1c      	bgt.n	8007b84 <__srefill_r+0xe0>
 8007b4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b4e:	bf17      	itett	ne
 8007b50:	2200      	movne	r2, #0
 8007b52:	f043 0320 	orreq.w	r3, r3, #32
 8007b56:	6062      	strne	r2, [r4, #4]
 8007b58:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8007b5c:	e7bc      	b.n	8007ad8 <__srefill_r+0x34>
 8007b5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b60:	2900      	cmp	r1, #0
 8007b62:	d0cd      	beq.n	8007b00 <__srefill_r+0x5c>
 8007b64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b68:	4299      	cmp	r1, r3
 8007b6a:	d002      	beq.n	8007b72 <__srefill_r+0xce>
 8007b6c:	4628      	mov	r0, r5
 8007b6e:	f000 f8b5 	bl	8007cdc <_free_r>
 8007b72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b74:	6063      	str	r3, [r4, #4]
 8007b76:	2000      	movs	r0, #0
 8007b78:	6360      	str	r0, [r4, #52]	; 0x34
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d0c0      	beq.n	8007b00 <__srefill_r+0x5c>
 8007b7e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007b80:	6023      	str	r3, [r4, #0]
 8007b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b84:	2000      	movs	r0, #0
 8007b86:	e7fc      	b.n	8007b82 <__srefill_r+0xde>
 8007b88:	2000000c 	.word	0x2000000c
 8007b8c:	08007a89 	.word	0x08007a89
 8007b90:	20000184 	.word	0x20000184

08007b94 <memmove>:
 8007b94:	4288      	cmp	r0, r1
 8007b96:	b510      	push	{r4, lr}
 8007b98:	eb01 0402 	add.w	r4, r1, r2
 8007b9c:	d902      	bls.n	8007ba4 <memmove+0x10>
 8007b9e:	4284      	cmp	r4, r0
 8007ba0:	4623      	mov	r3, r4
 8007ba2:	d807      	bhi.n	8007bb4 <memmove+0x20>
 8007ba4:	1e43      	subs	r3, r0, #1
 8007ba6:	42a1      	cmp	r1, r4
 8007ba8:	d008      	beq.n	8007bbc <memmove+0x28>
 8007baa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007bb2:	e7f8      	b.n	8007ba6 <memmove+0x12>
 8007bb4:	4402      	add	r2, r0
 8007bb6:	4601      	mov	r1, r0
 8007bb8:	428a      	cmp	r2, r1
 8007bba:	d100      	bne.n	8007bbe <memmove+0x2a>
 8007bbc:	bd10      	pop	{r4, pc}
 8007bbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007bc6:	e7f7      	b.n	8007bb8 <memmove+0x24>

08007bc8 <_close_r>:
 8007bc8:	b538      	push	{r3, r4, r5, lr}
 8007bca:	4d06      	ldr	r5, [pc, #24]	; (8007be4 <_close_r+0x1c>)
 8007bcc:	2300      	movs	r3, #0
 8007bce:	4604      	mov	r4, r0
 8007bd0:	4608      	mov	r0, r1
 8007bd2:	602b      	str	r3, [r5, #0]
 8007bd4:	f7f9 fc79 	bl	80014ca <_close>
 8007bd8:	1c43      	adds	r3, r0, #1
 8007bda:	d102      	bne.n	8007be2 <_close_r+0x1a>
 8007bdc:	682b      	ldr	r3, [r5, #0]
 8007bde:	b103      	cbz	r3, 8007be2 <_close_r+0x1a>
 8007be0:	6023      	str	r3, [r4, #0]
 8007be2:	bd38      	pop	{r3, r4, r5, pc}
 8007be4:	20000388 	.word	0x20000388

08007be8 <_lseek_r>:
 8007be8:	b538      	push	{r3, r4, r5, lr}
 8007bea:	4d07      	ldr	r5, [pc, #28]	; (8007c08 <_lseek_r+0x20>)
 8007bec:	4604      	mov	r4, r0
 8007bee:	4608      	mov	r0, r1
 8007bf0:	4611      	mov	r1, r2
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	602a      	str	r2, [r5, #0]
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	f7f9 fc8e 	bl	8001518 <_lseek>
 8007bfc:	1c43      	adds	r3, r0, #1
 8007bfe:	d102      	bne.n	8007c06 <_lseek_r+0x1e>
 8007c00:	682b      	ldr	r3, [r5, #0]
 8007c02:	b103      	cbz	r3, 8007c06 <_lseek_r+0x1e>
 8007c04:	6023      	str	r3, [r4, #0]
 8007c06:	bd38      	pop	{r3, r4, r5, pc}
 8007c08:	20000388 	.word	0x20000388

08007c0c <_read_r>:
 8007c0c:	b538      	push	{r3, r4, r5, lr}
 8007c0e:	4d07      	ldr	r5, [pc, #28]	; (8007c2c <_read_r+0x20>)
 8007c10:	4604      	mov	r4, r0
 8007c12:	4608      	mov	r0, r1
 8007c14:	4611      	mov	r1, r2
 8007c16:	2200      	movs	r2, #0
 8007c18:	602a      	str	r2, [r5, #0]
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	f7f9 fc1c 	bl	8001458 <_read>
 8007c20:	1c43      	adds	r3, r0, #1
 8007c22:	d102      	bne.n	8007c2a <_read_r+0x1e>
 8007c24:	682b      	ldr	r3, [r5, #0]
 8007c26:	b103      	cbz	r3, 8007c2a <_read_r+0x1e>
 8007c28:	6023      	str	r3, [r4, #0]
 8007c2a:	bd38      	pop	{r3, r4, r5, pc}
 8007c2c:	20000388 	.word	0x20000388

08007c30 <_sbrk_r>:
 8007c30:	b538      	push	{r3, r4, r5, lr}
 8007c32:	4d06      	ldr	r5, [pc, #24]	; (8007c4c <_sbrk_r+0x1c>)
 8007c34:	2300      	movs	r3, #0
 8007c36:	4604      	mov	r4, r0
 8007c38:	4608      	mov	r0, r1
 8007c3a:	602b      	str	r3, [r5, #0]
 8007c3c:	f7f9 fc7a 	bl	8001534 <_sbrk>
 8007c40:	1c43      	adds	r3, r0, #1
 8007c42:	d102      	bne.n	8007c4a <_sbrk_r+0x1a>
 8007c44:	682b      	ldr	r3, [r5, #0]
 8007c46:	b103      	cbz	r3, 8007c4a <_sbrk_r+0x1a>
 8007c48:	6023      	str	r3, [r4, #0]
 8007c4a:	bd38      	pop	{r3, r4, r5, pc}
 8007c4c:	20000388 	.word	0x20000388

08007c50 <_write_r>:
 8007c50:	b538      	push	{r3, r4, r5, lr}
 8007c52:	4d07      	ldr	r5, [pc, #28]	; (8007c70 <_write_r+0x20>)
 8007c54:	4604      	mov	r4, r0
 8007c56:	4608      	mov	r0, r1
 8007c58:	4611      	mov	r1, r2
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	602a      	str	r2, [r5, #0]
 8007c5e:	461a      	mov	r2, r3
 8007c60:	f7f9 fc17 	bl	8001492 <_write>
 8007c64:	1c43      	adds	r3, r0, #1
 8007c66:	d102      	bne.n	8007c6e <_write_r+0x1e>
 8007c68:	682b      	ldr	r3, [r5, #0]
 8007c6a:	b103      	cbz	r3, 8007c6e <_write_r+0x1e>
 8007c6c:	6023      	str	r3, [r4, #0]
 8007c6e:	bd38      	pop	{r3, r4, r5, pc}
 8007c70:	20000388 	.word	0x20000388

08007c74 <__assert_func>:
 8007c74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c76:	4614      	mov	r4, r2
 8007c78:	461a      	mov	r2, r3
 8007c7a:	4b09      	ldr	r3, [pc, #36]	; (8007ca0 <__assert_func+0x2c>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4605      	mov	r5, r0
 8007c80:	68d8      	ldr	r0, [r3, #12]
 8007c82:	b14c      	cbz	r4, 8007c98 <__assert_func+0x24>
 8007c84:	4b07      	ldr	r3, [pc, #28]	; (8007ca4 <__assert_func+0x30>)
 8007c86:	9100      	str	r1, [sp, #0]
 8007c88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c8c:	4906      	ldr	r1, [pc, #24]	; (8007ca8 <__assert_func+0x34>)
 8007c8e:	462b      	mov	r3, r5
 8007c90:	f000 f878 	bl	8007d84 <fiprintf>
 8007c94:	f000 f90c 	bl	8007eb0 <abort>
 8007c98:	4b04      	ldr	r3, [pc, #16]	; (8007cac <__assert_func+0x38>)
 8007c9a:	461c      	mov	r4, r3
 8007c9c:	e7f3      	b.n	8007c86 <__assert_func+0x12>
 8007c9e:	bf00      	nop
 8007ca0:	200001d0 	.word	0x200001d0
 8007ca4:	08008744 	.word	0x08008744
 8007ca8:	08008751 	.word	0x08008751
 8007cac:	0800877f 	.word	0x0800877f

08007cb0 <_calloc_r>:
 8007cb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cb2:	fba1 2402 	umull	r2, r4, r1, r2
 8007cb6:	b94c      	cbnz	r4, 8007ccc <_calloc_r+0x1c>
 8007cb8:	4611      	mov	r1, r2
 8007cba:	9201      	str	r2, [sp, #4]
 8007cbc:	f7fe fbfa 	bl	80064b4 <_malloc_r>
 8007cc0:	9a01      	ldr	r2, [sp, #4]
 8007cc2:	4605      	mov	r5, r0
 8007cc4:	b930      	cbnz	r0, 8007cd4 <_calloc_r+0x24>
 8007cc6:	4628      	mov	r0, r5
 8007cc8:	b003      	add	sp, #12
 8007cca:	bd30      	pop	{r4, r5, pc}
 8007ccc:	220c      	movs	r2, #12
 8007cce:	6002      	str	r2, [r0, #0]
 8007cd0:	2500      	movs	r5, #0
 8007cd2:	e7f8      	b.n	8007cc6 <_calloc_r+0x16>
 8007cd4:	4621      	mov	r1, r4
 8007cd6:	f7fd f843 	bl	8004d60 <memset>
 8007cda:	e7f4      	b.n	8007cc6 <_calloc_r+0x16>

08007cdc <_free_r>:
 8007cdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cde:	2900      	cmp	r1, #0
 8007ce0:	d044      	beq.n	8007d6c <_free_r+0x90>
 8007ce2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ce6:	9001      	str	r0, [sp, #4]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f1a1 0404 	sub.w	r4, r1, #4
 8007cee:	bfb8      	it	lt
 8007cf0:	18e4      	addlt	r4, r4, r3
 8007cf2:	f7ff f85d 	bl	8006db0 <__malloc_lock>
 8007cf6:	4a1e      	ldr	r2, [pc, #120]	; (8007d70 <_free_r+0x94>)
 8007cf8:	9801      	ldr	r0, [sp, #4]
 8007cfa:	6813      	ldr	r3, [r2, #0]
 8007cfc:	b933      	cbnz	r3, 8007d0c <_free_r+0x30>
 8007cfe:	6063      	str	r3, [r4, #4]
 8007d00:	6014      	str	r4, [r2, #0]
 8007d02:	b003      	add	sp, #12
 8007d04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d08:	f7ff b858 	b.w	8006dbc <__malloc_unlock>
 8007d0c:	42a3      	cmp	r3, r4
 8007d0e:	d908      	bls.n	8007d22 <_free_r+0x46>
 8007d10:	6825      	ldr	r5, [r4, #0]
 8007d12:	1961      	adds	r1, r4, r5
 8007d14:	428b      	cmp	r3, r1
 8007d16:	bf01      	itttt	eq
 8007d18:	6819      	ldreq	r1, [r3, #0]
 8007d1a:	685b      	ldreq	r3, [r3, #4]
 8007d1c:	1949      	addeq	r1, r1, r5
 8007d1e:	6021      	streq	r1, [r4, #0]
 8007d20:	e7ed      	b.n	8007cfe <_free_r+0x22>
 8007d22:	461a      	mov	r2, r3
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	b10b      	cbz	r3, 8007d2c <_free_r+0x50>
 8007d28:	42a3      	cmp	r3, r4
 8007d2a:	d9fa      	bls.n	8007d22 <_free_r+0x46>
 8007d2c:	6811      	ldr	r1, [r2, #0]
 8007d2e:	1855      	adds	r5, r2, r1
 8007d30:	42a5      	cmp	r5, r4
 8007d32:	d10b      	bne.n	8007d4c <_free_r+0x70>
 8007d34:	6824      	ldr	r4, [r4, #0]
 8007d36:	4421      	add	r1, r4
 8007d38:	1854      	adds	r4, r2, r1
 8007d3a:	42a3      	cmp	r3, r4
 8007d3c:	6011      	str	r1, [r2, #0]
 8007d3e:	d1e0      	bne.n	8007d02 <_free_r+0x26>
 8007d40:	681c      	ldr	r4, [r3, #0]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	6053      	str	r3, [r2, #4]
 8007d46:	440c      	add	r4, r1
 8007d48:	6014      	str	r4, [r2, #0]
 8007d4a:	e7da      	b.n	8007d02 <_free_r+0x26>
 8007d4c:	d902      	bls.n	8007d54 <_free_r+0x78>
 8007d4e:	230c      	movs	r3, #12
 8007d50:	6003      	str	r3, [r0, #0]
 8007d52:	e7d6      	b.n	8007d02 <_free_r+0x26>
 8007d54:	6825      	ldr	r5, [r4, #0]
 8007d56:	1961      	adds	r1, r4, r5
 8007d58:	428b      	cmp	r3, r1
 8007d5a:	bf04      	itt	eq
 8007d5c:	6819      	ldreq	r1, [r3, #0]
 8007d5e:	685b      	ldreq	r3, [r3, #4]
 8007d60:	6063      	str	r3, [r4, #4]
 8007d62:	bf04      	itt	eq
 8007d64:	1949      	addeq	r1, r1, r5
 8007d66:	6021      	streq	r1, [r4, #0]
 8007d68:	6054      	str	r4, [r2, #4]
 8007d6a:	e7ca      	b.n	8007d02 <_free_r+0x26>
 8007d6c:	b003      	add	sp, #12
 8007d6e:	bd30      	pop	{r4, r5, pc}
 8007d70:	20000380 	.word	0x20000380

08007d74 <_malloc_usable_size_r>:
 8007d74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d78:	1f18      	subs	r0, r3, #4
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	bfbc      	itt	lt
 8007d7e:	580b      	ldrlt	r3, [r1, r0]
 8007d80:	18c0      	addlt	r0, r0, r3
 8007d82:	4770      	bx	lr

08007d84 <fiprintf>:
 8007d84:	b40e      	push	{r1, r2, r3}
 8007d86:	b503      	push	{r0, r1, lr}
 8007d88:	4601      	mov	r1, r0
 8007d8a:	ab03      	add	r3, sp, #12
 8007d8c:	4805      	ldr	r0, [pc, #20]	; (8007da4 <fiprintf+0x20>)
 8007d8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d92:	6800      	ldr	r0, [r0, #0]
 8007d94:	9301      	str	r3, [sp, #4]
 8007d96:	f000 f8bb 	bl	8007f10 <_vfiprintf_r>
 8007d9a:	b002      	add	sp, #8
 8007d9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007da0:	b003      	add	sp, #12
 8007da2:	4770      	bx	lr
 8007da4:	200001d0 	.word	0x200001d0

08007da8 <__swhatbuf_r>:
 8007da8:	b570      	push	{r4, r5, r6, lr}
 8007daa:	460c      	mov	r4, r1
 8007dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007db0:	2900      	cmp	r1, #0
 8007db2:	b096      	sub	sp, #88	; 0x58
 8007db4:	4615      	mov	r5, r2
 8007db6:	461e      	mov	r6, r3
 8007db8:	da0d      	bge.n	8007dd6 <__swhatbuf_r+0x2e>
 8007dba:	89a3      	ldrh	r3, [r4, #12]
 8007dbc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007dc0:	f04f 0100 	mov.w	r1, #0
 8007dc4:	bf0c      	ite	eq
 8007dc6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007dca:	2340      	movne	r3, #64	; 0x40
 8007dcc:	2000      	movs	r0, #0
 8007dce:	6031      	str	r1, [r6, #0]
 8007dd0:	602b      	str	r3, [r5, #0]
 8007dd2:	b016      	add	sp, #88	; 0x58
 8007dd4:	bd70      	pop	{r4, r5, r6, pc}
 8007dd6:	466a      	mov	r2, sp
 8007dd8:	f000 f848 	bl	8007e6c <_fstat_r>
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	dbec      	blt.n	8007dba <__swhatbuf_r+0x12>
 8007de0:	9901      	ldr	r1, [sp, #4]
 8007de2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007de6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007dea:	4259      	negs	r1, r3
 8007dec:	4159      	adcs	r1, r3
 8007dee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007df2:	e7eb      	b.n	8007dcc <__swhatbuf_r+0x24>

08007df4 <__smakebuf_r>:
 8007df4:	898b      	ldrh	r3, [r1, #12]
 8007df6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007df8:	079d      	lsls	r5, r3, #30
 8007dfa:	4606      	mov	r6, r0
 8007dfc:	460c      	mov	r4, r1
 8007dfe:	d507      	bpl.n	8007e10 <__smakebuf_r+0x1c>
 8007e00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007e04:	6023      	str	r3, [r4, #0]
 8007e06:	6123      	str	r3, [r4, #16]
 8007e08:	2301      	movs	r3, #1
 8007e0a:	6163      	str	r3, [r4, #20]
 8007e0c:	b002      	add	sp, #8
 8007e0e:	bd70      	pop	{r4, r5, r6, pc}
 8007e10:	ab01      	add	r3, sp, #4
 8007e12:	466a      	mov	r2, sp
 8007e14:	f7ff ffc8 	bl	8007da8 <__swhatbuf_r>
 8007e18:	9900      	ldr	r1, [sp, #0]
 8007e1a:	4605      	mov	r5, r0
 8007e1c:	4630      	mov	r0, r6
 8007e1e:	f7fe fb49 	bl	80064b4 <_malloc_r>
 8007e22:	b948      	cbnz	r0, 8007e38 <__smakebuf_r+0x44>
 8007e24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e28:	059a      	lsls	r2, r3, #22
 8007e2a:	d4ef      	bmi.n	8007e0c <__smakebuf_r+0x18>
 8007e2c:	f023 0303 	bic.w	r3, r3, #3
 8007e30:	f043 0302 	orr.w	r3, r3, #2
 8007e34:	81a3      	strh	r3, [r4, #12]
 8007e36:	e7e3      	b.n	8007e00 <__smakebuf_r+0xc>
 8007e38:	89a3      	ldrh	r3, [r4, #12]
 8007e3a:	6020      	str	r0, [r4, #0]
 8007e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e40:	81a3      	strh	r3, [r4, #12]
 8007e42:	9b00      	ldr	r3, [sp, #0]
 8007e44:	6163      	str	r3, [r4, #20]
 8007e46:	9b01      	ldr	r3, [sp, #4]
 8007e48:	6120      	str	r0, [r4, #16]
 8007e4a:	b15b      	cbz	r3, 8007e64 <__smakebuf_r+0x70>
 8007e4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e50:	4630      	mov	r0, r6
 8007e52:	f000 f81d 	bl	8007e90 <_isatty_r>
 8007e56:	b128      	cbz	r0, 8007e64 <__smakebuf_r+0x70>
 8007e58:	89a3      	ldrh	r3, [r4, #12]
 8007e5a:	f023 0303 	bic.w	r3, r3, #3
 8007e5e:	f043 0301 	orr.w	r3, r3, #1
 8007e62:	81a3      	strh	r3, [r4, #12]
 8007e64:	89a3      	ldrh	r3, [r4, #12]
 8007e66:	431d      	orrs	r5, r3
 8007e68:	81a5      	strh	r5, [r4, #12]
 8007e6a:	e7cf      	b.n	8007e0c <__smakebuf_r+0x18>

08007e6c <_fstat_r>:
 8007e6c:	b538      	push	{r3, r4, r5, lr}
 8007e6e:	4d07      	ldr	r5, [pc, #28]	; (8007e8c <_fstat_r+0x20>)
 8007e70:	2300      	movs	r3, #0
 8007e72:	4604      	mov	r4, r0
 8007e74:	4608      	mov	r0, r1
 8007e76:	4611      	mov	r1, r2
 8007e78:	602b      	str	r3, [r5, #0]
 8007e7a:	f7f9 fb32 	bl	80014e2 <_fstat>
 8007e7e:	1c43      	adds	r3, r0, #1
 8007e80:	d102      	bne.n	8007e88 <_fstat_r+0x1c>
 8007e82:	682b      	ldr	r3, [r5, #0]
 8007e84:	b103      	cbz	r3, 8007e88 <_fstat_r+0x1c>
 8007e86:	6023      	str	r3, [r4, #0]
 8007e88:	bd38      	pop	{r3, r4, r5, pc}
 8007e8a:	bf00      	nop
 8007e8c:	20000388 	.word	0x20000388

08007e90 <_isatty_r>:
 8007e90:	b538      	push	{r3, r4, r5, lr}
 8007e92:	4d06      	ldr	r5, [pc, #24]	; (8007eac <_isatty_r+0x1c>)
 8007e94:	2300      	movs	r3, #0
 8007e96:	4604      	mov	r4, r0
 8007e98:	4608      	mov	r0, r1
 8007e9a:	602b      	str	r3, [r5, #0]
 8007e9c:	f7f9 fb31 	bl	8001502 <_isatty>
 8007ea0:	1c43      	adds	r3, r0, #1
 8007ea2:	d102      	bne.n	8007eaa <_isatty_r+0x1a>
 8007ea4:	682b      	ldr	r3, [r5, #0]
 8007ea6:	b103      	cbz	r3, 8007eaa <_isatty_r+0x1a>
 8007ea8:	6023      	str	r3, [r4, #0]
 8007eaa:	bd38      	pop	{r3, r4, r5, pc}
 8007eac:	20000388 	.word	0x20000388

08007eb0 <abort>:
 8007eb0:	b508      	push	{r3, lr}
 8007eb2:	2006      	movs	r0, #6
 8007eb4:	f000 fa04 	bl	80082c0 <raise>
 8007eb8:	2001      	movs	r0, #1
 8007eba:	f7f9 fac3 	bl	8001444 <_exit>

08007ebe <__sfputc_r>:
 8007ebe:	6893      	ldr	r3, [r2, #8]
 8007ec0:	3b01      	subs	r3, #1
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	b410      	push	{r4}
 8007ec6:	6093      	str	r3, [r2, #8]
 8007ec8:	da08      	bge.n	8007edc <__sfputc_r+0x1e>
 8007eca:	6994      	ldr	r4, [r2, #24]
 8007ecc:	42a3      	cmp	r3, r4
 8007ece:	db01      	blt.n	8007ed4 <__sfputc_r+0x16>
 8007ed0:	290a      	cmp	r1, #10
 8007ed2:	d103      	bne.n	8007edc <__sfputc_r+0x1e>
 8007ed4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ed8:	f000 b934 	b.w	8008144 <__swbuf_r>
 8007edc:	6813      	ldr	r3, [r2, #0]
 8007ede:	1c58      	adds	r0, r3, #1
 8007ee0:	6010      	str	r0, [r2, #0]
 8007ee2:	7019      	strb	r1, [r3, #0]
 8007ee4:	4608      	mov	r0, r1
 8007ee6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <__sfputs_r>:
 8007eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eee:	4606      	mov	r6, r0
 8007ef0:	460f      	mov	r7, r1
 8007ef2:	4614      	mov	r4, r2
 8007ef4:	18d5      	adds	r5, r2, r3
 8007ef6:	42ac      	cmp	r4, r5
 8007ef8:	d101      	bne.n	8007efe <__sfputs_r+0x12>
 8007efa:	2000      	movs	r0, #0
 8007efc:	e007      	b.n	8007f0e <__sfputs_r+0x22>
 8007efe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f02:	463a      	mov	r2, r7
 8007f04:	4630      	mov	r0, r6
 8007f06:	f7ff ffda 	bl	8007ebe <__sfputc_r>
 8007f0a:	1c43      	adds	r3, r0, #1
 8007f0c:	d1f3      	bne.n	8007ef6 <__sfputs_r+0xa>
 8007f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007f10 <_vfiprintf_r>:
 8007f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f14:	460d      	mov	r5, r1
 8007f16:	b09d      	sub	sp, #116	; 0x74
 8007f18:	4614      	mov	r4, r2
 8007f1a:	4698      	mov	r8, r3
 8007f1c:	4606      	mov	r6, r0
 8007f1e:	b118      	cbz	r0, 8007f28 <_vfiprintf_r+0x18>
 8007f20:	6a03      	ldr	r3, [r0, #32]
 8007f22:	b90b      	cbnz	r3, 8007f28 <_vfiprintf_r+0x18>
 8007f24:	f7fc f82a 	bl	8003f7c <__sinit>
 8007f28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f2a:	07d9      	lsls	r1, r3, #31
 8007f2c:	d405      	bmi.n	8007f3a <_vfiprintf_r+0x2a>
 8007f2e:	89ab      	ldrh	r3, [r5, #12]
 8007f30:	059a      	lsls	r2, r3, #22
 8007f32:	d402      	bmi.n	8007f3a <_vfiprintf_r+0x2a>
 8007f34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f36:	f7fc ff4a 	bl	8004dce <__retarget_lock_acquire_recursive>
 8007f3a:	89ab      	ldrh	r3, [r5, #12]
 8007f3c:	071b      	lsls	r3, r3, #28
 8007f3e:	d501      	bpl.n	8007f44 <_vfiprintf_r+0x34>
 8007f40:	692b      	ldr	r3, [r5, #16]
 8007f42:	b99b      	cbnz	r3, 8007f6c <_vfiprintf_r+0x5c>
 8007f44:	4629      	mov	r1, r5
 8007f46:	4630      	mov	r0, r6
 8007f48:	f000 f93a 	bl	80081c0 <__swsetup_r>
 8007f4c:	b170      	cbz	r0, 8007f6c <_vfiprintf_r+0x5c>
 8007f4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f50:	07dc      	lsls	r4, r3, #31
 8007f52:	d504      	bpl.n	8007f5e <_vfiprintf_r+0x4e>
 8007f54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f58:	b01d      	add	sp, #116	; 0x74
 8007f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f5e:	89ab      	ldrh	r3, [r5, #12]
 8007f60:	0598      	lsls	r0, r3, #22
 8007f62:	d4f7      	bmi.n	8007f54 <_vfiprintf_r+0x44>
 8007f64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f66:	f7fc ff33 	bl	8004dd0 <__retarget_lock_release_recursive>
 8007f6a:	e7f3      	b.n	8007f54 <_vfiprintf_r+0x44>
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8007f70:	2320      	movs	r3, #32
 8007f72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f76:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f7a:	2330      	movs	r3, #48	; 0x30
 8007f7c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008130 <_vfiprintf_r+0x220>
 8007f80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f84:	f04f 0901 	mov.w	r9, #1
 8007f88:	4623      	mov	r3, r4
 8007f8a:	469a      	mov	sl, r3
 8007f8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f90:	b10a      	cbz	r2, 8007f96 <_vfiprintf_r+0x86>
 8007f92:	2a25      	cmp	r2, #37	; 0x25
 8007f94:	d1f9      	bne.n	8007f8a <_vfiprintf_r+0x7a>
 8007f96:	ebba 0b04 	subs.w	fp, sl, r4
 8007f9a:	d00b      	beq.n	8007fb4 <_vfiprintf_r+0xa4>
 8007f9c:	465b      	mov	r3, fp
 8007f9e:	4622      	mov	r2, r4
 8007fa0:	4629      	mov	r1, r5
 8007fa2:	4630      	mov	r0, r6
 8007fa4:	f7ff ffa2 	bl	8007eec <__sfputs_r>
 8007fa8:	3001      	adds	r0, #1
 8007faa:	f000 80a9 	beq.w	8008100 <_vfiprintf_r+0x1f0>
 8007fae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fb0:	445a      	add	r2, fp
 8007fb2:	9209      	str	r2, [sp, #36]	; 0x24
 8007fb4:	f89a 3000 	ldrb.w	r3, [sl]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f000 80a1 	beq.w	8008100 <_vfiprintf_r+0x1f0>
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007fc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fc8:	f10a 0a01 	add.w	sl, sl, #1
 8007fcc:	9304      	str	r3, [sp, #16]
 8007fce:	9307      	str	r3, [sp, #28]
 8007fd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fd4:	931a      	str	r3, [sp, #104]	; 0x68
 8007fd6:	4654      	mov	r4, sl
 8007fd8:	2205      	movs	r2, #5
 8007fda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fde:	4854      	ldr	r0, [pc, #336]	; (8008130 <_vfiprintf_r+0x220>)
 8007fe0:	f7f8 f916 	bl	8000210 <memchr>
 8007fe4:	9a04      	ldr	r2, [sp, #16]
 8007fe6:	b9d8      	cbnz	r0, 8008020 <_vfiprintf_r+0x110>
 8007fe8:	06d1      	lsls	r1, r2, #27
 8007fea:	bf44      	itt	mi
 8007fec:	2320      	movmi	r3, #32
 8007fee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ff2:	0713      	lsls	r3, r2, #28
 8007ff4:	bf44      	itt	mi
 8007ff6:	232b      	movmi	r3, #43	; 0x2b
 8007ff8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ffc:	f89a 3000 	ldrb.w	r3, [sl]
 8008000:	2b2a      	cmp	r3, #42	; 0x2a
 8008002:	d015      	beq.n	8008030 <_vfiprintf_r+0x120>
 8008004:	9a07      	ldr	r2, [sp, #28]
 8008006:	4654      	mov	r4, sl
 8008008:	2000      	movs	r0, #0
 800800a:	f04f 0c0a 	mov.w	ip, #10
 800800e:	4621      	mov	r1, r4
 8008010:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008014:	3b30      	subs	r3, #48	; 0x30
 8008016:	2b09      	cmp	r3, #9
 8008018:	d94d      	bls.n	80080b6 <_vfiprintf_r+0x1a6>
 800801a:	b1b0      	cbz	r0, 800804a <_vfiprintf_r+0x13a>
 800801c:	9207      	str	r2, [sp, #28]
 800801e:	e014      	b.n	800804a <_vfiprintf_r+0x13a>
 8008020:	eba0 0308 	sub.w	r3, r0, r8
 8008024:	fa09 f303 	lsl.w	r3, r9, r3
 8008028:	4313      	orrs	r3, r2
 800802a:	9304      	str	r3, [sp, #16]
 800802c:	46a2      	mov	sl, r4
 800802e:	e7d2      	b.n	8007fd6 <_vfiprintf_r+0xc6>
 8008030:	9b03      	ldr	r3, [sp, #12]
 8008032:	1d19      	adds	r1, r3, #4
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	9103      	str	r1, [sp, #12]
 8008038:	2b00      	cmp	r3, #0
 800803a:	bfbb      	ittet	lt
 800803c:	425b      	neglt	r3, r3
 800803e:	f042 0202 	orrlt.w	r2, r2, #2
 8008042:	9307      	strge	r3, [sp, #28]
 8008044:	9307      	strlt	r3, [sp, #28]
 8008046:	bfb8      	it	lt
 8008048:	9204      	strlt	r2, [sp, #16]
 800804a:	7823      	ldrb	r3, [r4, #0]
 800804c:	2b2e      	cmp	r3, #46	; 0x2e
 800804e:	d10c      	bne.n	800806a <_vfiprintf_r+0x15a>
 8008050:	7863      	ldrb	r3, [r4, #1]
 8008052:	2b2a      	cmp	r3, #42	; 0x2a
 8008054:	d134      	bne.n	80080c0 <_vfiprintf_r+0x1b0>
 8008056:	9b03      	ldr	r3, [sp, #12]
 8008058:	1d1a      	adds	r2, r3, #4
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	9203      	str	r2, [sp, #12]
 800805e:	2b00      	cmp	r3, #0
 8008060:	bfb8      	it	lt
 8008062:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008066:	3402      	adds	r4, #2
 8008068:	9305      	str	r3, [sp, #20]
 800806a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008140 <_vfiprintf_r+0x230>
 800806e:	7821      	ldrb	r1, [r4, #0]
 8008070:	2203      	movs	r2, #3
 8008072:	4650      	mov	r0, sl
 8008074:	f7f8 f8cc 	bl	8000210 <memchr>
 8008078:	b138      	cbz	r0, 800808a <_vfiprintf_r+0x17a>
 800807a:	9b04      	ldr	r3, [sp, #16]
 800807c:	eba0 000a 	sub.w	r0, r0, sl
 8008080:	2240      	movs	r2, #64	; 0x40
 8008082:	4082      	lsls	r2, r0
 8008084:	4313      	orrs	r3, r2
 8008086:	3401      	adds	r4, #1
 8008088:	9304      	str	r3, [sp, #16]
 800808a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800808e:	4829      	ldr	r0, [pc, #164]	; (8008134 <_vfiprintf_r+0x224>)
 8008090:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008094:	2206      	movs	r2, #6
 8008096:	f7f8 f8bb 	bl	8000210 <memchr>
 800809a:	2800      	cmp	r0, #0
 800809c:	d03f      	beq.n	800811e <_vfiprintf_r+0x20e>
 800809e:	4b26      	ldr	r3, [pc, #152]	; (8008138 <_vfiprintf_r+0x228>)
 80080a0:	bb1b      	cbnz	r3, 80080ea <_vfiprintf_r+0x1da>
 80080a2:	9b03      	ldr	r3, [sp, #12]
 80080a4:	3307      	adds	r3, #7
 80080a6:	f023 0307 	bic.w	r3, r3, #7
 80080aa:	3308      	adds	r3, #8
 80080ac:	9303      	str	r3, [sp, #12]
 80080ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080b0:	443b      	add	r3, r7
 80080b2:	9309      	str	r3, [sp, #36]	; 0x24
 80080b4:	e768      	b.n	8007f88 <_vfiprintf_r+0x78>
 80080b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80080ba:	460c      	mov	r4, r1
 80080bc:	2001      	movs	r0, #1
 80080be:	e7a6      	b.n	800800e <_vfiprintf_r+0xfe>
 80080c0:	2300      	movs	r3, #0
 80080c2:	3401      	adds	r4, #1
 80080c4:	9305      	str	r3, [sp, #20]
 80080c6:	4619      	mov	r1, r3
 80080c8:	f04f 0c0a 	mov.w	ip, #10
 80080cc:	4620      	mov	r0, r4
 80080ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080d2:	3a30      	subs	r2, #48	; 0x30
 80080d4:	2a09      	cmp	r2, #9
 80080d6:	d903      	bls.n	80080e0 <_vfiprintf_r+0x1d0>
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d0c6      	beq.n	800806a <_vfiprintf_r+0x15a>
 80080dc:	9105      	str	r1, [sp, #20]
 80080de:	e7c4      	b.n	800806a <_vfiprintf_r+0x15a>
 80080e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80080e4:	4604      	mov	r4, r0
 80080e6:	2301      	movs	r3, #1
 80080e8:	e7f0      	b.n	80080cc <_vfiprintf_r+0x1bc>
 80080ea:	ab03      	add	r3, sp, #12
 80080ec:	9300      	str	r3, [sp, #0]
 80080ee:	462a      	mov	r2, r5
 80080f0:	4b12      	ldr	r3, [pc, #72]	; (800813c <_vfiprintf_r+0x22c>)
 80080f2:	a904      	add	r1, sp, #16
 80080f4:	4630      	mov	r0, r6
 80080f6:	f7fb f8bf 	bl	8003278 <_printf_float>
 80080fa:	4607      	mov	r7, r0
 80080fc:	1c78      	adds	r0, r7, #1
 80080fe:	d1d6      	bne.n	80080ae <_vfiprintf_r+0x19e>
 8008100:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008102:	07d9      	lsls	r1, r3, #31
 8008104:	d405      	bmi.n	8008112 <_vfiprintf_r+0x202>
 8008106:	89ab      	ldrh	r3, [r5, #12]
 8008108:	059a      	lsls	r2, r3, #22
 800810a:	d402      	bmi.n	8008112 <_vfiprintf_r+0x202>
 800810c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800810e:	f7fc fe5f 	bl	8004dd0 <__retarget_lock_release_recursive>
 8008112:	89ab      	ldrh	r3, [r5, #12]
 8008114:	065b      	lsls	r3, r3, #25
 8008116:	f53f af1d 	bmi.w	8007f54 <_vfiprintf_r+0x44>
 800811a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800811c:	e71c      	b.n	8007f58 <_vfiprintf_r+0x48>
 800811e:	ab03      	add	r3, sp, #12
 8008120:	9300      	str	r3, [sp, #0]
 8008122:	462a      	mov	r2, r5
 8008124:	4b05      	ldr	r3, [pc, #20]	; (800813c <_vfiprintf_r+0x22c>)
 8008126:	a904      	add	r1, sp, #16
 8008128:	4630      	mov	r0, r6
 800812a:	f7fb fb49 	bl	80037c0 <_printf_i>
 800812e:	e7e4      	b.n	80080fa <_vfiprintf_r+0x1ea>
 8008130:	080085be 	.word	0x080085be
 8008134:	080085c8 	.word	0x080085c8
 8008138:	08003279 	.word	0x08003279
 800813c:	08007eed 	.word	0x08007eed
 8008140:	080085c4 	.word	0x080085c4

08008144 <__swbuf_r>:
 8008144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008146:	460e      	mov	r6, r1
 8008148:	4614      	mov	r4, r2
 800814a:	4605      	mov	r5, r0
 800814c:	b118      	cbz	r0, 8008156 <__swbuf_r+0x12>
 800814e:	6a03      	ldr	r3, [r0, #32]
 8008150:	b90b      	cbnz	r3, 8008156 <__swbuf_r+0x12>
 8008152:	f7fb ff13 	bl	8003f7c <__sinit>
 8008156:	69a3      	ldr	r3, [r4, #24]
 8008158:	60a3      	str	r3, [r4, #8]
 800815a:	89a3      	ldrh	r3, [r4, #12]
 800815c:	071a      	lsls	r2, r3, #28
 800815e:	d525      	bpl.n	80081ac <__swbuf_r+0x68>
 8008160:	6923      	ldr	r3, [r4, #16]
 8008162:	b31b      	cbz	r3, 80081ac <__swbuf_r+0x68>
 8008164:	6823      	ldr	r3, [r4, #0]
 8008166:	6922      	ldr	r2, [r4, #16]
 8008168:	1a98      	subs	r0, r3, r2
 800816a:	6963      	ldr	r3, [r4, #20]
 800816c:	b2f6      	uxtb	r6, r6
 800816e:	4283      	cmp	r3, r0
 8008170:	4637      	mov	r7, r6
 8008172:	dc04      	bgt.n	800817e <__swbuf_r+0x3a>
 8008174:	4621      	mov	r1, r4
 8008176:	4628      	mov	r0, r5
 8008178:	f7fe fdf2 	bl	8006d60 <_fflush_r>
 800817c:	b9e0      	cbnz	r0, 80081b8 <__swbuf_r+0x74>
 800817e:	68a3      	ldr	r3, [r4, #8]
 8008180:	3b01      	subs	r3, #1
 8008182:	60a3      	str	r3, [r4, #8]
 8008184:	6823      	ldr	r3, [r4, #0]
 8008186:	1c5a      	adds	r2, r3, #1
 8008188:	6022      	str	r2, [r4, #0]
 800818a:	701e      	strb	r6, [r3, #0]
 800818c:	6962      	ldr	r2, [r4, #20]
 800818e:	1c43      	adds	r3, r0, #1
 8008190:	429a      	cmp	r2, r3
 8008192:	d004      	beq.n	800819e <__swbuf_r+0x5a>
 8008194:	89a3      	ldrh	r3, [r4, #12]
 8008196:	07db      	lsls	r3, r3, #31
 8008198:	d506      	bpl.n	80081a8 <__swbuf_r+0x64>
 800819a:	2e0a      	cmp	r6, #10
 800819c:	d104      	bne.n	80081a8 <__swbuf_r+0x64>
 800819e:	4621      	mov	r1, r4
 80081a0:	4628      	mov	r0, r5
 80081a2:	f7fe fddd 	bl	8006d60 <_fflush_r>
 80081a6:	b938      	cbnz	r0, 80081b8 <__swbuf_r+0x74>
 80081a8:	4638      	mov	r0, r7
 80081aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081ac:	4621      	mov	r1, r4
 80081ae:	4628      	mov	r0, r5
 80081b0:	f000 f806 	bl	80081c0 <__swsetup_r>
 80081b4:	2800      	cmp	r0, #0
 80081b6:	d0d5      	beq.n	8008164 <__swbuf_r+0x20>
 80081b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80081bc:	e7f4      	b.n	80081a8 <__swbuf_r+0x64>
	...

080081c0 <__swsetup_r>:
 80081c0:	b538      	push	{r3, r4, r5, lr}
 80081c2:	4b2a      	ldr	r3, [pc, #168]	; (800826c <__swsetup_r+0xac>)
 80081c4:	4605      	mov	r5, r0
 80081c6:	6818      	ldr	r0, [r3, #0]
 80081c8:	460c      	mov	r4, r1
 80081ca:	b118      	cbz	r0, 80081d4 <__swsetup_r+0x14>
 80081cc:	6a03      	ldr	r3, [r0, #32]
 80081ce:	b90b      	cbnz	r3, 80081d4 <__swsetup_r+0x14>
 80081d0:	f7fb fed4 	bl	8003f7c <__sinit>
 80081d4:	89a3      	ldrh	r3, [r4, #12]
 80081d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081da:	0718      	lsls	r0, r3, #28
 80081dc:	d422      	bmi.n	8008224 <__swsetup_r+0x64>
 80081de:	06d9      	lsls	r1, r3, #27
 80081e0:	d407      	bmi.n	80081f2 <__swsetup_r+0x32>
 80081e2:	2309      	movs	r3, #9
 80081e4:	602b      	str	r3, [r5, #0]
 80081e6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80081ea:	81a3      	strh	r3, [r4, #12]
 80081ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081f0:	e034      	b.n	800825c <__swsetup_r+0x9c>
 80081f2:	0758      	lsls	r0, r3, #29
 80081f4:	d512      	bpl.n	800821c <__swsetup_r+0x5c>
 80081f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081f8:	b141      	cbz	r1, 800820c <__swsetup_r+0x4c>
 80081fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081fe:	4299      	cmp	r1, r3
 8008200:	d002      	beq.n	8008208 <__swsetup_r+0x48>
 8008202:	4628      	mov	r0, r5
 8008204:	f7ff fd6a 	bl	8007cdc <_free_r>
 8008208:	2300      	movs	r3, #0
 800820a:	6363      	str	r3, [r4, #52]	; 0x34
 800820c:	89a3      	ldrh	r3, [r4, #12]
 800820e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008212:	81a3      	strh	r3, [r4, #12]
 8008214:	2300      	movs	r3, #0
 8008216:	6063      	str	r3, [r4, #4]
 8008218:	6923      	ldr	r3, [r4, #16]
 800821a:	6023      	str	r3, [r4, #0]
 800821c:	89a3      	ldrh	r3, [r4, #12]
 800821e:	f043 0308 	orr.w	r3, r3, #8
 8008222:	81a3      	strh	r3, [r4, #12]
 8008224:	6923      	ldr	r3, [r4, #16]
 8008226:	b94b      	cbnz	r3, 800823c <__swsetup_r+0x7c>
 8008228:	89a3      	ldrh	r3, [r4, #12]
 800822a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800822e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008232:	d003      	beq.n	800823c <__swsetup_r+0x7c>
 8008234:	4621      	mov	r1, r4
 8008236:	4628      	mov	r0, r5
 8008238:	f7ff fddc 	bl	8007df4 <__smakebuf_r>
 800823c:	89a0      	ldrh	r0, [r4, #12]
 800823e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008242:	f010 0301 	ands.w	r3, r0, #1
 8008246:	d00a      	beq.n	800825e <__swsetup_r+0x9e>
 8008248:	2300      	movs	r3, #0
 800824a:	60a3      	str	r3, [r4, #8]
 800824c:	6963      	ldr	r3, [r4, #20]
 800824e:	425b      	negs	r3, r3
 8008250:	61a3      	str	r3, [r4, #24]
 8008252:	6923      	ldr	r3, [r4, #16]
 8008254:	b943      	cbnz	r3, 8008268 <__swsetup_r+0xa8>
 8008256:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800825a:	d1c4      	bne.n	80081e6 <__swsetup_r+0x26>
 800825c:	bd38      	pop	{r3, r4, r5, pc}
 800825e:	0781      	lsls	r1, r0, #30
 8008260:	bf58      	it	pl
 8008262:	6963      	ldrpl	r3, [r4, #20]
 8008264:	60a3      	str	r3, [r4, #8]
 8008266:	e7f4      	b.n	8008252 <__swsetup_r+0x92>
 8008268:	2000      	movs	r0, #0
 800826a:	e7f7      	b.n	800825c <__swsetup_r+0x9c>
 800826c:	200001d0 	.word	0x200001d0

08008270 <_raise_r>:
 8008270:	291f      	cmp	r1, #31
 8008272:	b538      	push	{r3, r4, r5, lr}
 8008274:	4604      	mov	r4, r0
 8008276:	460d      	mov	r5, r1
 8008278:	d904      	bls.n	8008284 <_raise_r+0x14>
 800827a:	2316      	movs	r3, #22
 800827c:	6003      	str	r3, [r0, #0]
 800827e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008282:	bd38      	pop	{r3, r4, r5, pc}
 8008284:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008286:	b112      	cbz	r2, 800828e <_raise_r+0x1e>
 8008288:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800828c:	b94b      	cbnz	r3, 80082a2 <_raise_r+0x32>
 800828e:	4620      	mov	r0, r4
 8008290:	f000 f830 	bl	80082f4 <_getpid_r>
 8008294:	462a      	mov	r2, r5
 8008296:	4601      	mov	r1, r0
 8008298:	4620      	mov	r0, r4
 800829a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800829e:	f000 b817 	b.w	80082d0 <_kill_r>
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d00a      	beq.n	80082bc <_raise_r+0x4c>
 80082a6:	1c59      	adds	r1, r3, #1
 80082a8:	d103      	bne.n	80082b2 <_raise_r+0x42>
 80082aa:	2316      	movs	r3, #22
 80082ac:	6003      	str	r3, [r0, #0]
 80082ae:	2001      	movs	r0, #1
 80082b0:	e7e7      	b.n	8008282 <_raise_r+0x12>
 80082b2:	2400      	movs	r4, #0
 80082b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80082b8:	4628      	mov	r0, r5
 80082ba:	4798      	blx	r3
 80082bc:	2000      	movs	r0, #0
 80082be:	e7e0      	b.n	8008282 <_raise_r+0x12>

080082c0 <raise>:
 80082c0:	4b02      	ldr	r3, [pc, #8]	; (80082cc <raise+0xc>)
 80082c2:	4601      	mov	r1, r0
 80082c4:	6818      	ldr	r0, [r3, #0]
 80082c6:	f7ff bfd3 	b.w	8008270 <_raise_r>
 80082ca:	bf00      	nop
 80082cc:	200001d0 	.word	0x200001d0

080082d0 <_kill_r>:
 80082d0:	b538      	push	{r3, r4, r5, lr}
 80082d2:	4d07      	ldr	r5, [pc, #28]	; (80082f0 <_kill_r+0x20>)
 80082d4:	2300      	movs	r3, #0
 80082d6:	4604      	mov	r4, r0
 80082d8:	4608      	mov	r0, r1
 80082da:	4611      	mov	r1, r2
 80082dc:	602b      	str	r3, [r5, #0]
 80082de:	f7f9 f8a1 	bl	8001424 <_kill>
 80082e2:	1c43      	adds	r3, r0, #1
 80082e4:	d102      	bne.n	80082ec <_kill_r+0x1c>
 80082e6:	682b      	ldr	r3, [r5, #0]
 80082e8:	b103      	cbz	r3, 80082ec <_kill_r+0x1c>
 80082ea:	6023      	str	r3, [r4, #0]
 80082ec:	bd38      	pop	{r3, r4, r5, pc}
 80082ee:	bf00      	nop
 80082f0:	20000388 	.word	0x20000388

080082f4 <_getpid_r>:
 80082f4:	f7f9 b88e 	b.w	8001414 <_getpid>

080082f8 <_init>:
 80082f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082fa:	bf00      	nop
 80082fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082fe:	bc08      	pop	{r3}
 8008300:	469e      	mov	lr, r3
 8008302:	4770      	bx	lr

08008304 <_fini>:
 8008304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008306:	bf00      	nop
 8008308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800830a:	bc08      	pop	{r3}
 800830c:	469e      	mov	lr, r3
 800830e:	4770      	bx	lr
